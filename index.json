[{"content":"","date":"9 October 2023","permalink":"/java/","section":"Javas","summary":"","title":"Javas"},{"content":"\r线程池 # new Thread缺点：频繁创建和销毁，浪费了线程资源，短时间创建大量线程和销毁 线程池是有限可重复使用的线程，用完需要归还\n//构造方法，含有七个参数 public ThreadPoolExecutor(int corePoolSize,//核心线程池大小 int maximumPoolSize,//最大线程池大小 long keepAliveTime,//线程最大空闲时间 TimeUnit unit,//最大空闲时间单位 BlockingQueue\u0026lt;Runnable\u0026gt; workQueue//线程等待队列，当超出最大容量时，任务进入等待队列) { this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, Executors.defaultThreadFactory(),//线程创建工厂，可自定义 defaultHandler//拒绝策略，实在不能加入新的任务时，拒绝任务); } 根据CPU类型分配线程池大小 # public static void main(String[] args) throws InterruptedException { ThreadPoolExecutor executor = new ThreadPoolExecutor(2, 4, //2个核心线程，最大线程数为4个 3, TimeUnit.SECONDS, //最大空闲时间为3秒钟 new ArrayBlockingQueue\u0026lt;\u0026gt;(2)); //这里使用容量为2的ArrayBlockingQueue队列 for (int i = 0; i \u0026lt; 6; i++) { //开始6个任务 int finalI = i; executor.execute(() -\u0026gt; { try { System.out.println(Thread.currentThread().getName()+\u0026#34; 开始执行！（\u0026#34;+ finalI); TimeUnit.SECONDS.sleep(1); System.out.println(Thread.currentThread().getName()+\u0026#34; 已结束！（\u0026#34;+finalI); } catch (InterruptedException e) { e.printStackTrace(); } }); } TimeUnit.SECONDS.sleep(1); //看看当前线程池中的线程数量 System.out.println(\u0026#34;线程池中线程数量：\u0026#34;+executor.getPoolSize()); TimeUnit.SECONDS.sleep(5); //等到超过空闲时间 System.out.println(\u0026#34;线程池中线程数量：\u0026#34;+executor.getPoolSize()); executor.shutdownNow(); //使用完线程池记得关闭，不然程序不会结束，它会取消所有等待中的任务以及试图中断正在执行的任务，关闭后，无法再提交任务，一律拒绝 //executor.shutdown(); 同样可以关闭，但是会执行完等待队列中的任务再关闭 } } ","date":"9 October 2023","permalink":"/java/%E5%B9%B6%E5%8F%91/%E5%B9%B6%E5%8F%91%E8%BF%9B%E9%98%B6/","section":"Javas","summary":"线程池 # new Thread缺点：频繁创建和销毁，浪费了线程资源，短时间创建大量线程和销毁 线程池是有限可重复使用的线程，用完需要归还\n//构造方法，含有七个参数 public ThreadPoolExecutor(int corePoolSize,//核心线程池大小 int maximumPoolSize,//最大线程池大小 long keepAliveTime,//线程最大空闲时间 TimeUnit unit,//最大空闲时间单位 BlockingQueue\u0026lt;Runnable\u0026gt; workQueue//线程等待队列，当超出最大容量时，任务进入等待队列) { this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, Executors.defaultThreadFactory(),//线程创建工厂，可自定义 defaultHandler//拒绝策略，实在不能加入新的任务时，拒绝任务); } 根据CPU类型分配线程池大小 # public static void main(String[] args) throws InterruptedException { ThreadPoolExecutor executor = new ThreadPoolExecutor(2, 4, //2个核心线程，最大线程数为4个 3, TimeUnit.","title":"并发进阶"},{"content":"","date":"9 October 2023","permalink":"/","section":"春江花朝秋月夜","summary":"","title":"春江花朝秋月夜"},{"content":"\rJava 并发编程 # 轻量级锁： # 检查当前对象的mark word是否有被其他线程占用，假如没有就会在当前栈帧里面建立一个 锁记录，复制并存储当前对象的mark word 信息。\n不像重量级锁需要向系统申请互斥量，\nCAS（无锁算法） # 显然，当cas失败的时候，说明有线程进入了这个同步代码块，这个时候，虚拟机将会检查 当前对象的mark word是否指向当前对象的栈帧，是的话就说明当前已经获得锁，否则不是-》退化为重量级锁(不可逆) 解锁时，同样使用CAS算法操作，同时唤醒挂起的线程\n偏向锁 # 当某个锁频繁的被同一个线程获取，对轻量级锁进行优化，所以偏向锁专门为单个线程服务，此时，无须再进行CAS操作，当其他线程 又开始抢锁，偏向锁可能退化为轻量级锁。注意当调用对象的hashCode（）方法，由于mark word 数据结构无法 保存hash值，偏向锁直接退化为轻量级锁。\n锁的退化不可逆\n锁消除和锁优化 # 代码块中有可能不会总是出现请求锁和释放锁的问题，（比如循环中加锁），此时锁为了优化出现锁消除和锁优化\nJava内存模型（JMM） # 主内存： 存放对象实例的部分 工作内存：虚拟机栈的部分，放入cpu的高速缓存里面。 自增操作不是由一个指令实现的！！！包括获取，修改和保存\nclass Test{ private static volatile int sum=0;//成员变量,这样的变量必须是当前的对象所拥有的 //加入了volatile关键字之后，线程之间可以感知彼此的值 @Test void LockTestAdd() throws InterruptedException { //没有加锁的时候，由于线程之间不能感知对方的值，最终结构可能不会是200 Thread th1 = new Thread(() -\u0026gt; { for (int i = 0; i \u0026lt; 100; i++) sum++; }); Thread th2 = new Thread(() -\u0026gt; { for (int i = 0; i \u0026lt; 100; i++) sum++; }); th1.start(); th2.start(); Thread.sleep(100); System.out.println(sum); } } 重排序 # 由于JVM虚拟机和编译器的优化，指令可能出现重排序，在这种情况下可能出现不符合预期的情况\nvolatile关键字（无法保证原子性，但能保证可见性） # load和save操作，将主内存中的变量拷贝到本地，只对本地变量进行操作。\nvolatile实现原理就是改变成员变量时，save的工作区的变量无效。重新更新主内存中的变量值， volatile关键字会禁止指令重排序。\nclass VolatileTest{ private static volatile int sum=0;//成员变量,这样的变量必须是当前的对象所拥有的 //加入了volatile关键字之后，线程之间可以感知彼此的值,但还是无法保证原子性操作，不能达到预期效果 @Test void LockTestAdd() throws InterruptedException { //没有加锁的时候，由于线程之间不能感知对方的值，最终结构可能不会是200 Thread th1 = new Thread(() -\u0026gt; { for (int i = 0; i \u0026lt; 1000; i++) sum++; }); Thread th2 = new Thread(() -\u0026gt; { for (int i = 0; i \u0026lt; 1000; i++) { sum++; } }); th1.start(); th2.start(); Thread.sleep(100); System.out.println(sum); } } JVM编译器下面的顺序执行：\nHappens Before 原则（之前的对之后的可见） # 程序次序规则，监视器锁原则，volatile关键字原则（写操作在读操作之前），\nstart(线程启动规则) # A线程用start调用B线程，那么A在B之前（A happens before B）\njoin线程加入规则 # A线程join线程B，那么B在A之前（B happens before A）\n程和线程的区别 # 程序软件 \u0026gt; 进程 \u0026gt; 线程\n锁的框：Lock # 为了代替传统的synchronized,notify,wait,notifyAll关键字，Lock接口-\u0026gt;ReentrantLock可重入锁\n可重入锁（排他锁） # 多次加锁，其他线程想要得到锁需要把多次的锁释放才可以获取这把锁\n当存在线程想要获取锁但是锁没有释放的时候，此时这些线程将会进入线程队列里面\n公平锁和非公平锁（AQS） # 公平锁始终保持先到先得到锁，非公平锁则是在等待队列中所有等待线程同时尝试获取锁，获取不到则再次进入等待队列\nReentrantLock lock=new ReentrantLock(false);//公平锁不一定总是保持公平。队列同步器 Runnable runnable=()-\u0026gt;{ System.out.println(Thread.currentThread().getName() + \u0026#34;开始尝试获取锁资源\u0026#34;); lock.lock(); System.out.println(Thread.currentThread().getName() + \u0026#34;成功😺😺😺😺😺😺😺😺😺获取锁资源\u0026#34;); lock.unlock(); }; for (int i = 0; i \u0026lt; 10; i++) { new Thread(runnable,\u0026#34;T\u0026#34;+i).start(); } 读写锁： # 除了可重入锁之外，还有一种类型的锁叫做读写锁，当然它并不是专门用作读写操作的锁， 它和可重入锁不同的地方在于，可重入锁是一种排他锁，当一个线程得到锁之后，另一个线程必须等待其释放锁，否则一律不允许获取到锁。而读写锁在同一时间，是可以让多个线程获取到锁的，它其实就是针对于读写场景而出现的。\n读写锁维护了一个读锁和一个写锁，这两个锁的机制是不同的。\n读锁：在没有任何线程占用写锁的情况下，同一时间可以有多个线程加读锁。\n写锁：在没有任何线程占用读锁的情况下，同一时间只能有一个线程加写锁。\n显然读锁是可以重复获取的但是写锁不能，当一个线程同时拥有写锁和读锁的时候，先申请读锁 然后释放写锁，此时其他的线程又可以获取读锁，只剩下读锁，此时称之为“锁降级”。 在仅仅持有读锁的时候去申请写锁，称为“锁升级”，这时候ReentryReadWriteLock类不支持。\n队列同步器AQS（AbstractQueuedSynchronizer） # 继承关系：Lock-\u0026gt; Sync -\u0026gt; AbstractQueuedSynchronizer\n多线程并发环境下的ABA问题 # //ABA问题的版本号解决方法 AtomicReference\u0026lt;String\u0026gt; atomicReference=new AtomicReference\u0026lt;\u0026gt;(\u0026#34;A\u0026#34;); System.out.println(atomicReference.compareAndSet(\u0026#34;a\u0026#34;, \u0026#34;c\u0026#34;)); String hello = \u0026#34;hello\u0026#34;; String world = \u0026#34;world\u0026#34;; Runnable r=()-\u0026gt;{ System.out.println(atomicReference.compareAndSet(\u0026#34;A\u0026#34;, \u0026#34;B\u0026#34;)); }; for (int i = 0; i \u0026lt; 100; i++) { new Thread(r).start(); } 可以看到多个线程尝试去修改的时候出现了一个true\n解决办法：添加版本号，每次修改的时候对版本号（stamp）进行修正\n并发容器 # 比如在对链表添加元素的时候，还没有完成对链表扩容之前，其他线程插队，非法插入元素，就会造成数组越界的报错。\nConcurrentHashMap:在jdk1.7之前的实现方法，比如在原子类里面实现LongAdder具有压力分散的思想，提高了性能，选择将数据一段一段的存储，这样就减少了等待，当线程访问锁的时候只占用锁的一小部分 jdk8之后，实现方法是通过cas算法配合锁机制实现的。由于HashMap利用了哈希表，容量越大，加锁的粒度就会越细。 //原子类的测试操作 //ABA问题的版本号解决方法 CopyOnWriteArrayList\u0026lt;Object\u0026gt; objects = new CopyOnWriteArrayList\u0026lt;\u0026gt;(); //读取不加锁，写数据需要加锁，所以性能还行 //专用于多线程环境下的容器 LinkedList\u0026lt;Object\u0026gt; list = new LinkedList\u0026lt;\u0026gt;();//没有发生并发异常 ArrayList\u0026lt;Object\u0026gt; list1 = new ArrayList\u0026lt;\u0026gt;(); ConcurrentHashMap\u0026lt;Integer, String\u0026gt; map = new ConcurrentHashMap\u0026lt;\u0026gt;(); HashMap\u0026lt;Integer, String\u0026gt; hashMap = new HashMap\u0026lt;\u0026gt;(); Runnable r=()-\u0026gt;{ for (int j = 0; j \u0026lt; 100; j++) { int finalI=j; objects.add(\u0026#34;aaa\u0026#34;); map.put(finalI,\u0026#34;aaa\u0026#34;); hashMap.put(finalI,\u0026#34;aaa\u0026#34;); } }; for (int i = 0; i \u0026lt; 100; i++) { new Thread(r).start(); } TimeUnit.SECONDS.sleep(1); 阻塞队列（BlokingQueue） # 生产者消费之模型：\n//测试阻塞队列实现生产者消费者模型 BlockingQueue\u0026lt;Object\u0026gt; queue=new ArrayBlockingQueue\u0026lt;\u0026gt;(1);//窗口只能放一个菜，阻塞队列的容量 Runnable supplier=()-\u0026gt;{ while (true){ try { String name = Thread.currentThread().getName(); System.err.println(time()+\u0026#34;生产者\u0026#34;+name+\u0026#34;正在准备餐品\u0026#34;); TimeUnit.SECONDS.sleep(3); System.err.println(time()+\u0026#34;生产者\u0026#34;+name+\u0026#34;已出餐\u0026#34;); queue.put(new Object()); }catch (InterruptedException e){ e.printStackTrace(); break; } } }; Runnable consumer=()-\u0026gt;{ while (true){ try { String name = Thread.currentThread().getName(); System.out.println(time()+\u0026#34;消费者\u0026#34;+name+\u0026#34;正在等待餐品\u0026#34;); queue.take(); System.out.println(time()+\u0026#34;消费者\u0026#34;+name+\u0026#34;已取餐\u0026#34;); TimeUnit.SECONDS.sleep(4); System.out.println(time()+\u0026#34;消费者\u0026#34;+name+\u0026#34;已吃完\u0026#34;); }catch (InterruptedException e){ e.printStackTrace(); break; } } }; for (int i = 0; i \u0026lt; 2; i++) { new Thread(supplier,\u0026#34;supplier\u0026#34;+i).start(); } for (int i = 0; i \u0026lt; 3; i++) { new Thread(consumer,\u0026#34;consumer\u0026#34;+i).start(); } } public static String time(){ SimpleDateFormat format = new SimpleDateFormat(\u0026#34;HH:mm:ss\u0026#34;); return \u0026#34;[\u0026#34;+format.format(new Date())+\u0026#34;]\u0026#34;; } 常见的阻塞队列：ArrayBlokingQueue(有界缓冲阻塞队列),SynchronousQueue(无缓冲阻塞队列),LinkedBlokingQueue(无界带缓冲阻塞队列)\npublic boolean offer(E e) { Objects.requireNonNull(e);//检查当前的队列是否为空 final ReentrantLock lock = this.lock;//对当前线程加锁 lock.lock(); try { if (count == items.length) return false; else { enqueue(e); return true; } } finally { lock.unlock(); } } public E take() throws InterruptedException { final ReentrantLock lock = this.lock; lock.lockInterruptibly(); try { while (count == 0) notEmpty.await();//当当前线程读取到队列为空时，由于take操作时阻塞的，需要挂起当前线程，等待直到队列里面有值 return dequeue(); } finally { lock.unlock(); } } SynchronousQueue(没有任何容量，插入和取出是一一对应的) # SynchronousQueue\u0026lt;String\u0026gt; queue=new SynchronousQueue\u0026lt;\u0026gt;(); new Thread(()-\u0026gt;{ try { System.out.println(queue.take()); } catch (InterruptedException e) { throw new RuntimeException(e); } }).start(); queue.put(\u0026#34;sss\u0026#34;); 这是一个特殊的队列，内部维护了一个抽象类Transfer（put和take操作糅合在一起了）， 里面有一个方法：transfer（E e,bolean timed,long nanos）直接通过生产者和消费者模型来实现数据的传递。 当新的元素put进去线程将会阻塞。直到元素被take。同时这个类维护了公平锁和非公平锁两种方法。\n当当前队列里面有元素但是没有线程来取元素时候，就会开启自旋，当自旋一定次数之后还没有来取就会挂起\nPriorityBlockingQueue优先队列 # 构造方法：PriorityQueue queue=new PriorityQueue(10,Integer::compare);\n传入容量和函数逻辑（优先逻辑）\nDelayQueue延时队列 # 特殊地方：存储的元素必须是继承自Delayed接口的类，同时元素类必须实现Delayed接口。\n使用时可以实现延时出队，按照同时的时候按照优先级（自己实现）进行出队，这样就可以实现缓存了。\n底层实现：\npublic class DelayQueue\u0026lt;E extends Delayed\u0026gt; extends AbstractQueue\u0026lt;E\u0026gt; implements BlockingQueue\u0026lt;E\u0026gt; { private final transient ReentrantLock lock = new ReentrantLock(); private final PriorityQueue\u0026lt;E\u0026gt; q = new PriorityQueue\u0026lt;E\u0026gt;(); //通过内部维护的优先队列来实现元素的存储，而不是本身进行存储 } 主要常见的阻塞队列总结如下： # ArrayBlokingQueue底层通过数组实现的阻塞队列，可以设置初始的容量，换句话容量是固定的 LinkedTransferQueue SynchronousQueue要求入队和出队必须同时进行，一一对应，原因是内部维护了一个抽象类tansfer，需要等到消费者和生产者同时到齐才可以完成交接工作，支持公平和非公平 PriorityBlokingQueue优先队列，元素的获取顺序按照优先级决定 DelayQueue能够实现延迟获取元素，同样支持优先级，要求加入的元素必须继承Delayed接口 数据字典 # 常见的常用的数据，具有分级的特点，现在将比如省份县市地点的信息维护成一张表就可以是实现 据字典，通常具有id，parent_id这些字段，维护父级和子级的关系。\n关于ElementUi的数据字典的显示方法就是检查hasChildren字段的值进行渲染\n线程池 # 引入原因：频繁创建和销毁线程对系统资源的浪费十分严重，为了合理分配和调用系统资源，产生了线程池的技术\n实现原理：将已创建的线程复用，利用池化技术，就像数据库连接池一样，我们也可以创建很多个线程，然后反复地使用这些线程，而不对它们进行销毁。\n由于线程池可以反复利用已有线程执行多线程操作，所以它一般是有容量限制的，当所有的线程都处于工作状态时，那么新的多线程请求会被阻塞，直到有一个线程空闲出来为止，实际上这里就会用到我们之前讲解的阻塞队列。\n","date":"9 October 2023","permalink":"/java/%E5%B9%B6%E5%8F%91/juc/","section":"Javas","summary":"Java 并发编程 # 轻量级锁： # 检查当前对象的mark word是否有被其他线程占用，假如没有就会在当前栈帧里面建立一个 锁记录，复制并存储当前对象的mark word 信息。\n不像重量级锁需要向系统申请互斥量，\nCAS（无锁算法） # 显然，当cas失败的时候，说明有线程进入了这个同步代码块，这个时候，虚拟机将会检查 当前对象的mark word是否指向当前对象的栈帧，是的话就说明当前已经获得锁，否则不是-》退化为重量级锁(不可逆) 解锁时，同样使用CAS算法操作，同时唤醒挂起的线程\n偏向锁 # 当某个锁频繁的被同一个线程获取，对轻量级锁进行优化，所以偏向锁专门为单个线程服务，此时，无须再进行CAS操作，当其他线程 又开始抢锁，偏向锁可能退化为轻量级锁。注意当调用对象的hashCode（）方法，由于mark word 数据结构无法 保存hash值，偏向锁直接退化为轻量级锁。\n锁的退化不可逆\n锁消除和锁优化 # 代码块中有可能不会总是出现请求锁和释放锁的问题，（比如循环中加锁），此时锁为了优化出现锁消除和锁优化\nJava内存模型（JMM） # 主内存： 存放对象实例的部分 工作内存：虚拟机栈的部分，放入cpu的高速缓存里面。 自增操作不是由一个指令实现的！！！包括获取，修改和保存","title":"Java-Concurrent"},{"content":"","date":"8 October 2023","permalink":"/all/","section":"Alls","summary":"","title":"Alls"},{"content":"","date":"8 October 2023","permalink":"/authors/","section":"Authors","summary":"","title":"Authors"},{"content":"","date":"8 October 2023","permalink":"/example/","section":"Examples","summary":"","title":"Examples"},{"content":"测试显示最近的文章\n","date":"8 October 2023","permalink":"/all/example/recent/","section":"Alls","summary":"测试显示最近的文章","title":"H"},{"content":"测试显示最近的文章\n","date":"8 October 2023","permalink":"/example/recent/","section":"Examples","summary":"测试显示最近的文章","title":"How to Generate Publication Markdown"},{"content":"","date":"8 October 2023","permalink":"/tags/java/","section":"Tags","summary":"","title":"Java"},{"content":"","date":"8 October 2023","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":"8 October 2023","permalink":"/authors/%E6%98%A5%E6%B1%9F%E8%8A%B1%E6%9C%9D%E7%A7%8B%E6%9C%88%E5%A4%9C/","section":"Authors","summary":"","title":"春江花朝秋月夜"},{"content":"","date":"7 October 2023","permalink":"/friend/","section":"Friends","summary":"","title":"Friends"},{"content":"\r你好我的朋友！！ # 需要添加友链请联系我的邮箱。\n","date":"7 October 2023","permalink":"/friend/hello/","section":"Friends","summary":"你好我的朋友！！ # 需要添加友链请联系我的邮箱。","title":"Hello"},{"content":"","date":"3 October 2023","permalink":"/complex/","section":"Complexes","summary":"","title":"Complexes"},{"content":"\r如何通过Hugo这个框架来搭建一款属于自己的博客呢？ # 观前提醒：这篇笔记借鉴了下面两个作者：\n一是：\r小棉尾巴\n事件契机 # 我其实原本就知道github的pages自动部署博客功能，当时大二不熟练，今天目睹专业大佬的博客，自然也就重新搞起来了。\n如下就是大佬的博客（这个主题本来尝试用，后续发现比较花哨就不采用了）\n本人搭建的博客：\n第一步下载HuGo框架： # 以Windows为例：只需打开CMD执行下面这个命令\nwinget install Hugo.Hugo.Extended 等待下载完成重启Shell命令窗口即可，Hugo将会自动配置环境变量。\n检查是否安装成功：\nhugo version 第二部创建Hugo博客项目 # 只需要在文件夹下面新建终端使用如下命令，hugo将会自动创建你的项目名称文件夹 ，同时弹出一个主题链接\nhugo new site +你的项目名称 现在你需要进入你的项目也就是命令： cd 你的项目名称\n同时将项目注册为git根\ngit init 例如： 点击\rhttps://themes.gohugo.io/.这个链接\n如下就是一些主题了：\n随意选取一个之后点击Download就会进入主题的github仓库，然后需要\n比如这个：\n执行install the theme 里面的命令\ngit submodule add git@github.com:MeiK2333/github-style.git themes/github-style 下载的主题插件将会进入themes目录里面:\n接着拷贝exampleSite目录下面的content,static,config.toml到自己的项目里面覆盖自己项目的目录。同时记得删除hugo.toml配置文件\n第三步，几个重要的命令 # 第一个是：hugo server:类似于npm run serve/dev 将会部署项目，这时候自己访问\rhttp://127.0.0.1:1313/就可以查看自己的网站 第二个是：hugo new 文件路径+文件名称.md则是创建笔记，hugo将会自主创建文档 第三个是：hugo ,hugo将会编译markdown文件为html文件存储到public文件夹下面同时部署到网站上 最后一步 # 将public注册为git根绑定github上你的仓库同时提交文件即可。\n感谢\n","date":"3 October 2023","permalink":"/all/complex/%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87hugo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/","section":"Alls","summary":"如何通过Hugo这个框架来搭建一款属于自己的博客呢？ # 观前提醒：这篇笔记借鉴了下面两个作者：\n一是：\r小棉尾巴\n事件契机 # 我其实原本就知道github的pages自动部署博客功能，当时大二不熟练，今天目睹专业大佬的博客，自然也就重新搞起来了。\n如下就是大佬的博客（这个主题本来尝试用，后续发现比较花哨就不采用了）\n本人搭建的博客：\n第一步下载HuGo框架： # 以Windows为例：只需打开CMD执行下面这个命令\nwinget install Hugo.Hugo.Extended 等待下载完成重启Shell命令窗口即可，Hugo将会自动配置环境变量。\n检查是否安装成功：\nhugo version 第二部创建Hugo博客项目 # 只需要在文件夹下面新建终端使用如下命令，hugo将会自动创建你的项目名称文件夹 ，同时弹出一个主题链接\nhugo new site +你的项目名称 现在你需要进入你的项目也就是命令： cd 你的项目名称","title":"如何通过hugo搭建自己的博客"},{"content":"\r如何通过Hugo这个框架来搭建一款属于自己的博客呢？ # 观前提醒：这篇笔记借鉴了下面两个作者：\n一是：\r小棉尾巴\n事件契机 # 我其实原本就知道github的pages自动部署博客功能，当时大二不熟练，今天目睹专业大佬的博客，自然也就重新搞起来了。\n如下就是大佬的博客（这个主题本来尝试用，后续发现比较花哨就不采用了）\n本人搭建的博客：\n第一步下载HuGo框架： # 以Windows为例：只需打开CMD执行下面这个命令\nwinget install Hugo.Hugo.Extended 等待下载完成重启Shell命令窗口即可，Hugo将会自动配置环境变量。\n检查是否安装成功：\nhugo version 第二部创建Hugo博客项目 # 只需要在文件夹下面新建终端使用如下命令，hugo将会自动创建你的项目名称文件夹 ，同时弹出一个主题链接\nhugo new site +你的项目名称 现在你需要进入你的项目也就是命令： cd 你的项目名称\n同时将项目注册为git根\ngit init 例如： 点击\rhttps://themes.gohugo.io/.这个链接\n如下就是一些主题了：\n随意选取一个之后点击Download就会进入主题的github仓库，然后需要\n比如这个：\n执行install the theme 里面的命令\ngit submodule add git@github.com:MeiK2333/github-style.git themes/github-style 下载的主题插件将会进入themes目录里面:\n接着拷贝exampleSite目录下面的content,static,config.toml到自己的项目里面覆盖自己项目的目录。同时记得删除hugo.toml配置文件\n第三步，几个重要的命令 # 第一个是：hugo server:类似于npm run serve/dev 将会部署项目，这时候自己访问\rhttp://127.0.0.1:1313/就可以查看自己的网站 第二个是：hugo new 文件路径+文件名称.md则是创建笔记，hugo将会自主创建文档 第三个是：hugo ,hugo将会编译markdown文件为html文件存储到public文件夹下面同时部署到网站上 最后一步 # 将public注册为git根绑定github上你的仓库同时提交文件即可。\n感谢\n","date":"3 October 2023","permalink":"/complex/%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87hugo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/","section":"Complexes","summary":"如何通过Hugo这个框架来搭建一款属于自己的博客呢？ # 观前提醒：这篇笔记借鉴了下面两个作者：\n一是：\r小棉尾巴\n事件契机 # 我其实原本就知道github的pages自动部署博客功能，当时大二不熟练，今天目睹专业大佬的博客，自然也就重新搞起来了。\n如下就是大佬的博客（这个主题本来尝试用，后续发现比较花哨就不采用了）\n本人搭建的博客：\n第一步下载HuGo框架： # 以Windows为例：只需打开CMD执行下面这个命令\nwinget install Hugo.Hugo.Extended 等待下载完成重启Shell命令窗口即可，Hugo将会自动配置环境变量。\n检查是否安装成功：\nhugo version 第二部创建Hugo博客项目 # 只需要在文件夹下面新建终端使用如下命令，hugo将会自动创建你的项目名称文件夹 ，同时弹出一个主题链接\nhugo new site +你的项目名称 现在你需要进入你的项目也就是命令： cd 你的项目名称","title":"如何通过hugo搭建自己的博客"},{"content":"\r先放一张跳墙成功的画面： # 科学上网难吗？ # 结论：很简单！！！ 首先是我在配置代理时候发现的几个好的站点：如下 # 科学上网主要有两个代理方法，但实际内核应该是一样的：\n这里有关于两个不同的翻墙方法的说明链接 # 第一个：\r第二个：\r参考链接：\rSSR配置说明 ssr链接方式\n如何翻墙啊，说了那么多。 # 第一步：下载 # 下载链接 蓝色款（不推荐，本文也不采用）：\r然后点击zip下载即可。ss的好处是没被墙，可以直接到git上下载。\n红色款（强烈推荐！！！）：这里我直接放上zip，因为国内无法下载，我已经提前翻墙下载好咯。 # 下好后： # 先复制下面的链接，然后点击ShadowssocksR-dotnet4.0.exe！！！！ # 首先准备好ssr链接。这个方法最简单。 # ssr://Y20xLWhrLmh1dGFvbm9kZTIudG9wOjEyNDA1OmF1dGhfYWVzMTI4X3 NoYTE6Y2hhY2hhMjAtaWV0ZjpodHRwX3NpbXBsZTpTSFZVWVc5RGJHOTFaQS8_b 2Jmc3BhcmFtPU16WmhNV0V6TWpVd05TNXRhV055YjNOdlpuUXVZMjl0JnByb3RvcGFyYW0 9TXpJMU1EVTZTSEF6VlVVNE5YTmhWMjl2UjFOTlJnJnJlbWFya3M9NmFhWjVyaXZJQzBnU1VWUVRDQXRJ Rk5UTDFOVFVpQXRJREExJmdyb3VwPTVhU0g1NVNvVVZIdnZKb3pORFF6T1RVMk5qRXk 这里我们选择用SSR,影梭的粉红色飞机。 出现飞机图标后，左键点击它！！！ 选择剪贴板导入SSR链接。\n代理规则设置为全局： # A # 选择PAC为绕过常见即可。 # 接下来就可以愉快上网啦！ # 可以看到左下角IP地址也是香港的 # :::danger\n最后，注意安全，上网愉快！ # :::\n","date":"3 October 2023","permalink":"/all/java/%E6%9D%82%E8%AE%B0/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/","section":"Alls","summary":"先放一张跳墙成功的画面： # 科学上网难吗？ # 结论：很简单！！！ 首先是我在配置代理时候发现的几个好的站点：如下 # 科学上网主要有两个代理方法，但实际内核应该是一样的：\n这里有关于两个不同的翻墙方法的说明链接 # 第一个：\r第二个：\r参考链接：\rSSR配置说明 ssr链接方式\n如何翻墙啊，说了那么多。 # 第一步：下载 # 下载链接 蓝色款（不推荐，本文也不采用）：\r然后点击zip下载即可。ss的好处是没被墙，可以直接到git上下载。\n红色款（强烈推荐！！！）：这里我直接放上zip，因为国内无法下载，我已经提前翻墙下载好咯。 # 下好后： # 先复制下面的链接，然后点击ShadowssocksR-dotnet4.0.exe！！！！ # 首先准备好ssr链接。这个方法最简单。 # ssr://Y20xLWhrLmh1dGFvbm9kZTIudG9wOjEyNDA1OmF1dGhfYWVzMTI4X3 NoYTE6Y2hhY2hhMjAtaWV0ZjpodHRwX3NpbXBsZTpTSFZVWVc5RGJHOTFaQS8_b 2Jmc3BhcmFtPU16WmhNV0V6TWpVd05TNXRhV055YjNOdlpuUXVZMjl0JnByb3RvcGFyYW0 9TXpJMU1EVTZTSEF6VlVVNE5YTmhWMjl2UjFOTlJnJnJlbWFya3M9NmFhWjVyaXZJQzBnU1VWUVRDQXRJ Rk5UTDFOVFVpQXRJREExJmdyb3VwPTVhU0g1NVNvVVZIdnZKb3pORFF6T1RVMk5qRXk 这里我们选择用SSR,影梭的粉红色飞机。 出现飞机图标后，左键点击它！！！ 选择剪贴板导入SSR链接。","title":"科学上网"},{"content":"\r先放一张跳墙成功的画面： # 科学上网难吗？ # 结论：很简单！！！ 首先是我在配置代理时候发现的几个好的站点：如下 # 科学上网主要有两个代理方法，但实际内核应该是一样的：\n这里有关于两个不同的翻墙方法的说明链接 # 第一个：\r第二个：\r参考链接：\rSSR配置说明 ssr链接方式\n如何翻墙啊，说了那么多。 # 第一步：下载 # 下载链接 蓝色款（不推荐，本文也不采用）：\r然后点击zip下载即可。ss的好处是没被墙，可以直接到git上下载。\n红色款（强烈推荐！！！）：这里我直接放上zip，因为国内无法下载，我已经提前翻墙下载好咯。 # 下好后： # 先复制下面的链接，然后点击ShadowssocksR-dotnet4.0.exe！！！！ # 首先准备好ssr链接。这个方法最简单。 # ssr://Y20xLWhrLmh1dGFvbm9kZTIudG9wOjEyNDA1OmF1dGhfYWVzMTI4X3 NoYTE6Y2hhY2hhMjAtaWV0ZjpodHRwX3NpbXBsZTpTSFZVWVc5RGJHOTFaQS8_b 2Jmc3BhcmFtPU16WmhNV0V6TWpVd05TNXRhV055YjNOdlpuUXVZMjl0JnByb3RvcGFyYW0 9TXpJMU1EVTZTSEF6VlVVNE5YTmhWMjl2UjFOTlJnJnJlbWFya3M9NmFhWjVyaXZJQzBnU1VWUVRDQXRJ Rk5UTDFOVFVpQXRJREExJmdyb3VwPTVhU0g1NVNvVVZIdnZKb3pORFF6T1RVMk5qRXk 这里我们选择用SSR,影梭的粉红色飞机。 出现飞机图标后，左键点击它！！！ 选择剪贴板导入SSR链接。\n代理规则设置为全局： # A # 选择PAC为绕过常见即可。 # 接下来就可以愉快上网啦！ # 可以看到左下角IP地址也是香港的 # :::danger\n最后，注意安全，上网愉快！ # :::\n","date":"3 October 2023","permalink":"/java/%E6%9D%82%E8%AE%B0/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/","section":"Javas","summary":"先放一张跳墙成功的画面： # 科学上网难吗？ # 结论：很简单！！！ 首先是我在配置代理时候发现的几个好的站点：如下 # 科学上网主要有两个代理方法，但实际内核应该是一样的：\n这里有关于两个不同的翻墙方法的说明链接 # 第一个：\r第二个：\r参考链接：\rSSR配置说明 ssr链接方式\n如何翻墙啊，说了那么多。 # 第一步：下载 # 下载链接 蓝色款（不推荐，本文也不采用）：\r然后点击zip下载即可。ss的好处是没被墙，可以直接到git上下载。\n红色款（强烈推荐！！！）：这里我直接放上zip，因为国内无法下载，我已经提前翻墙下载好咯。 # 下好后： # 先复制下面的链接，然后点击ShadowssocksR-dotnet4.0.exe！！！！ # 首先准备好ssr链接。这个方法最简单。 # ssr://Y20xLWhrLmh1dGFvbm9kZTIudG9wOjEyNDA1OmF1dGhfYWVzMTI4X3 NoYTE6Y2hhY2hhMjAtaWV0ZjpodHRwX3NpbXBsZTpTSFZVWVc5RGJHOTFaQS8_b 2Jmc3BhcmFtPU16WmhNV0V6TWpVd05TNXRhV055YjNOdlpuUXVZMjl0JnByb3RvcGFyYW0 9TXpJMU1EVTZTSEF6VlVVNE5YTmhWMjl2UjFOTlJnJnJlbWFya3M9NmFhWjVyaXZJQzBnU1VWUVRDQXRJ Rk5UTDFOVFVpQXRJREExJmdyb3VwPTVhU0g1NVNvVVZIdnZKb3pORFF6T1RVMk5qRXk 这里我们选择用SSR,影梭的粉红色飞机。 出现飞机图标后，左键点击它！！！ 选择剪贴板导入SSR链接。","title":"科学上网"},{"content":"1 综述 在Java中对象与对象的关系总体分为四类，分别是：依赖、关联、聚合和组合。\n（1）依赖(Dependency)关系是类与类之间的联接。依赖关系表示一个类依赖于另一个类的定义，一般而言，依赖关系在Java语言中体现为局域变量、方法的形参，或者对静态方法的调用。 （2）关联(Association）关系是类与类之间的联接，它使一个类知道另一个类的属性和方法。关联可以是双向的，也可以是单向的。在Java语言中，关联关系一般使用成员变量来实现 （3）聚合(Aggregation) 关系是关联关系的一种，是强的关联关系。聚合是整体和个体之间的关系 （4）组合(Composition) 关系是关联关系的一种，是比聚合关系强的关系。它要求普通的聚合关系中代表整体的对象负责代表部分对象的生命周期，组合关系是不能共享的\n依赖： # 个类A使用到了另一个类B，而这种使用关系是具有偶然性的、临时性的、非常弱的，但是B类的变化会影响到A\n关联： # 关联是一种“拥有”的关系。表现在代码上，就是一个类包含另一个类的实例，通常表现为被关联类以类属性的形式出现在关联类的类定义中，也可以表现为关联类引用了一个类型为被关联类的全局变量。关联可以使单向的，也可以使双向的。依赖和关联的区别在于依赖是使用，关联是拥有.\n聚合 # 聚合是关联关系的一种，它是一种强关联关系（has-a）;聚合关系是整体和个体/部分之间的关系;关联关系的两个类处于同一个层次上,而聚合关系的两个类处于不同的层次上,一个是整体,一个是个体/部分;在聚合关系中,代表个体/部分的对象有可能会被多个代表整体的对象所共享;表现在代码层面上就是在构造器初始化时将两个类关联起来\n组合 # 组合也是关联关系的一种（is-a）,但它是比聚合关系更强的关系.组合关系要求聚合关系中代表整体的对象要负责代表个体/部分的对象的整个生命周期;组合关系不能共享;在组合关系中,如果代表整体的对象被销毁或破坏,那么代表个体/部分的对象也一定会被销毁或破坏,而聚在合关系中,代表个体/部分的对象则有可能被多个代表整体的对象所共享,而不一定会随着某个代表整体的对象被销毁或破坏而被销毁或破坏;\n","date":"3 October 2023","permalink":"/all/java/javase/%E5%AF%B9%E8%B1%A1%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/","section":"Alls","summary":"1 综述 在Java中对象与对象的关系总体分为四类，分别是：依赖、关联、聚合和组合。\n（1）依赖(Dependency)关系是类与类之间的联接。依赖关系表示一个类依赖于另一个类的定义，一般而言，依赖关系在Java语言中体现为局域变量、方法的形参，或者对静态方法的调用。 （2）关联(Association）关系是类与类之间的联接，它使一个类知道另一个类的属性和方法。关联可以是双向的，也可以是单向的。在Java语言中，关联关系一般使用成员变量来实现 （3）聚合(Aggregation) 关系是关联关系的一种，是强的关联关系。聚合是整体和个体之间的关系 （4）组合(Composition) 关系是关联关系的一种，是比聚合关系强的关系。它要求普通的聚合关系中代表整体的对象负责代表部分对象的生命周期，组合关系是不能共享的\n依赖： # 个类A使用到了另一个类B，而这种使用关系是具有偶然性的、临时性的、非常弱的，但是B类的变化会影响到A\n关联： # 关联是一种“拥有”的关系。表现在代码上，就是一个类包含另一个类的实例，通常表现为被关联类以类属性的形式出现在关联类的类定义中，也可以表现为关联类引用了一个类型为被关联类的全局变量。关联可以使单向的，也可以使双向的。依赖和关联的区别在于依赖是使用，关联是拥有.\n聚合 # 聚合是关联关系的一种，它是一种强关联关系（has-a）;聚合关系是整体和个体/部分之间的关系;关联关系的两个类处于同一个层次上,而聚合关系的两个类处于不同的层次上,一个是整体,一个是个体/部分;在聚合关系中,代表个体/部分的对象有可能会被多个代表整体的对象所共享;表现在代码层面上就是在构造器初始化时将两个类关联起来\n组合 # 组合也是关联关系的一种（is-a）,但它是比聚合关系更强的关系.组合关系要求聚合关系中代表整体的对象要负责代表个体/部分的对象的整个生命周期;组合关系不能共享;在组合关系中,如果代表整体的对象被销毁或破坏,那么代表个体/部分的对象也一定会被销毁或破坏,而聚在合关系中,代表个体/部分的对象则有可能被多个代表整体的对象所共享,而不一定会随着某个代表整体的对象被销毁或破坏而被销毁或破坏;","title":"对象间的关系"},{"content":"1 综述 在Java中对象与对象的关系总体分为四类，分别是：依赖、关联、聚合和组合。\n（1）依赖(Dependency)关系是类与类之间的联接。依赖关系表示一个类依赖于另一个类的定义，一般而言，依赖关系在Java语言中体现为局域变量、方法的形参，或者对静态方法的调用。 （2）关联(Association）关系是类与类之间的联接，它使一个类知道另一个类的属性和方法。关联可以是双向的，也可以是单向的。在Java语言中，关联关系一般使用成员变量来实现 （3）聚合(Aggregation) 关系是关联关系的一种，是强的关联关系。聚合是整体和个体之间的关系 （4）组合(Composition) 关系是关联关系的一种，是比聚合关系强的关系。它要求普通的聚合关系中代表整体的对象负责代表部分对象的生命周期，组合关系是不能共享的\n依赖： # 个类A使用到了另一个类B，而这种使用关系是具有偶然性的、临时性的、非常弱的，但是B类的变化会影响到A\n关联： # 关联是一种“拥有”的关系。表现在代码上，就是一个类包含另一个类的实例，通常表现为被关联类以类属性的形式出现在关联类的类定义中，也可以表现为关联类引用了一个类型为被关联类的全局变量。关联可以使单向的，也可以使双向的。依赖和关联的区别在于依赖是使用，关联是拥有.\n聚合 # 聚合是关联关系的一种，它是一种强关联关系（has-a）;聚合关系是整体和个体/部分之间的关系;关联关系的两个类处于同一个层次上,而聚合关系的两个类处于不同的层次上,一个是整体,一个是个体/部分;在聚合关系中,代表个体/部分的对象有可能会被多个代表整体的对象所共享;表现在代码层面上就是在构造器初始化时将两个类关联起来\n组合 # 组合也是关联关系的一种（is-a）,但它是比聚合关系更强的关系.组合关系要求聚合关系中代表整体的对象要负责代表个体/部分的对象的整个生命周期;组合关系不能共享;在组合关系中,如果代表整体的对象被销毁或破坏,那么代表个体/部分的对象也一定会被销毁或破坏,而聚在合关系中,代表个体/部分的对象则有可能被多个代表整体的对象所共享,而不一定会随着某个代表整体的对象被销毁或破坏而被销毁或破坏;\n","date":"3 October 2023","permalink":"/java/javase/%E5%AF%B9%E8%B1%A1%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/","section":"Javas","summary":"1 综述 在Java中对象与对象的关系总体分为四类，分别是：依赖、关联、聚合和组合。\n（1）依赖(Dependency)关系是类与类之间的联接。依赖关系表示一个类依赖于另一个类的定义，一般而言，依赖关系在Java语言中体现为局域变量、方法的形参，或者对静态方法的调用。 （2）关联(Association）关系是类与类之间的联接，它使一个类知道另一个类的属性和方法。关联可以是双向的，也可以是单向的。在Java语言中，关联关系一般使用成员变量来实现 （3）聚合(Aggregation) 关系是关联关系的一种，是强的关联关系。聚合是整体和个体之间的关系 （4）组合(Composition) 关系是关联关系的一种，是比聚合关系强的关系。它要求普通的聚合关系中代表整体的对象负责代表部分对象的生命周期，组合关系是不能共享的\n依赖： # 个类A使用到了另一个类B，而这种使用关系是具有偶然性的、临时性的、非常弱的，但是B类的变化会影响到A\n关联： # 关联是一种“拥有”的关系。表现在代码上，就是一个类包含另一个类的实例，通常表现为被关联类以类属性的形式出现在关联类的类定义中，也可以表现为关联类引用了一个类型为被关联类的全局变量。关联可以使单向的，也可以使双向的。依赖和关联的区别在于依赖是使用，关联是拥有.\n聚合 # 聚合是关联关系的一种，它是一种强关联关系（has-a）;聚合关系是整体和个体/部分之间的关系;关联关系的两个类处于同一个层次上,而聚合关系的两个类处于不同的层次上,一个是整体,一个是个体/部分;在聚合关系中,代表个体/部分的对象有可能会被多个代表整体的对象所共享;表现在代码层面上就是在构造器初始化时将两个类关联起来\n组合 # 组合也是关联关系的一种（is-a）,但它是比聚合关系更强的关系.组合关系要求聚合关系中代表整体的对象要负责代表个体/部分的对象的整个生命周期;组合关系不能共享;在组合关系中,如果代表整体的对象被销毁或破坏,那么代表个体/部分的对象也一定会被销毁或破坏,而聚在合关系中,代表个体/部分的对象则有可能被多个代表整体的对象所共享,而不一定会随着某个代表整体的对象被销毁或破坏而被销毁或破坏;","title":"对象间的关系"},{"content":"Java中常用的关键字有以下分类： 访问控制 private protected public\n类,方法和变量修饰符 abstract class extends final implements interface native new static strictfp synchronized transient volatile\n程序控制 break continue return do while if else for instanceof switch case default\n异常处理 try cathc throw throws\n包相关 import package\n基本类型 boolean byte char double float int long short null true false\n变量引用 super this void 保留字 goto const\n详细解释：\n访问控制 private 私有的 private 关键字是访问控制修饰符，可以应用于类、方法或字段（在类中声明的变量）。 只能在声明 private（内部）类、方法或字段的类中引用这些类、方法或字段。在类的外部或者对于子类而言，它们是不可见的。 所有类成员的默认访问范围都是 package 访问，也就是说，除非存在特定的访问控制修饰符，否则，可以从同一个包中的任何类访问类成员。\nprotected 受保护的 protected 关键字是可以应用于类、方法或字段（在类中声明的变量）的访问控制修饰符。可以在声明 protected 类、方法或字段的类、同一个包中的其他任何类以及任何子类（无论子类是在哪个包中声明的）中引用这些类、方法或字段。所有类成员的默认访问范围都是 package 访问，也就是说，除非存在特定的访问控制修饰符，否则，可以从同一个包中的任何类访问类成员。\npublic 公共的 public 关键字是可以应用于类、方法或字段（在类中声明的变量）的访问控制修饰符。 可能只会在其他任何类或包中引用 public 类、方法或字段。所有类成员的默认访问范围都是 package 访问，也就是说，除非存在特定的访问控制修饰符，否则，可以从同一个包中的任何类访问类成员。\n4）总结 自身\t同包子类\t不同包子类\t同包类\t其他类 public\t可访问\t可继承\t可继承\t可访问\t可访问 protected\t可访问\t可继承\t可继承\t可访问\t不可访问 private\t可访问\t不可继承\t不可继承\t不可访问\t不可访问 defaule(不写)\t可访问\t可继承\t不可继承\t可访问\t不可访问\n类、方法和变量修饰符 abstract 声明抽象 abstract关键字可以修改类或方法。abstract类可以扩展（增加子类），但不能直接实例化。abstract方法不在声明它的类中实现，但必须在某个子类中重写。采用 abstract方法的类本来就是抽象类，并且必须声明为abstract。\nclass类 class 关键字用来声明新的 Java 类，该类是相关变量和/或方法的集合。类是面向对象的程序设计方法的基本构造单位。类通常代表某种实际实体，如几何形状或人。类是对象的模板。每个对象都是类的一个实例。要使用类，通常使用 new 操作符将类的对象实例化，然后调用类的方法来访问类的功能。\nextends 继承、扩展 extends 关键字用在 class 或 interface 声中，用于指示所声明的类或接口是其名称后跟有 extends 关键字的类或接口的子类。子类继承父类的所有 public 和 protected 变量和方法。 子类可以重写父类的任何非 final 方法。一个类只能扩展一个其他类。\nfinal 最终、不可改变 final 关键字可以应用于类，以指示不能扩展该类（不能有子类）。final 关键字可以应用于方法，以指示在子类中不能重写此方法。一个类不能同时是 abstract 又是 final。abstract 意味着必须扩展类，final 意味着不能扩展类。一个方法不能同时是 abstract 又是 final。abstract 意味着必须重写方法，final 意味着不能重写方法。\nimplements实现 implements 关键字在 class 声明中使用，以指示所声明的类提供了在 implements 关键字后面的名称所指定的接口中所声明的所有方法的实现。类必须提供在接口中所声明的所有方法的实现。一个类可以实现多个接口。\ninterface 接口 interface 关键字用来声明新的 Java 接口，接口是方法的集合。\n接口是 Java 语言的一项强大功能。任何类都可声明它实现一个或多个接口，这意味着它实现了在这些接口中所定义的所有方法。\n实现了接口的任何类都必须提供在该接口中的所有方法的实现。一个类可以实现多个接口。\nnative 本地 native 关键字可以应用于方法，以指示该方法是用 Java 以外的语言实现的。\nnew 新,创建 new 关键字用于创建类的新实例。\nnew 关键字后面的参数必须是类名，并且类名的后面必须是一组构造方法参数（必须带括号）。\n参数集合必须与类的构造方法的签名匹配。\n= 左侧的变量的类型必须与要实例化的类或接口具有赋值兼容关系。\nstatic 静态 static 关键字可以应用于内部类（在另一个类中定义的类）、方法或字段（类的成员变量）。 通常，static 关键字意味着应用它的实体在声明该实体的类的任何特定实例外部可用。\nstatic（内部）类可以被其他类实例化和引用（即使它是顶级类）。\nstatic 字段（类的成员变量）在类的所有实例中只存在一次。\n可以从类的外部调用 static 方法，而不用首先实例化该类。这样的引用始终包括类名作为方法调用的限定符。\n模式：public final static varName = ; 通常用于声明可以在类的外部使用的类常量。在引用这样的类常量时需要用类名加以限定。\nstrictfp 严格,精准 strictfp的意思是FP-strict，也就是说精确浮点的意思。在Java虚拟机进行浮点运算时，如果没有指定strictfp关键字时，Java的编译器以及运行环境在对浮点运算的表达式是采取一种近似于我行我素的行为来完成这些操作，以致于得到的结果往往无法令人满意。而一旦使用了strictfp来声明一个类、接口或者方法时，那么所声明的范围内Java的编译器以及运行环境会完全依照浮点规范IEEE-754来执行。因此如果想让浮点运算更加精确，而且不会因为不同的硬件平台所执行的结果不一致的话，那就请用关键字strictfp。 可以将一个类、接口以及方法声明为strictfp，但是不允许对接口中的方法以及构造函数声明strictfp关键字\nsynchronized线程、同步 synchronized 关键字可以应用于方法或语句块，并为一次只应由一个线程执行的关键代码段提供保护。 synchronized 关键字可防止代码的关键代码段一次被多个线程执行。\n如果应用于静态方法，那么，当该方法一次由一个线程执行时，整个类将被锁定。\n如果应用于实例方法，那么，当该方法一次由一个线程访问时，该实例将被锁定。\n如果应用于对象或数组，当关联的代码块一次由一个线程执行时，对象或数组将被锁定。\ninstanceof 实例 instanceof 关键字用来确定对象所属的类。\ntransient 短暂 transient 关键字可以应用于类的成员变量，以便指出该成员变量不应在包含它的类实例已序列化时被序列化。\n当一个对象被串行化的时候，transient型变量的值不包括在串行化的表示中，然而非transient型的变量是被包括进去的。\nJava的serialization提供了一种持久化对象实例的机制。当持久化对象时，可能有一个特殊的对象数据成员，我们不想用serialization机制来保存它。为了在一个特定对象的一个域上关闭serialization，可以在这个域前加上关键字transient。 transient是Java语言的关键字，用来表示一个域不是该对象串行化的一部分。当一个对象被串行化的时候，transient型变量的值不包括在串行化的表示中，然而非transient型的变量是被包括进去的。\nvolatile 易失 volatile 关键字用于表示可以被多个线程异步修改的成员变量。 注意：volatile 关键字在许多 Java 虚拟机中都没有实现。 volatile 的目标用途是为了确保所有线程所看到的指定变量的值都是相同的。\nJava 语言中的 volatile 变量可以被看作是一种 “程度较轻的 synchronized”；与 synchronized 块相比，volatile 变量所需的编码较少，并且运行时开销也较少，但是它所能实现的功能也仅是 synchronized 的一部分。\n程序控制语句 break 跳出，中断 break 关键字用于提前退出 for、while 或 do 循环，或者在 switch 语句中用来结束 case 块。 break 总是退出最深层的 while、for、do 或 switch 语句。\ncontinue 继续 continue 关键字用来跳转到 for、while 或 do 循环的下一个迭代。 continue 总是跳到最深层 while、for 或 do 语句的下一个迭代。\nreturn 返回 return 关键字会导致方法返回到调用它的方法，从而传递与返回方法的返回类型匹配的值。 如果方法具有非 void 的返回类型，return 语句必须具有相同或兼容类型的参数。\ndo 运行 do 关键字用于指定一个在每次迭代结束时检查其条件的循环。 do 循环体至少执行一次。\n条件表达式后面必须有分号。\nwhile 循环 while 关键字用于指定一个只要条件为真就会重复的循环。\nif 如果 if 关键字指示有条件地执行代码块。条件的计算结果必须是布尔值。\nif 语句可以有可选的 else 子句，该子句包含条件为 false 时将执行的代码。\n包含 boolean 操作数的表达式只能包含 boolean 操作数。\nelse 否则 else 关键字总是在 if-else 语句中与 if 关键字结合使用。else 子句是可选的，如果 if 条件为 false，则执行该子句。\nfor 循环 for 关键字用于指定一个在每次迭代结束前检查其条件的循环。\nfor 语句的形式为 for(initialize; condition; increment)\n控件流进入 for 语句时，将执行一次 initialize 语句。\n每次执行循环体之前将计算 condition 的结果。如果 condition 为 true，则执行循环体。\n每次执行循环体之后，在计算下一个迭代的 condition 之前，将执行 increment 语句。\nswitch 观察 switch 语句用于基于某个表达式选择执行多个代码块中的某一个。 switch 条件的计算结果必须等于 byte、char、short 或 int。\n如果没有 break 语句，执行流将进入所有后面的 case 和/或 default 块。\ncase 返回观察里的结果 case 用来标记 switch 语句中的每个分支。 case 块没有隐式结束点。break 语句通常在每个 case 块末尾使用，用于退出 switch 语句。\n如果没有 break 语句，执行流将进入所有后面的 case 和/或 default 块。\ndefault 默认 default 关键字用来标记 switch 语句中的默认分支。 default 块没有隐式结束点。break 语句通常在每个 case 或 default 块的末尾使用，以便在完成块时退出 switch 语句。\n如果没有 default 语句，其参数与任何 case 块都不匹配的 switch 语句将不执行任何操作。\n错误处理 try 捕获异常 try 关键字用于包含可能引发异常的语句块。 每个 try 块都必须至少有一个 catch 或 finally 子句。\n如果某个特定异常类未被任何 catch 子句处理，该异常将沿着调用栈递归地传播到下一个封闭 try 块。如果任何封闭 try 块都未捕获到异常，Java 解释器将退出，并显示错误消息和堆栈跟踪信息。\ncatch 处理异常 catch 关键字用来在 try-catch 或 try-catch-finally 语句中定义异常处理块。 开始和结束标记 { 和 } 是 catch 子句语法的一部分，即使该子句只包含一个语句，也不能省略这两个标记。\n每个 try 块都必须至少有一个 catch 或 finally 子句。\n如果某个特定异常类未被任何 catch 子句处理，该异常将沿着调用栈递归地传播到下一个封闭 try 块。如果任何封闭 try 块都未捕获到异常，Java 解释器将退出，并显示错误消息和堆栈跟踪信息。\nthrow 抛出一个异常对象 throw 关键字用于引发异常。 throw 语句将 java.lang.Throwable 作为参数。Throwable 在调用栈中向上传播，直到被适当的 catch 块捕获。\nthrows 声明一个异常可能被抛出 throws 关键字可以应用于方法，以便指出方法引发了特定类型的异常。 throws 关键字将逗号分隔的 java.lang.Throwables 列表作为参数。\n引发非 RuntimeException 异常的任何方法还必须在方法声明中使用 throws 修饰符来声明它引发的异常。\n要在 try-catch 块中包含带 throws 子句的方法的调用，必须提供该方法的调用者。\nfinally异常处理补充 不管有无异常发生，finally块中的代码总会执行 包相关 import 引入 import 关键字使一个包中的一个或所有类在当前 Java 源文件中可见。可以不使用完全限定的类名来引用导入的类。 当多个包包含同名的类时，许多 Java 程序员只使用特定的 import 语句（没有“*”）来避免不确定性。\npackage 包 package 关键字指定在 Java 源文件中声明的类所驻留的 Java 包。 package 语句（如果出现）必须是 Java 源文件中的第一个非注释性文本。\n例:java.lang.Object。\n如果 Java 源文件不包含 package 语句，在该文件中定义的类将位于“默认包”中。请注意，不能从非默认包中的类引用默认包中的类。\n基本类型 boolean 布尔型 boolean 是 Java 原始类型。boolean 变量的值可以是 true 或 false。 boolean 变量只能以 true 或 false 作为值。boolean 不能与数字类型相互转换。\n包含 boolean 操作数的表达式只能包含 boolean 操作数。\nBoolean 类是 boolean 原始类型的包装对象类。\nbyte 字节型 byte 是 Java 原始类型。byte 可存储在 [-128, 127] 范围以内的整数值。 Byte 类是 byte 原始类型的包装对象类。它定义代表此类型的值的范围的 MIN_VALUE 和 MAX_VALUE 常量。\nJava 中的所有整数值都是 32 位的 int 值，除非值后面有 l 或 L（如 235L），这表示该值应解释为 long。\nchar 字符型 char 是 Java 原始类型。char 变量可以存储一个 Unicode 字符。 可以使用下列 char 常量：\\b - 空格, \\f - 换页, \\n - 换行, \\r - 回车, \\t - 水平制表符, ’ - 单引号, \u0026quot; - 双引号, \\ - 反斜杠, \\xxx - 采用 xxx 编码的 Latin-1 字符。\\x 和 \\xx 均为合法形式，但可能引起混淆。 \\uxxxx - 采用十六进制编码 xxxx 的 Unicode 字符。\nCharacter 类包含一些可用来处理 char 变量的 static 方法，这些方法包括 isDigit()、isLetter()、isWhitespace() 和 toUpperCase()。\nchar 值没有符号。\ndouble 双精度 double 是 Java 原始类型。double 变量可以存储双精度浮点值。 由于浮点数据类型是实际数值的近似值，因此，一般不要对浮点数值进行是否相等的比较。\nJava 浮点数值可代表无穷大和 NaN（非数值）。Double 包装对象类用来定义常量 MIN_VALUE、MAX_VALUE、NEGATIVE_INFINITY、POSITIVE_INFINITY 和 NaN。\nfloat 浮点 float 是 Java 原始类型。float 变量可以存储单精度浮点值。 使用此关键字时应遵循下列规则：\nJava 中的浮点文字始终默认为双精度。要指定单精度文字值，应在数值后加上 f 或 F，如 0.01f。\n由于浮点数据类型是实际数值的近似值，因此，一般不要对浮点数值进行是否相等的比较。\nJava 浮点数值可代表无穷大和 NaN（非数值）。Float 包装对象类用来定义常量 MIN_VALUE、MAX_VALUE、NEGATIVE_INFINITY、POSITIVE_INFINITY 和 NaN。\nint 整型 int 是 Java 原始类型。int 变量可以存储 32 位的整数值。 Integer 类是 int 原始类型的包装对象类。它定义代表此类型的值的范围的 MIN_VALUE 和 MAX_VALUE 常量。\nJava 中的所有整数值都是 32 位的 int 值，除非值后面有 l 或 L（如 235L），这表示该值应解释为 long。\nlong 长整型 long 是 Java 原始类型。long 变量可以存储 64 位的带符号整数。 Long 类是 long 原始类型的包装对象类。它定义代表此类型的值的范围的 MIN_VALUE 和 MAX_VALUE 常量。\nJava 中的所有整数值都是 32 位的 int 值，除非值后面有 l 或 L（如 235L），这表示该值应解释为 long。\nshort 短整型 short 是 Java 原始类型。short 变量可以存储 16 位带符号的整数。 Short 类是 short 原始类型的包装对象类。它定义代表此类型的值的范围的 MIN_VALUE 和 MAX_VALUE 常量。\nJava 中的所有整数值都是 32 位的 int 值，除非值后面有 l 或 L（如 235L），这表示该值应解释为 long。\nnull 空 null 是 Java 的保留字，表示无值。 将 null 赋给非原始变量相当于释放该变量先前所引用的对象。\n不能将 null 赋给原始类型（byte、short、int、long、char、float、double、boolean）变量。\ntrue 真 true 关键字表示 boolean 变量的两个合法值中的一个。\nfalse 假 false 关键字代表 boolean 变量的两个合法值之一。\n基本数据类型总结 关于Java数据类型，我也专门写过一篇总结性博客：Java数据类型\n变量引用 super 父类,超类 super 关键字用于引用使用该关键字的类的超类。 作为独立语句出现的 super 表示调用超类的构造方法。\nsuper.\u0026lt; methodName \u0026gt;() 表示调用超类的方法。只有在如下情况中才需要采用这种用法：要调用在该类中被重写的方法，以便指定应当调用在超类中的该方法。\nthis 本类 this 关键字用于引用当前实例。 当引用可能不明确时，可以使用 this 关键字来引用当前的实例。\nvoid 无返回值 void 关键字表示 null 类型。 void 可以用作方法的返回类型，以指示该方法不返回值。\n保留字 正确识别java语言的关键字（keyword）和保留字（reserved word）是十分重要的。Java的关键字对java的编译器有特殊的意义，他们用来表示一种数据类型，或者表示程序的结构等。保留字是为java预留的关键字，他们虽然现在没有作为关键字，但在以后的升级版本中有可能作为关键字。 识别java语言的关键字，不要和其他语言如c/c++的关键字混淆。 const和goto是java的保留字。 所有的关键字都是小写\ngoto 跳转 goto 保留关键字，但无任何作用。结构化程序设计完全不需要 goto 语句即可完成各种流程，而 goto 语句的使用往往会使程序的可读性降低，所以 Java 不允许 goto 跳转。\nconst 静态 const 保留字，是一个类型修饰符，使用const声明的对象不能更新。与final某些类似。\nnative 本地 Java不是完美的，Java的不足除了体现在运行速度上要比传统的C++慢许多之外，Java无法直接访问到操作系统底层（如系统硬件等)，为此Java使用native方法来扩展Java程序的功能。\n可以将native方法比作Java程序同Ｃ程序的接口，其实现步骤：\n１、在Java中声明native()方法，然后编译；\n２、用javah产生一个.h文件；\n３、写一个.cpp文件实现native导出方法，其中需要包含第二步产生的.h文件（注意其中又包含了JDK带的jni.h文件）；\n４、将第三步的.cpp文件编译成动态链接库文件；\n５、在Java中用System.loadLibrary()方法加载第四步产生的动态链接库文件，这个native()方法就可以在Java中被访问了。\n","date":"3 October 2023","permalink":"/all/java/javase/%E5%85%B3%E9%94%AE%E5%AD%97/","section":"Alls","summary":"Java中常用的关键字有以下分类： 访问控制 private protected public\n类,方法和变量修饰符 abstract class extends final implements interface native new static strictfp synchronized transient volatile\n程序控制 break continue return do while if else for instanceof switch case default","title":"关键字"},{"content":"Java中常用的关键字有以下分类： 访问控制 private protected public\n类,方法和变量修饰符 abstract class extends final implements interface native new static strictfp synchronized transient volatile\n程序控制 break continue return do while if else for instanceof switch case default\n异常处理 try cathc throw throws\n包相关 import package\n基本类型 boolean byte char double float int long short null true false\n变量引用 super this void 保留字 goto const\n详细解释：\n访问控制 private 私有的 private 关键字是访问控制修饰符，可以应用于类、方法或字段（在类中声明的变量）。 只能在声明 private（内部）类、方法或字段的类中引用这些类、方法或字段。在类的外部或者对于子类而言，它们是不可见的。 所有类成员的默认访问范围都是 package 访问，也就是说，除非存在特定的访问控制修饰符，否则，可以从同一个包中的任何类访问类成员。\nprotected 受保护的 protected 关键字是可以应用于类、方法或字段（在类中声明的变量）的访问控制修饰符。可以在声明 protected 类、方法或字段的类、同一个包中的其他任何类以及任何子类（无论子类是在哪个包中声明的）中引用这些类、方法或字段。所有类成员的默认访问范围都是 package 访问，也就是说，除非存在特定的访问控制修饰符，否则，可以从同一个包中的任何类访问类成员。\npublic 公共的 public 关键字是可以应用于类、方法或字段（在类中声明的变量）的访问控制修饰符。 可能只会在其他任何类或包中引用 public 类、方法或字段。所有类成员的默认访问范围都是 package 访问，也就是说，除非存在特定的访问控制修饰符，否则，可以从同一个包中的任何类访问类成员。\n4）总结 自身\t同包子类\t不同包子类\t同包类\t其他类 public\t可访问\t可继承\t可继承\t可访问\t可访问 protected\t可访问\t可继承\t可继承\t可访问\t不可访问 private\t可访问\t不可继承\t不可继承\t不可访问\t不可访问 defaule(不写)\t可访问\t可继承\t不可继承\t可访问\t不可访问\n类、方法和变量修饰符 abstract 声明抽象 abstract关键字可以修改类或方法。abstract类可以扩展（增加子类），但不能直接实例化。abstract方法不在声明它的类中实现，但必须在某个子类中重写。采用 abstract方法的类本来就是抽象类，并且必须声明为abstract。\nclass类 class 关键字用来声明新的 Java 类，该类是相关变量和/或方法的集合。类是面向对象的程序设计方法的基本构造单位。类通常代表某种实际实体，如几何形状或人。类是对象的模板。每个对象都是类的一个实例。要使用类，通常使用 new 操作符将类的对象实例化，然后调用类的方法来访问类的功能。\nextends 继承、扩展 extends 关键字用在 class 或 interface 声中，用于指示所声明的类或接口是其名称后跟有 extends 关键字的类或接口的子类。子类继承父类的所有 public 和 protected 变量和方法。 子类可以重写父类的任何非 final 方法。一个类只能扩展一个其他类。\nfinal 最终、不可改变 final 关键字可以应用于类，以指示不能扩展该类（不能有子类）。final 关键字可以应用于方法，以指示在子类中不能重写此方法。一个类不能同时是 abstract 又是 final。abstract 意味着必须扩展类，final 意味着不能扩展类。一个方法不能同时是 abstract 又是 final。abstract 意味着必须重写方法，final 意味着不能重写方法。\nimplements实现 implements 关键字在 class 声明中使用，以指示所声明的类提供了在 implements 关键字后面的名称所指定的接口中所声明的所有方法的实现。类必须提供在接口中所声明的所有方法的实现。一个类可以实现多个接口。\ninterface 接口 interface 关键字用来声明新的 Java 接口，接口是方法的集合。\n接口是 Java 语言的一项强大功能。任何类都可声明它实现一个或多个接口，这意味着它实现了在这些接口中所定义的所有方法。\n实现了接口的任何类都必须提供在该接口中的所有方法的实现。一个类可以实现多个接口。\nnative 本地 native 关键字可以应用于方法，以指示该方法是用 Java 以外的语言实现的。\nnew 新,创建 new 关键字用于创建类的新实例。\nnew 关键字后面的参数必须是类名，并且类名的后面必须是一组构造方法参数（必须带括号）。\n参数集合必须与类的构造方法的签名匹配。\n= 左侧的变量的类型必须与要实例化的类或接口具有赋值兼容关系。\nstatic 静态 static 关键字可以应用于内部类（在另一个类中定义的类）、方法或字段（类的成员变量）。 通常，static 关键字意味着应用它的实体在声明该实体的类的任何特定实例外部可用。\nstatic（内部）类可以被其他类实例化和引用（即使它是顶级类）。\nstatic 字段（类的成员变量）在类的所有实例中只存在一次。\n可以从类的外部调用 static 方法，而不用首先实例化该类。这样的引用始终包括类名作为方法调用的限定符。\n模式：public final static varName = ; 通常用于声明可以在类的外部使用的类常量。在引用这样的类常量时需要用类名加以限定。\nstrictfp 严格,精准 strictfp的意思是FP-strict，也就是说精确浮点的意思。在Java虚拟机进行浮点运算时，如果没有指定strictfp关键字时，Java的编译器以及运行环境在对浮点运算的表达式是采取一种近似于我行我素的行为来完成这些操作，以致于得到的结果往往无法令人满意。而一旦使用了strictfp来声明一个类、接口或者方法时，那么所声明的范围内Java的编译器以及运行环境会完全依照浮点规范IEEE-754来执行。因此如果想让浮点运算更加精确，而且不会因为不同的硬件平台所执行的结果不一致的话，那就请用关键字strictfp。 可以将一个类、接口以及方法声明为strictfp，但是不允许对接口中的方法以及构造函数声明strictfp关键字\nsynchronized线程、同步 synchronized 关键字可以应用于方法或语句块，并为一次只应由一个线程执行的关键代码段提供保护。 synchronized 关键字可防止代码的关键代码段一次被多个线程执行。\n如果应用于静态方法，那么，当该方法一次由一个线程执行时，整个类将被锁定。\n如果应用于实例方法，那么，当该方法一次由一个线程访问时，该实例将被锁定。\n如果应用于对象或数组，当关联的代码块一次由一个线程执行时，对象或数组将被锁定。\ninstanceof 实例 instanceof 关键字用来确定对象所属的类。\ntransient 短暂 transient 关键字可以应用于类的成员变量，以便指出该成员变量不应在包含它的类实例已序列化时被序列化。\n当一个对象被串行化的时候，transient型变量的值不包括在串行化的表示中，然而非transient型的变量是被包括进去的。\nJava的serialization提供了一种持久化对象实例的机制。当持久化对象时，可能有一个特殊的对象数据成员，我们不想用serialization机制来保存它。为了在一个特定对象的一个域上关闭serialization，可以在这个域前加上关键字transient。 transient是Java语言的关键字，用来表示一个域不是该对象串行化的一部分。当一个对象被串行化的时候，transient型变量的值不包括在串行化的表示中，然而非transient型的变量是被包括进去的。\nvolatile 易失 volatile 关键字用于表示可以被多个线程异步修改的成员变量。 注意：volatile 关键字在许多 Java 虚拟机中都没有实现。 volatile 的目标用途是为了确保所有线程所看到的指定变量的值都是相同的。\nJava 语言中的 volatile 变量可以被看作是一种 “程度较轻的 synchronized”；与 synchronized 块相比，volatile 变量所需的编码较少，并且运行时开销也较少，但是它所能实现的功能也仅是 synchronized 的一部分。\n程序控制语句 break 跳出，中断 break 关键字用于提前退出 for、while 或 do 循环，或者在 switch 语句中用来结束 case 块。 break 总是退出最深层的 while、for、do 或 switch 语句。\ncontinue 继续 continue 关键字用来跳转到 for、while 或 do 循环的下一个迭代。 continue 总是跳到最深层 while、for 或 do 语句的下一个迭代。\nreturn 返回 return 关键字会导致方法返回到调用它的方法，从而传递与返回方法的返回类型匹配的值。 如果方法具有非 void 的返回类型，return 语句必须具有相同或兼容类型的参数。\ndo 运行 do 关键字用于指定一个在每次迭代结束时检查其条件的循环。 do 循环体至少执行一次。\n条件表达式后面必须有分号。\nwhile 循环 while 关键字用于指定一个只要条件为真就会重复的循环。\nif 如果 if 关键字指示有条件地执行代码块。条件的计算结果必须是布尔值。\nif 语句可以有可选的 else 子句，该子句包含条件为 false 时将执行的代码。\n包含 boolean 操作数的表达式只能包含 boolean 操作数。\nelse 否则 else 关键字总是在 if-else 语句中与 if 关键字结合使用。else 子句是可选的，如果 if 条件为 false，则执行该子句。\nfor 循环 for 关键字用于指定一个在每次迭代结束前检查其条件的循环。\nfor 语句的形式为 for(initialize; condition; increment)\n控件流进入 for 语句时，将执行一次 initialize 语句。\n每次执行循环体之前将计算 condition 的结果。如果 condition 为 true，则执行循环体。\n每次执行循环体之后，在计算下一个迭代的 condition 之前，将执行 increment 语句。\nswitch 观察 switch 语句用于基于某个表达式选择执行多个代码块中的某一个。 switch 条件的计算结果必须等于 byte、char、short 或 int。\n如果没有 break 语句，执行流将进入所有后面的 case 和/或 default 块。\ncase 返回观察里的结果 case 用来标记 switch 语句中的每个分支。 case 块没有隐式结束点。break 语句通常在每个 case 块末尾使用，用于退出 switch 语句。\n如果没有 break 语句，执行流将进入所有后面的 case 和/或 default 块。\ndefault 默认 default 关键字用来标记 switch 语句中的默认分支。 default 块没有隐式结束点。break 语句通常在每个 case 或 default 块的末尾使用，以便在完成块时退出 switch 语句。\n如果没有 default 语句，其参数与任何 case 块都不匹配的 switch 语句将不执行任何操作。\n错误处理 try 捕获异常 try 关键字用于包含可能引发异常的语句块。 每个 try 块都必须至少有一个 catch 或 finally 子句。\n如果某个特定异常类未被任何 catch 子句处理，该异常将沿着调用栈递归地传播到下一个封闭 try 块。如果任何封闭 try 块都未捕获到异常，Java 解释器将退出，并显示错误消息和堆栈跟踪信息。\ncatch 处理异常 catch 关键字用来在 try-catch 或 try-catch-finally 语句中定义异常处理块。 开始和结束标记 { 和 } 是 catch 子句语法的一部分，即使该子句只包含一个语句，也不能省略这两个标记。\n每个 try 块都必须至少有一个 catch 或 finally 子句。\n如果某个特定异常类未被任何 catch 子句处理，该异常将沿着调用栈递归地传播到下一个封闭 try 块。如果任何封闭 try 块都未捕获到异常，Java 解释器将退出，并显示错误消息和堆栈跟踪信息。\nthrow 抛出一个异常对象 throw 关键字用于引发异常。 throw 语句将 java.lang.Throwable 作为参数。Throwable 在调用栈中向上传播，直到被适当的 catch 块捕获。\nthrows 声明一个异常可能被抛出 throws 关键字可以应用于方法，以便指出方法引发了特定类型的异常。 throws 关键字将逗号分隔的 java.lang.Throwables 列表作为参数。\n引发非 RuntimeException 异常的任何方法还必须在方法声明中使用 throws 修饰符来声明它引发的异常。\n要在 try-catch 块中包含带 throws 子句的方法的调用，必须提供该方法的调用者。\nfinally异常处理补充 不管有无异常发生，finally块中的代码总会执行 包相关 import 引入 import 关键字使一个包中的一个或所有类在当前 Java 源文件中可见。可以不使用完全限定的类名来引用导入的类。 当多个包包含同名的类时，许多 Java 程序员只使用特定的 import 语句（没有“*”）来避免不确定性。\npackage 包 package 关键字指定在 Java 源文件中声明的类所驻留的 Java 包。 package 语句（如果出现）必须是 Java 源文件中的第一个非注释性文本。\n例:java.lang.Object。\n如果 Java 源文件不包含 package 语句，在该文件中定义的类将位于“默认包”中。请注意，不能从非默认包中的类引用默认包中的类。\n基本类型 boolean 布尔型 boolean 是 Java 原始类型。boolean 变量的值可以是 true 或 false。 boolean 变量只能以 true 或 false 作为值。boolean 不能与数字类型相互转换。\n包含 boolean 操作数的表达式只能包含 boolean 操作数。\nBoolean 类是 boolean 原始类型的包装对象类。\nbyte 字节型 byte 是 Java 原始类型。byte 可存储在 [-128, 127] 范围以内的整数值。 Byte 类是 byte 原始类型的包装对象类。它定义代表此类型的值的范围的 MIN_VALUE 和 MAX_VALUE 常量。\nJava 中的所有整数值都是 32 位的 int 值，除非值后面有 l 或 L（如 235L），这表示该值应解释为 long。\nchar 字符型 char 是 Java 原始类型。char 变量可以存储一个 Unicode 字符。 可以使用下列 char 常量：\\b - 空格, \\f - 换页, \\n - 换行, \\r - 回车, \\t - 水平制表符, ’ - 单引号, \u0026quot; - 双引号, \\ - 反斜杠, \\xxx - 采用 xxx 编码的 Latin-1 字符。\\x 和 \\xx 均为合法形式，但可能引起混淆。 \\uxxxx - 采用十六进制编码 xxxx 的 Unicode 字符。\nCharacter 类包含一些可用来处理 char 变量的 static 方法，这些方法包括 isDigit()、isLetter()、isWhitespace() 和 toUpperCase()。\nchar 值没有符号。\ndouble 双精度 double 是 Java 原始类型。double 变量可以存储双精度浮点值。 由于浮点数据类型是实际数值的近似值，因此，一般不要对浮点数值进行是否相等的比较。\nJava 浮点数值可代表无穷大和 NaN（非数值）。Double 包装对象类用来定义常量 MIN_VALUE、MAX_VALUE、NEGATIVE_INFINITY、POSITIVE_INFINITY 和 NaN。\nfloat 浮点 float 是 Java 原始类型。float 变量可以存储单精度浮点值。 使用此关键字时应遵循下列规则：\nJava 中的浮点文字始终默认为双精度。要指定单精度文字值，应在数值后加上 f 或 F，如 0.01f。\n由于浮点数据类型是实际数值的近似值，因此，一般不要对浮点数值进行是否相等的比较。\nJava 浮点数值可代表无穷大和 NaN（非数值）。Float 包装对象类用来定义常量 MIN_VALUE、MAX_VALUE、NEGATIVE_INFINITY、POSITIVE_INFINITY 和 NaN。\nint 整型 int 是 Java 原始类型。int 变量可以存储 32 位的整数值。 Integer 类是 int 原始类型的包装对象类。它定义代表此类型的值的范围的 MIN_VALUE 和 MAX_VALUE 常量。\nJava 中的所有整数值都是 32 位的 int 值，除非值后面有 l 或 L（如 235L），这表示该值应解释为 long。\nlong 长整型 long 是 Java 原始类型。long 变量可以存储 64 位的带符号整数。 Long 类是 long 原始类型的包装对象类。它定义代表此类型的值的范围的 MIN_VALUE 和 MAX_VALUE 常量。\nJava 中的所有整数值都是 32 位的 int 值，除非值后面有 l 或 L（如 235L），这表示该值应解释为 long。\nshort 短整型 short 是 Java 原始类型。short 变量可以存储 16 位带符号的整数。 Short 类是 short 原始类型的包装对象类。它定义代表此类型的值的范围的 MIN_VALUE 和 MAX_VALUE 常量。\nJava 中的所有整数值都是 32 位的 int 值，除非值后面有 l 或 L（如 235L），这表示该值应解释为 long。\nnull 空 null 是 Java 的保留字，表示无值。 将 null 赋给非原始变量相当于释放该变量先前所引用的对象。\n不能将 null 赋给原始类型（byte、short、int、long、char、float、double、boolean）变量。\ntrue 真 true 关键字表示 boolean 变量的两个合法值中的一个。\nfalse 假 false 关键字代表 boolean 变量的两个合法值之一。\n基本数据类型总结 关于Java数据类型，我也专门写过一篇总结性博客：Java数据类型\n变量引用 super 父类,超类 super 关键字用于引用使用该关键字的类的超类。 作为独立语句出现的 super 表示调用超类的构造方法。\nsuper.\u0026lt; methodName \u0026gt;() 表示调用超类的方法。只有在如下情况中才需要采用这种用法：要调用在该类中被重写的方法，以便指定应当调用在超类中的该方法。\nthis 本类 this 关键字用于引用当前实例。 当引用可能不明确时，可以使用 this 关键字来引用当前的实例。\nvoid 无返回值 void 关键字表示 null 类型。 void 可以用作方法的返回类型，以指示该方法不返回值。\n保留字 正确识别java语言的关键字（keyword）和保留字（reserved word）是十分重要的。Java的关键字对java的编译器有特殊的意义，他们用来表示一种数据类型，或者表示程序的结构等。保留字是为java预留的关键字，他们虽然现在没有作为关键字，但在以后的升级版本中有可能作为关键字。 识别java语言的关键字，不要和其他语言如c/c++的关键字混淆。 const和goto是java的保留字。 所有的关键字都是小写\ngoto 跳转 goto 保留关键字，但无任何作用。结构化程序设计完全不需要 goto 语句即可完成各种流程，而 goto 语句的使用往往会使程序的可读性降低，所以 Java 不允许 goto 跳转。\nconst 静态 const 保留字，是一个类型修饰符，使用const声明的对象不能更新。与final某些类似。\nnative 本地 Java不是完美的，Java的不足除了体现在运行速度上要比传统的C++慢许多之外，Java无法直接访问到操作系统底层（如系统硬件等)，为此Java使用native方法来扩展Java程序的功能。\n可以将native方法比作Java程序同Ｃ程序的接口，其实现步骤：\n１、在Java中声明native()方法，然后编译；\n２、用javah产生一个.h文件；\n３、写一个.cpp文件实现native导出方法，其中需要包含第二步产生的.h文件（注意其中又包含了JDK带的jni.h文件）；\n４、将第三步的.cpp文件编译成动态链接库文件；\n５、在Java中用System.loadLibrary()方法加载第四步产生的动态链接库文件，这个native()方法就可以在Java中被访问了。\n","date":"3 October 2023","permalink":"/java/javase/%E5%85%B3%E9%94%AE%E5%AD%97/","section":"Javas","summary":"Java中常用的关键字有以下分类： 访问控制 private protected public\n类,方法和变量修饰符 abstract class extends final implements interface native new static strictfp synchronized transient volatile\n程序控制 break continue return do while if else for instanceof switch case default","title":"关键字"},{"content":"\r如何从 Java 中的 LinkedList 类外部声明 Node 类型？ # 标签 java linked-list 如何声明 Node 类型的变量？ Node是LinkedList的内部类，在我正在编写的程序的main方法中，我想创建一个Node变量。但在下面代码片段的最后一行中，我收到错误消息“Nose 在 LinkedList 中具有私有(private)访问权限”。为什么我不能使用 Node 类型？\nimport java.util.LinkedList; public class MinSplit { public static long leastAmount; public static void main(String args[]) { LinkedList list = new LinkedList(); LinkedList.Node node = new LinkedList.Node(); 最佳答案 因为它被声明为私有(private)。它是 LinkedList 类的内部实现细节，您没有理由创建实例。显然，这是 Java 团队经过深思熟虑的设计决定，旨在保持 API 的整洁并避免由于人们破坏列表数据结构而导致的问题。 如果您想要实例化 Node 类以便可以对 LinkedList 执行某种操作，请再考虑一下。没有任何公共(public) API 以允许您将 Node 添加到 LinkedList 或使用它的方式公开 Node 类型任何其他方式。您可能需要从头开始实现您自己的链表类。 如果您希望将 Node 类用于其他目的，您应该声明一个新类或在第 3 方库中查找合适的类。\n从LinkedList的源码中可看出，Node是LinkedList（双向链表）的私有化内部类，外部无法访问，更不可能被实例化 # 具体参考\n","date":"3 October 2023","permalink":"/all/java/javase/%E5%AE%9E%E4%BE%8B%E5%8C%96node/","section":"Alls","summary":"如何从 Java 中的 LinkedList 类外部声明 Node 类型？ # 标签 java linked-list 如何声明 Node 类型的变量？ Node是LinkedList的内部类，在我正在编写的程序的main方法中，我想创建一个Node变量。但在下面代码片段的最后一行中，我收到错误消息“Nose 在 LinkedList 中具有私有(private)访问权限”。为什么我不能使用 Node 类型？\nimport java.util.LinkedList; public class MinSplit { public static long leastAmount; public static void main(String args[]) { LinkedList list = new LinkedList(); LinkedList.","title":"实例化Node"},{"content":"\r如何从 Java 中的 LinkedList 类外部声明 Node 类型？ # 标签 java linked-list 如何声明 Node 类型的变量？ Node是LinkedList的内部类，在我正在编写的程序的main方法中，我想创建一个Node变量。但在下面代码片段的最后一行中，我收到错误消息“Nose 在 LinkedList 中具有私有(private)访问权限”。为什么我不能使用 Node 类型？\nimport java.util.LinkedList; public class MinSplit { public static long leastAmount; public static void main(String args[]) { LinkedList list = new LinkedList(); LinkedList.Node node = new LinkedList.Node(); 最佳答案 因为它被声明为私有(private)。它是 LinkedList 类的内部实现细节，您没有理由创建实例。显然，这是 Java 团队经过深思熟虑的设计决定，旨在保持 API 的整洁并避免由于人们破坏列表数据结构而导致的问题。 如果您想要实例化 Node 类以便可以对 LinkedList 执行某种操作，请再考虑一下。没有任何公共(public) API 以允许您将 Node 添加到 LinkedList 或使用它的方式公开 Node 类型任何其他方式。您可能需要从头开始实现您自己的链表类。 如果您希望将 Node 类用于其他目的，您应该声明一个新类或在第 3 方库中查找合适的类。\n从LinkedList的源码中可看出，Node是LinkedList（双向链表）的私有化内部类，外部无法访问，更不可能被实例化 # 具体参考\n","date":"3 October 2023","permalink":"/java/javase/%E5%AE%9E%E4%BE%8B%E5%8C%96node/","section":"Javas","summary":"如何从 Java 中的 LinkedList 类外部声明 Node 类型？ # 标签 java linked-list 如何声明 Node 类型的变量？ Node是LinkedList的内部类，在我正在编写的程序的main方法中，我想创建一个Node变量。但在下面代码片段的最后一行中，我收到错误消息“Nose 在 LinkedList 中具有私有(private)访问权限”。为什么我不能使用 Node 类型？\nimport java.util.LinkedList; public class MinSplit { public static long leastAmount; public static void main(String args[]) { LinkedList list = new LinkedList(); LinkedList.","title":"实例化Node"},{"content":"\r数组： # 1 public class Demo1_Array { 2 public static void main(String[] args) { 3 String [] array=new String[5];//需要初始化长度 4 array[0]=\u0026#34;hello\u0026#34;; 5 array[1]=\u0026#34;world\u0026#34;; 6 array[4]=\u0026#34;Mufasa\u0026#34;; 7 // array[5]=\u0026#34;right or not\u0026#34;;//ArrayIndexOutOfBoundsException 8 for(String str:array){ 9 System.out.print(str+\u0026#34;、\u0026#34;);//hello、world、null、null、Mufasa、 10 } 11 } 12 } 1 public class Demo1_Array2 { 2 public static void main(String[] args) { 3 String [] array={\u0026#34;hello\u0026#34;,\u0026#34;world\u0026#34;,null,null,\u0026#34;Mufasa\u0026#34;};//实例化\u0026amp;赋值 4 array = (String[])resizeArray(array,10); 5 for(String str:array){ 6 System.out.print(str+\u0026#34;、\u0026#34;);//hello、world、null、null、Mufasa、 7 } 8 } 9 10 private static Object resizeArray(Object oldArray, int newSize) {//数组扩容！！！真麻烦，还利用反射机制来实现 11 int oldSize = java.lang.reflect.Array.getLength(oldArray);//获取旧数组长度,向上转型！！！ 12 // int oldSize =oldArray.length;//无法在此使用，因为array内容的是不定类型 13 Class elementType = oldArray.getClass().getComponentType();//获取对象类别 14 Object newArray = java.lang.reflect.Array.newInstance(elementType,newSize);//利用Java的反射机制实例化新数组 15 int preserveLength = Math.min(oldSize, newSize);//判断是否需要copy数据 16 if (preserveLength \u0026gt; 0) 17 System.arraycopy(oldArray, 0, newArray, 0, preserveLength); 18 return newArray;//oldArray切断索引成为垃圾由Runtime.getRuntime().gc();回收处理 19 } 20 } 具体参考资料 # ","date":"3 October 2023","permalink":"/all/java/javase/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87/","section":"Alls","summary":"数组： # 1 public class Demo1_Array { 2 public static void main(String[] args) { 3 String [] array=new String[5];//需要初始化长度 4 array[0]=\u0026#34;hello\u0026#34;; 5 array[1]=\u0026#34;world\u0026#34;; 6 array[4]=\u0026#34;Mufasa\u0026#34;; 7 // array[5]=\u0026#34;right or not\u0026#34;;//ArrayIndexOutOfBoundsException 8 for(String str:array){ 9 System.","title":"数据结构篇"},{"content":"\r数组： # 1 public class Demo1_Array { 2 public static void main(String[] args) { 3 String [] array=new String[5];//需要初始化长度 4 array[0]=\u0026#34;hello\u0026#34;; 5 array[1]=\u0026#34;world\u0026#34;; 6 array[4]=\u0026#34;Mufasa\u0026#34;; 7 // array[5]=\u0026#34;right or not\u0026#34;;//ArrayIndexOutOfBoundsException 8 for(String str:array){ 9 System.out.print(str+\u0026#34;、\u0026#34;);//hello、world、null、null、Mufasa、 10 } 11 } 12 } 1 public class Demo1_Array2 { 2 public static void main(String[] args) { 3 String [] array={\u0026#34;hello\u0026#34;,\u0026#34;world\u0026#34;,null,null,\u0026#34;Mufasa\u0026#34;};//实例化\u0026amp;赋值 4 array = (String[])resizeArray(array,10); 5 for(String str:array){ 6 System.out.print(str+\u0026#34;、\u0026#34;);//hello、world、null、null、Mufasa、 7 } 8 } 9 10 private static Object resizeArray(Object oldArray, int newSize) {//数组扩容！！！真麻烦，还利用反射机制来实现 11 int oldSize = java.lang.reflect.Array.getLength(oldArray);//获取旧数组长度,向上转型！！！ 12 // int oldSize =oldArray.length;//无法在此使用，因为array内容的是不定类型 13 Class elementType = oldArray.getClass().getComponentType();//获取对象类别 14 Object newArray = java.lang.reflect.Array.newInstance(elementType,newSize);//利用Java的反射机制实例化新数组 15 int preserveLength = Math.min(oldSize, newSize);//判断是否需要copy数据 16 if (preserveLength \u0026gt; 0) 17 System.arraycopy(oldArray, 0, newArray, 0, preserveLength); 18 return newArray;//oldArray切断索引成为垃圾由Runtime.getRuntime().gc();回收处理 19 } 20 } 具体参考资料 # ","date":"3 October 2023","permalink":"/java/javase/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87/","section":"Javas","summary":"数组： # 1 public class Demo1_Array { 2 public static void main(String[] args) { 3 String [] array=new String[5];//需要初始化长度 4 array[0]=\u0026#34;hello\u0026#34;; 5 array[1]=\u0026#34;world\u0026#34;; 6 array[4]=\u0026#34;Mufasa\u0026#34;; 7 // array[5]=\u0026#34;right or not\u0026#34;;//ArrayIndexOutOfBoundsException 8 for(String str:array){ 9 System.","title":"数据结构篇"},{"content":"\rThreadLocal # 线程隔离，相互是隔离的，不影响的\n内部维护的是ThreadLocalMap，所以有key和value\n当key指向的值为null时，value不被清理，由于key是强引用，此时就会造成内存泄露，所以必须要通过ThreadLocal里面的remove方法手动删除值，避免内存泄露。\nstatic ThreadLocalMap createInheritedMap(ThreadLocalMap parentMap) { return new ThreadLocalMap(parentMap); } static class ThreadLocalMap { /** * The entries in this hash map extend WeakReference, using * its main ref field as the key (which is always a * ThreadLocal object). Note that null keys (i.e. entry.get() * == null) mean that the key is no longer referenced, so the * entry can be expunged from table. Such entries are referred to * as \u0026#34;stale entries\u0026#34; in the code that follows. */ static class Entry extends WeakReference\u0026lt;ThreadLocal\u0026lt;?\u0026gt;\u0026gt; { /** The value associated with this ThreadLocal. */ Object value; Entry(ThreadLocal\u0026lt;?\u0026gt; k, Object v) { super(k); value = v; } } /** * The initial capacity -- MUST be a power of two. */ private static final int INITIAL_CAPACITY = 16; /** * The table, resized as necessary. * table.length MUST always be a power of two. */ private Entry[] table; /** * The number of entries in the table. */ private int size = 0; /** * The next size value at which to resize. */ private int threshold; // Default to 0 /** * Set the resize threshold to maintain at worst a 2/3 load factor. */ private void setThreshold(int len) { threshold = len * 2 / 3; } /** * Increment i modulo len. */ private static int nextIndex(int i, int len) { return ((i + 1 \u0026lt; len) ? i + 1 : 0); } /** * Decrement i modulo len. */ private static int prevIndex(int i, int len) { return ((i - 1 \u0026gt;= 0) ? i - 1 : len - 1); } /** * Construct a new map initially containing (firstKey, firstValue). * ThreadLocalMaps are constructed lazily, so we only create * one when we have at least one entry to put in it. */ ThreadLocalMap(ThreadLocal\u0026lt;?\u0026gt; firstKey, Object firstValue) { table = new Entry[INITIAL_CAPACITY]; int i = firstKey.threadLocalHashCode \u0026amp; (INITIAL_CAPACITY - 1); table[i] = new Entry(firstKey, firstValue); size = 1; setThreshold(INITIAL_CAPACITY); } /** * Construct a new map including all Inheritable ThreadLocals * from given parent map. Called only by createInheritedMap. * * @param parentMap the map associated with parent thread. */ private ThreadLocalMap(ThreadLocalMap parentMap) { Entry[] parentTable = parentMap.table; int len = parentTable.length; setThreshold(len); table = new Entry[len]; for (Entry e : parentTable) { if (e != null) { @SuppressWarnings(\u0026#34;unchecked\u0026#34;) ThreadLocal\u0026lt;Object\u0026gt; key = (ThreadLocal\u0026lt;Object\u0026gt;) e.get(); if (key != null) { Object value = key.childValue(e.value); Entry c = new Entry(key, value); int h = key.threadLocalHashCode \u0026amp; (len - 1); while (table[h] != null) h = nextIndex(h, len); table[h] = c; size++; } } } } } ","date":"3 October 2023","permalink":"/all/java/javase/threadlocal/","section":"Alls","summary":"ThreadLocal # 线程隔离，相互是隔离的，不影响的\n内部维护的是ThreadLocalMap，所以有key和value\n当key指向的值为null时，value不被清理，由于key是强引用，此时就会造成内存泄露，所以必须要通过ThreadLocal里面的remove方法手动删除值，避免内存泄露。\nstatic ThreadLocalMap createInheritedMap(ThreadLocalMap parentMap) { return new ThreadLocalMap(parentMap); } static class ThreadLocalMap { /** * The entries in this hash map extend WeakReference, using * its main ref field as the key (which is always a * ThreadLocal object).","title":"ThreadLocal"},{"content":"\rThreadLocal # 线程隔离，相互是隔离的，不影响的\n内部维护的是ThreadLocalMap，所以有key和value\n当key指向的值为null时，value不被清理，由于key是强引用，此时就会造成内存泄露，所以必须要通过ThreadLocal里面的remove方法手动删除值，避免内存泄露。\nstatic ThreadLocalMap createInheritedMap(ThreadLocalMap parentMap) { return new ThreadLocalMap(parentMap); } static class ThreadLocalMap { /** * The entries in this hash map extend WeakReference, using * its main ref field as the key (which is always a * ThreadLocal object). Note that null keys (i.e. entry.get() * == null) mean that the key is no longer referenced, so the * entry can be expunged from table. Such entries are referred to * as \u0026#34;stale entries\u0026#34; in the code that follows. */ static class Entry extends WeakReference\u0026lt;ThreadLocal\u0026lt;?\u0026gt;\u0026gt; { /** The value associated with this ThreadLocal. */ Object value; Entry(ThreadLocal\u0026lt;?\u0026gt; k, Object v) { super(k); value = v; } } /** * The initial capacity -- MUST be a power of two. */ private static final int INITIAL_CAPACITY = 16; /** * The table, resized as necessary. * table.length MUST always be a power of two. */ private Entry[] table; /** * The number of entries in the table. */ private int size = 0; /** * The next size value at which to resize. */ private int threshold; // Default to 0 /** * Set the resize threshold to maintain at worst a 2/3 load factor. */ private void setThreshold(int len) { threshold = len * 2 / 3; } /** * Increment i modulo len. */ private static int nextIndex(int i, int len) { return ((i + 1 \u0026lt; len) ? i + 1 : 0); } /** * Decrement i modulo len. */ private static int prevIndex(int i, int len) { return ((i - 1 \u0026gt;= 0) ? i - 1 : len - 1); } /** * Construct a new map initially containing (firstKey, firstValue). * ThreadLocalMaps are constructed lazily, so we only create * one when we have at least one entry to put in it. */ ThreadLocalMap(ThreadLocal\u0026lt;?\u0026gt; firstKey, Object firstValue) { table = new Entry[INITIAL_CAPACITY]; int i = firstKey.threadLocalHashCode \u0026amp; (INITIAL_CAPACITY - 1); table[i] = new Entry(firstKey, firstValue); size = 1; setThreshold(INITIAL_CAPACITY); } /** * Construct a new map including all Inheritable ThreadLocals * from given parent map. Called only by createInheritedMap. * * @param parentMap the map associated with parent thread. */ private ThreadLocalMap(ThreadLocalMap parentMap) { Entry[] parentTable = parentMap.table; int len = parentTable.length; setThreshold(len); table = new Entry[len]; for (Entry e : parentTable) { if (e != null) { @SuppressWarnings(\u0026#34;unchecked\u0026#34;) ThreadLocal\u0026lt;Object\u0026gt; key = (ThreadLocal\u0026lt;Object\u0026gt;) e.get(); if (key != null) { Object value = key.childValue(e.value); Entry c = new Entry(key, value); int h = key.threadLocalHashCode \u0026amp; (len - 1); while (table[h] != null) h = nextIndex(h, len); table[h] = c; size++; } } } } } ","date":"3 October 2023","permalink":"/java/javase/threadlocal/","section":"Javas","summary":"ThreadLocal # 线程隔离，相互是隔离的，不影响的\n内部维护的是ThreadLocalMap，所以有key和value\n当key指向的值为null时，value不被清理，由于key是强引用，此时就会造成内存泄露，所以必须要通过ThreadLocal里面的remove方法手动删除值，避免内存泄露。\nstatic ThreadLocalMap createInheritedMap(ThreadLocalMap parentMap) { return new ThreadLocalMap(parentMap); } static class ThreadLocalMap { /** * The entries in this hash map extend WeakReference, using * its main ref field as the key (which is always a * ThreadLocal object).","title":"ThreadLocal"},{"content":"\rRedis学习： # 通用命令 # 不要在主节点用：keys param 命令来查询，这查询速率很慢，单线程将会被阻塞 del param（可以是多个参数） :删除指定的key exists param(判断key是否存在) expire key time :设置有效期时间 ttl key :查看key的有效期\nString类型 # 最简单的Redis数据类型，value：string,int,float；最大空间不超过512M set key value get key\nMset 批量 添加key-value\nMget批量获取\n数值类型：incr ：让变量自增加一\nincrby num：按照步长增加\nsetnx:不存在 key才可以添加这个key\n如何区分不同的key？ # 利用层级结构来表明table，以后的大部分业务都是用层级结构来展现和布局的！\nHash类型 # 哈希类型，也叫做散列，Hash的value是一个无须字典，类似于HashMap的结构。\n具有field这一个字段，这是不一样的。\nList类型 # 类似于 LinkedList(也就是双向链表)\n有序 元素可重复 插入删除快 查询速度一般 Lpush key element：向左侧插入元素 返回列表长度，相应的向右边：Rpush key element\nLpop key:移除左侧第一个元素，没有则返回nil\nBlop/Brpop key times:阻塞队列的插入 ,加上阻塞时间\n如何用List来模拟栈？\n入口和出口一起。Lpush和Lpop\n模拟队列？\n入口和出口不在一起。Lpush和Rpop\n模拟阻塞队列？\n入口出口不在一边，取的时候用阻塞Brpop/Blpop\nSet类型 # 类似于HashSet，可以看作是value为null的hashMap。\nSadd key member:添加一个或多个元素。\nSrem key member:删除元素\nSmembers：获取所有元素\nSinter key1 key2:求取交集\nSdiff：求差集\nSunion:求并集\nScard:求元素个数\nSismenber key member:是否是成员\nSortedSet # zrank key member:排名从0开始计算\nzcount key min max:统计区间数量\n# Redis实际开发时序列化的问题 # Session共享问题，基于Redis实现的Session数据数据共享 # 多台Tomcat服务器，每一台都有不同的Session空间，将会存在共享问题,互相拷贝具有时间延迟和空间浪费的问题。\n解决方案：Redis数据共享\ncode作为key显然是不行的，将会覆盖，所有选用Phone作为key，使用Hash结构来存储， 内存占用也会比较少相对于String类型，使用随机token作为key来存储用户信息。 现在token作为登录凭证，返回token给客户端\n缓存：浏览器缓存-\u0026gt;应用层缓存（Redis，Nginx,Tomcat\u0026hellip;各种缓存）-\u0026gt;数据库缓存，根据索引来进行缓存，减少磁盘IO\n优点：降低后端负载，提高读写速率，降低响应时间 成本：数据一致性成本，当数据库发生改变时，缓存未跟新，就会出现不一致， 代码维护成本也会提高，为了高可用，运维成本也会提高\n缓存更新策略： # 内存淘汰，超时剔除(低一致性)，主动更新（高一致性）\n主动更新：\n1调用者更新数据库时同时更新缓存；（可控性最高）\n2 缓存和数据库整合为一个服务；\n3 调用只操作，独立异步线程持久化到数据库,从而实现缓存和数据库一致\n删除缓存（无效操作太多）而不是更新缓存，单体项目需要将缓存和数据库放在一个事务，考虑线程安全 Cache Aside Pattern（解决线程安全问题） 缓存穿透： # 请求客户端数据中，缓存里面和数据库里面数据都不存在，请求都打到数据库上面了\n解决办法：布隆过滤器（内存占用少），缓存空对象或者null（额外内存消耗，可能造成短期不一致） 主动添加 对ID的复杂度\n缓存雪崩 # 很多key同时失效\n缓存击穿 # 热点key突然失效，无效热点数据给数据库带来巨大压力\n1：使用互斥锁来写入缓存，但是互相等待时间比较长，性能较差\n2：逻辑过期TTL=-1\n选择一致性还是可用性\n全局唯一 ID生成器 UUID：没有满足特性 ，RedisId：数字类型，snowflake：算法，维护机器ID\n多线程下高并发超卖问题是怎么发生的 # 当线程扣减时候，多线程查询库存，扣减库存之前，直接一个数据用两次，使得出现并发安全问题。\n锁的介绍： # 悲观锁： # 悲观锁\n例如synchronized 和lock，认为线程安全问题一定会发生，在操作数据之前一定要获得锁之后才执行\n乐观锁\n认为线程安全问题不一定会发生，多数情况不发生，不加锁， 在线程做数据更新时进行数据判断，看之前的判断数据是否发生修改，性能相较于乐观锁好\n那怎么判断之前的数据是否发生了修改呢？\n1：版本号法（最广泛） 给数据加上版本号，同时在修改时不仅要查询版本号同时还要修改版本号\n2：CAS方法，假如数据本身具有变化，那么数据本深就可以作为版本号\n3：分段锁，解决成功率较低的问题，实际秒杀还要对秒杀进行优化，不对数据库造成压力\n集群模式下的并发安全问题：\n当出现集群和负载均衡时，可能出现交叉执行，锁失效了，这就是分布式来解决这个问题\n锁监视器不是同一个\n出现了两套JVM，锁监视器具有不同的，这将会导致出现并发安全问题\n==》解决办法：分布式锁\n一人一单 # 分布式锁 # 实现原理：不同的JVM采用同一个JVM\n分布式锁特点：多进程可见同时时互斥的锁，高可用性，高并发（高性能），安全性，是否会产生死锁\n是否满足可重入性？（不是重点）\n分布式锁的实现\n实现方式：Mysql Redis Zookeeper\nmysql:利用mysql本身的互斥锁机制，redis:利用setnx这样的互斥命令，利用key的过期时间来解决安全问题。\nzookeeper 利用唯一节点和有序性来实现互斥锁。高可用性还是比较好的，安全性较好\n基于Redis实现分布式锁： # 127.0.0.1:6379\u0026gt; help set SET key value [EX seconds|PX milliseconds|EXAT timestamp|PXAT milliseconds-timestamp|KEEPTTL] [NX|XX] [GET] summary: Set the string value of a key since: 1.0.0 group: string 127.0.0.1:6379\u0026gt; set lock thread EX 10 NX OK 127.0.0.1:6379\u0026gt; set lock thread EX 10 NX (nil) 127.0.0.1:6379\u0026gt; ttl lock (integer) -2 实现将会是非阻塞式的分布式锁\n极端情况线程出现并发安全问题。\n解决办法：释放锁的时候需要进行检查，看自己的锁标识是否和之前获取的一样。\n只要redis锁发生了超时释放就有可能发生并发问题。\n例如FullGc时，发生阻塞就会出现并发问题，所以释放锁和判断锁标识必须是原子性的，必须同时\n用Lua脚本来解决原子性问题 # 利用看门狗解决锁超时释放的问题\nRedisson问题(呵呵，这是一个把分布式锁实现好的开源框架) # redisson 分布式锁原理： # 可重入：利用hash结构来记录线程id和重入次数，类似于ReentryLock\n可重试：利用信号量实现等待和获取锁失败的重试机制\n超时续约：利用看门狗，在获取锁之后，每隔一段时间，就自动续约，锁满血复活。\n分布式锁的主从一致性问题。 # 利用redisson的multi lock来实现\n利用Redis来优化秒杀 # 使用Set类型，解决唯一性问题。lua脚本来解决锁释放和事务提交的原子性问题\n将下单信息添加到阻塞队列里面\nWindows相关命令： # 查找并记录需要杀死的进程号码： netstat -ano\n查找端口：netstat -ano|findstr [Port]\n查找名称：tasklist |findstr [PID]\n杀死进程： taskkill -f -pid [PID]\n# 消息队列【Message Queue】:【RabbitMq Kafka RedisQ】 # 基于Redis实现的异步阻塞队列存在jvm内存溢出问题，基于此实现了消息队列。\n消息队列：存储和管理消息，称为消息代理（message broker）\n生产者:发送消息到消息队列\n消费者：从消息队列中获取消息并处理\n基于Redis-List结构来模拟消息队列 # BLpush+BRpop/BRpush+BLpop\n独立于JVM，不依赖于机器，具备数据持久化，满足消息的有序性。 无法避免消息丢失，只支持单消费者。\n基于PubSub的消息队列 # 发布-订阅模式\n支持多生产和多消费：publish subscribe，psubscribe匹配使用正则表达式\n不支持消息持久化，无法避免消息丢失（当客户端宕机时，不接受消息，消息将会丢失），消息堆积有上限。\n基于Stream的消息队列。基于Redis-5.0实现 # XADD key [队列是否创建] [消息队列最大上限] [ID] [filed] [value] XREAD [count] [block sec] streams [key] [id] xgroup creat key groupName ID 消息可回溯，可阻塞读取，可被多个消费者读取，有漏读的风险 单词：pending:待定\n消费者组： # 消息分流 消息标识（确保消息都会被消费） 消息确认（消息处于pending状态，存入list中，需要得到确认 ）\nxgroup create/destory/delconsumer key groupName ID [\u0026ldquo;mkstream\u0026rdquo;]\n基于stream来实现的消费者组， 读取消息都是从pending-list中读取消息，实现方法是通过id进行筛选\n消息读取之后必须进行确认，参数为消息id，确认之后消息id将会被消息队列移除\n消费者组的名称一般企业环境下都是写在yml文件里面\n三种消息队列List PubSub Stream 解决方案的区别 # 发布达人探店 # 对两张表去进行表的设计：\n利用Zsort来作为点赞和排行榜数据结构 相关命令：zadd member score ,zscore member，zrange key from to\n关注推送，Feed流，提供沉浸式体验 # 常见的两种实现模式：\ntimeline：核心需要带上时间戳，不做内容筛选，信息全面，实现相对简单，但是信息噪音比较多\n实现方式：拉模式，推模式，推拉结合\n拉模式（读扩散）：缺点是延迟高\n推模式\n推拉结合： 收件箱使用redis来实现，查询redis查询收件箱数据时需要实现分页查询，list，soretedset，数据的角标会发生变换，按照传统的分页方案将会出现错误\n智能排序：针对用户使用习惯做一些算法，尽量接近用户使用习惯，但当用户习惯与算法不对称时，将会出现反作用\n","date":"3 October 2023","permalink":"/all/java/%E7%BC%93%E5%AD%98/redis/","section":"Alls","summary":"Redis学习： # 通用命令 # 不要在主节点用：keys param 命令来查询，这查询速率很慢，单线程将会被阻塞 del param（可以是多个参数） :删除指定的key exists param(判断key是否存在) expire key time :设置有效期时间 ttl key :查看key的有效期\nString类型 # 最简单的Redis数据类型，value：string,int,float；最大空间不超过512M set key value get key\nMset 批量 添加key-value","title":"Redis"},{"content":"\rRedis学习： # 通用命令 # 不要在主节点用：keys param 命令来查询，这查询速率很慢，单线程将会被阻塞 del param（可以是多个参数） :删除指定的key exists param(判断key是否存在) expire key time :设置有效期时间 ttl key :查看key的有效期\nString类型 # 最简单的Redis数据类型，value：string,int,float；最大空间不超过512M set key value get key\nMset 批量 添加key-value\nMget批量获取\n数值类型：incr ：让变量自增加一\nincrby num：按照步长增加\nsetnx:不存在 key才可以添加这个key\n如何区分不同的key？ # 利用层级结构来表明table，以后的大部分业务都是用层级结构来展现和布局的！\nHash类型 # 哈希类型，也叫做散列，Hash的value是一个无须字典，类似于HashMap的结构。\n具有field这一个字段，这是不一样的。\nList类型 # 类似于 LinkedList(也就是双向链表)\n有序 元素可重复 插入删除快 查询速度一般 Lpush key element：向左侧插入元素 返回列表长度，相应的向右边：Rpush key element\nLpop key:移除左侧第一个元素，没有则返回nil\nBlop/Brpop key times:阻塞队列的插入 ,加上阻塞时间\n如何用List来模拟栈？\n入口和出口一起。Lpush和Lpop\n模拟队列？\n入口和出口不在一起。Lpush和Rpop\n模拟阻塞队列？\n入口出口不在一边，取的时候用阻塞Brpop/Blpop\nSet类型 # 类似于HashSet，可以看作是value为null的hashMap。\nSadd key member:添加一个或多个元素。\nSrem key member:删除元素\nSmembers：获取所有元素\nSinter key1 key2:求取交集\nSdiff：求差集\nSunion:求并集\nScard:求元素个数\nSismenber key member:是否是成员\nSortedSet # zrank key member:排名从0开始计算\nzcount key min max:统计区间数量\n# Redis实际开发时序列化的问题 # Session共享问题，基于Redis实现的Session数据数据共享 # 多台Tomcat服务器，每一台都有不同的Session空间，将会存在共享问题,互相拷贝具有时间延迟和空间浪费的问题。\n解决方案：Redis数据共享\ncode作为key显然是不行的，将会覆盖，所有选用Phone作为key，使用Hash结构来存储， 内存占用也会比较少相对于String类型，使用随机token作为key来存储用户信息。 现在token作为登录凭证，返回token给客户端\n缓存：浏览器缓存-\u0026gt;应用层缓存（Redis，Nginx,Tomcat\u0026hellip;各种缓存）-\u0026gt;数据库缓存，根据索引来进行缓存，减少磁盘IO\n优点：降低后端负载，提高读写速率，降低响应时间 成本：数据一致性成本，当数据库发生改变时，缓存未跟新，就会出现不一致， 代码维护成本也会提高，为了高可用，运维成本也会提高\n缓存更新策略： # 内存淘汰，超时剔除(低一致性)，主动更新（高一致性）\n主动更新：\n1调用者更新数据库时同时更新缓存；（可控性最高）\n2 缓存和数据库整合为一个服务；\n3 调用只操作，独立异步线程持久化到数据库,从而实现缓存和数据库一致\n删除缓存（无效操作太多）而不是更新缓存，单体项目需要将缓存和数据库放在一个事务，考虑线程安全 Cache Aside Pattern（解决线程安全问题） 缓存穿透： # 请求客户端数据中，缓存里面和数据库里面数据都不存在，请求都打到数据库上面了\n解决办法：布隆过滤器（内存占用少），缓存空对象或者null（额外内存消耗，可能造成短期不一致） 主动添加 对ID的复杂度\n缓存雪崩 # 很多key同时失效\n缓存击穿 # 热点key突然失效，无效热点数据给数据库带来巨大压力\n1：使用互斥锁来写入缓存，但是互相等待时间比较长，性能较差\n2：逻辑过期TTL=-1\n选择一致性还是可用性\n全局唯一 ID生成器 UUID：没有满足特性 ，RedisId：数字类型，snowflake：算法，维护机器ID\n多线程下高并发超卖问题是怎么发生的 # 当线程扣减时候，多线程查询库存，扣减库存之前，直接一个数据用两次，使得出现并发安全问题。\n锁的介绍： # 悲观锁： # 悲观锁\n例如synchronized 和lock，认为线程安全问题一定会发生，在操作数据之前一定要获得锁之后才执行\n乐观锁\n认为线程安全问题不一定会发生，多数情况不发生，不加锁， 在线程做数据更新时进行数据判断，看之前的判断数据是否发生修改，性能相较于乐观锁好\n那怎么判断之前的数据是否发生了修改呢？\n1：版本号法（最广泛） 给数据加上版本号，同时在修改时不仅要查询版本号同时还要修改版本号\n2：CAS方法，假如数据本身具有变化，那么数据本深就可以作为版本号\n3：分段锁，解决成功率较低的问题，实际秒杀还要对秒杀进行优化，不对数据库造成压力\n集群模式下的并发安全问题：\n当出现集群和负载均衡时，可能出现交叉执行，锁失效了，这就是分布式来解决这个问题\n锁监视器不是同一个\n出现了两套JVM，锁监视器具有不同的，这将会导致出现并发安全问题\n==》解决办法：分布式锁\n一人一单 # 分布式锁 # 实现原理：不同的JVM采用同一个JVM\n分布式锁特点：多进程可见同时时互斥的锁，高可用性，高并发（高性能），安全性，是否会产生死锁\n是否满足可重入性？（不是重点）\n分布式锁的实现\n实现方式：Mysql Redis Zookeeper\nmysql:利用mysql本身的互斥锁机制，redis:利用setnx这样的互斥命令，利用key的过期时间来解决安全问题。\nzookeeper 利用唯一节点和有序性来实现互斥锁。高可用性还是比较好的，安全性较好\n基于Redis实现分布式锁： # 127.0.0.1:6379\u0026gt; help set SET key value [EX seconds|PX milliseconds|EXAT timestamp|PXAT milliseconds-timestamp|KEEPTTL] [NX|XX] [GET] summary: Set the string value of a key since: 1.0.0 group: string 127.0.0.1:6379\u0026gt; set lock thread EX 10 NX OK 127.0.0.1:6379\u0026gt; set lock thread EX 10 NX (nil) 127.0.0.1:6379\u0026gt; ttl lock (integer) -2 实现将会是非阻塞式的分布式锁\n极端情况线程出现并发安全问题。\n解决办法：释放锁的时候需要进行检查，看自己的锁标识是否和之前获取的一样。\n只要redis锁发生了超时释放就有可能发生并发问题。\n例如FullGc时，发生阻塞就会出现并发问题，所以释放锁和判断锁标识必须是原子性的，必须同时\n用Lua脚本来解决原子性问题 # 利用看门狗解决锁超时释放的问题\nRedisson问题(呵呵，这是一个把分布式锁实现好的开源框架) # redisson 分布式锁原理： # 可重入：利用hash结构来记录线程id和重入次数，类似于ReentryLock\n可重试：利用信号量实现等待和获取锁失败的重试机制\n超时续约：利用看门狗，在获取锁之后，每隔一段时间，就自动续约，锁满血复活。\n分布式锁的主从一致性问题。 # 利用redisson的multi lock来实现\n利用Redis来优化秒杀 # 使用Set类型，解决唯一性问题。lua脚本来解决锁释放和事务提交的原子性问题\n将下单信息添加到阻塞队列里面\nWindows相关命令： # 查找并记录需要杀死的进程号码： netstat -ano\n查找端口：netstat -ano|findstr [Port]\n查找名称：tasklist |findstr [PID]\n杀死进程： taskkill -f -pid [PID]\n# 消息队列【Message Queue】:【RabbitMq Kafka RedisQ】 # 基于Redis实现的异步阻塞队列存在jvm内存溢出问题，基于此实现了消息队列。\n消息队列：存储和管理消息，称为消息代理（message broker）\n生产者:发送消息到消息队列\n消费者：从消息队列中获取消息并处理\n基于Redis-List结构来模拟消息队列 # BLpush+BRpop/BRpush+BLpop\n独立于JVM，不依赖于机器，具备数据持久化，满足消息的有序性。 无法避免消息丢失，只支持单消费者。\n基于PubSub的消息队列 # 发布-订阅模式\n支持多生产和多消费：publish subscribe，psubscribe匹配使用正则表达式\n不支持消息持久化，无法避免消息丢失（当客户端宕机时，不接受消息，消息将会丢失），消息堆积有上限。\n基于Stream的消息队列。基于Redis-5.0实现 # XADD key [队列是否创建] [消息队列最大上限] [ID] [filed] [value] XREAD [count] [block sec] streams [key] [id] xgroup creat key groupName ID 消息可回溯，可阻塞读取，可被多个消费者读取，有漏读的风险 单词：pending:待定\n消费者组： # 消息分流 消息标识（确保消息都会被消费） 消息确认（消息处于pending状态，存入list中，需要得到确认 ）\nxgroup create/destory/delconsumer key groupName ID [\u0026ldquo;mkstream\u0026rdquo;]\n基于stream来实现的消费者组， 读取消息都是从pending-list中读取消息，实现方法是通过id进行筛选\n消息读取之后必须进行确认，参数为消息id，确认之后消息id将会被消息队列移除\n消费者组的名称一般企业环境下都是写在yml文件里面\n三种消息队列List PubSub Stream 解决方案的区别 # 发布达人探店 # 对两张表去进行表的设计：\n利用Zsort来作为点赞和排行榜数据结构 相关命令：zadd member score ,zscore member，zrange key from to\n关注推送，Feed流，提供沉浸式体验 # 常见的两种实现模式：\ntimeline：核心需要带上时间戳，不做内容筛选，信息全面，实现相对简单，但是信息噪音比较多\n实现方式：拉模式，推模式，推拉结合\n拉模式（读扩散）：缺点是延迟高\n推模式\n推拉结合： 收件箱使用redis来实现，查询redis查询收件箱数据时需要实现分页查询，list，soretedset，数据的角标会发生变换，按照传统的分页方案将会出现错误\n智能排序：针对用户使用习惯做一些算法，尽量接近用户使用习惯，但当用户习惯与算法不对称时，将会出现反作用\n","date":"3 October 2023","permalink":"/java/%E7%BC%93%E5%AD%98/redis/","section":"Javas","summary":"Redis学习： # 通用命令 # 不要在主节点用：keys param 命令来查询，这查询速率很慢，单线程将会被阻塞 del param（可以是多个参数） :删除指定的key exists param(判断key是否存在) expire key time :设置有效期时间 ttl key :查看key的有效期\nString类型 # 最简单的Redis数据类型，value：string,int,float；最大空间不超过512M set key value get key\nMset 批量 添加key-value","title":"Redis"},{"content":"\rJava 并发编程 # 轻量级锁： # 检查当前对象的mark word是否有被其他线程占用，假如没有就会在当前栈帧里面建立一个 锁记录，复制并存储当前对象的mark word 信息。\n不像重量级锁需要向系统申请互斥量，\nCAS（无锁算法） # 显然，当cas失败的时候，说明有线程进入了这个同步代码块，这个时候，虚拟机将会检查 当前对象的mark word是否指向当前对象的栈帧，是的话就说明当前已经获得锁，否则不是-》退化为重量级锁(不可逆) 解锁时，同样使用CAS算法操作，同时唤醒挂起的线程\n偏向锁 # 当某个锁频繁的被同一个线程获取，对轻量级锁进行优化，所以偏向锁专门为单个线程服务，此时，无须再进行CAS操作，当其他线程 又开始抢锁，偏向锁可能退化为轻量级锁。注意当调用对象的hashCode（）方法，由于mark word 数据结构无法 保存hash值，偏向锁直接退化为轻量级锁。\n锁的退化不可逆\n锁消除和锁优化 # 代码块中有可能不会总是出现请求锁和释放锁的问题，（比如循环中加锁），此时锁为了优化出现锁消除和锁优化\nJava内存模型（JMM） # 主内存： 存放对象实例的部分 工作内存：虚拟机栈的部分，放入cpu的高速缓存里面。 自增操作不是由一个指令实现的！！！包括获取，修改和保存\nclass Test{ private static volatile int sum=0;//成员变量,这样的变量必须是当前的对象所拥有的 //加入了volatile关键字之后，线程之间可以感知彼此的值 @Test void LockTestAdd() throws InterruptedException { //没有加锁的时候，由于线程之间不能感知对方的值，最终结构可能不会是200 Thread th1 = new Thread(() -\u0026gt; { for (int i = 0; i \u0026lt; 100; i++) sum++; }); Thread th2 = new Thread(() -\u0026gt; { for (int i = 0; i \u0026lt; 100; i++) sum++; }); th1.start(); th2.start(); Thread.sleep(100); System.out.println(sum); } } 重排序 # 由于JVM虚拟机和编译器的优化，指令可能出现重排序，在这种情况下可能出现不符合预期的情况\nvolatile关键字（无法保证原子性，但能保证可见性） # load和save操作，将主内存中的变量拷贝到本地，只对本地变量进行操作。\nvolatile实现原理就是改变成员变量时，save的工作区的变量无效。重新更新主内存中的变量值， volatile关键字会禁止指令重排序。\nclass VolatileTest{ private static volatile int sum=0;//成员变量,这样的变量必须是当前的对象所拥有的 //加入了volatile关键字之后，线程之间可以感知彼此的值,但还是无法保证原子性操作，不能达到预期效果 @Test void LockTestAdd() throws InterruptedException { //没有加锁的时候，由于线程之间不能感知对方的值，最终结构可能不会是200 Thread th1 = new Thread(() -\u0026gt; { for (int i = 0; i \u0026lt; 1000; i++) sum++; }); Thread th2 = new Thread(() -\u0026gt; { for (int i = 0; i \u0026lt; 1000; i++) { sum++; } }); th1.start(); th2.start(); Thread.sleep(100); System.out.println(sum); } } JVM编译器下面的顺序执行：\nHappens Before 原则（之前的对之后的可见） # 程序次序规则，监视器锁原则，volatile关键字原则（写操作在读操作之前），\nstart(线程启动规则) # A线程用start调用B线程，那么A在B之前（A happens before B）\njoin线程加入规则 # A线程join线程B，那么B在A之前（B happens before A）\n程和线程的区别 # 程序软件 \u0026gt; 进程 \u0026gt; 线程\n锁的框：Lock # 为了代替传统的synchronized,notify,wait,notifyAll关键字，Lock接口-\u0026gt;ReentrantLock可重入锁\n可重入锁（排他锁） # 多次加锁，其他线程想要得到锁需要把多次的锁释放才可以获取这把锁\n当存在线程想要获取锁但是锁没有释放的时候，此时这些线程将会进入线程队列里面\n公平锁和非公平锁（AQS） # 公平锁始终保持先到先得到锁，非公平锁则是在等待队列中所有等待线程同时尝试获取锁，获取不到则再次进入等待队列\nReentrantLock lock=new ReentrantLock(false);//公平锁不一定总是保持公平。队列同步器 Runnable runnable=()-\u0026gt;{ System.out.println(Thread.currentThread().getName() + \u0026#34;开始尝试获取锁资源\u0026#34;); lock.lock(); System.out.println(Thread.currentThread().getName() + \u0026#34;成功😺😺😺😺😺😺😺😺😺获取锁资源\u0026#34;); lock.unlock(); }; for (int i = 0; i \u0026lt; 10; i++) { new Thread(runnable,\u0026#34;T\u0026#34;+i).start(); } 读写锁： # 除了可重入锁之外，还有一种类型的锁叫做读写锁，当然它并不是专门用作读写操作的锁， 它和可重入锁不同的地方在于，可重入锁是一种排他锁，当一个线程得到锁之后，另一个线程必须等待其释放锁，否则一律不允许获取到锁。而读写锁在同一时间，是可以让多个线程获取到锁的，它其实就是针对于读写场景而出现的。\n读写锁维护了一个读锁和一个写锁，这两个锁的机制是不同的。\n读锁：在没有任何线程占用写锁的情况下，同一时间可以有多个线程加读锁。\n写锁：在没有任何线程占用读锁的情况下，同一时间只能有一个线程加写锁。\n显然读锁是可以重复获取的但是写锁不能，当一个线程同时拥有写锁和读锁的时候，先申请读锁 然后释放写锁，此时其他的线程又可以获取读锁，只剩下读锁，此时称之为“锁降级”。 在仅仅持有读锁的时候去申请写锁，称为“锁升级”，这时候ReentryReadWriteLock类不支持。\n队列同步器AQS（AbstractQueuedSynchronizer） # 继承关系：Lock-\u0026gt; Sync -\u0026gt; AbstractQueuedSynchronizer\n多线程并发环境下的ABA问题 # //ABA问题的版本号解决方法 AtomicReference\u0026lt;String\u0026gt; atomicReference=new AtomicReference\u0026lt;\u0026gt;(\u0026#34;A\u0026#34;); System.out.println(atomicReference.compareAndSet(\u0026#34;a\u0026#34;, \u0026#34;c\u0026#34;)); String hello = \u0026#34;hello\u0026#34;; String world = \u0026#34;world\u0026#34;; Runnable r=()-\u0026gt;{ System.out.println(atomicReference.compareAndSet(\u0026#34;A\u0026#34;, \u0026#34;B\u0026#34;)); }; for (int i = 0; i \u0026lt; 100; i++) { new Thread(r).start(); } 可以看到多个线程尝试去修改的时候出现了一个true\n解决办法：添加版本号，每次修改的时候对版本号（stamp）进行修正\n并发容器 # 比如在对链表添加元素的时候，还没有完成对链表扩容之前，其他线程插队，非法插入元素，就会造成数组越界的报错。\nConcurrentHashMap:在jdk1.7之前的实现方法，比如在原子类里面实现LongAdder具有压力分散的思想，提高了性能，选择将数据一段一段的存储，这样就减少了等待，当线程访问锁的时候只占用锁的一小部分 jdk8之后，实现方法是通过cas算法配合锁机制实现的。由于HashMap利用了哈希表，容量越大，加锁的粒度就会越细。 //原子类的测试操作 //ABA问题的版本号解决方法 CopyOnWriteArrayList\u0026lt;Object\u0026gt; objects = new CopyOnWriteArrayList\u0026lt;\u0026gt;(); //读取不加锁，写数据需要加锁，所以性能还行 //专用于多线程环境下的容器 LinkedList\u0026lt;Object\u0026gt; list = new LinkedList\u0026lt;\u0026gt;();//没有发生并发异常 ArrayList\u0026lt;Object\u0026gt; list1 = new ArrayList\u0026lt;\u0026gt;(); ConcurrentHashMap\u0026lt;Integer, String\u0026gt; map = new ConcurrentHashMap\u0026lt;\u0026gt;(); HashMap\u0026lt;Integer, String\u0026gt; hashMap = new HashMap\u0026lt;\u0026gt;(); Runnable r=()-\u0026gt;{ for (int j = 0; j \u0026lt; 100; j++) { int finalI=j; objects.add(\u0026#34;aaa\u0026#34;); map.put(finalI,\u0026#34;aaa\u0026#34;); hashMap.put(finalI,\u0026#34;aaa\u0026#34;); } }; for (int i = 0; i \u0026lt; 100; i++) { new Thread(r).start(); } TimeUnit.SECONDS.sleep(1); 阻塞队列（BlokingQueue） # 生产者消费之模型：\n//测试阻塞队列实现生产者消费者模型 BlockingQueue\u0026lt;Object\u0026gt; queue=new ArrayBlockingQueue\u0026lt;\u0026gt;(1);//窗口只能放一个菜，阻塞队列的容量 Runnable supplier=()-\u0026gt;{ while (true){ try { String name = Thread.currentThread().getName(); System.err.println(time()+\u0026#34;生产者\u0026#34;+name+\u0026#34;正在准备餐品\u0026#34;); TimeUnit.SECONDS.sleep(3); System.err.println(time()+\u0026#34;生产者\u0026#34;+name+\u0026#34;已出餐\u0026#34;); queue.put(new Object()); }catch (InterruptedException e){ e.printStackTrace(); break; } } }; Runnable consumer=()-\u0026gt;{ while (true){ try { String name = Thread.currentThread().getName(); System.out.println(time()+\u0026#34;消费者\u0026#34;+name+\u0026#34;正在等待餐品\u0026#34;); queue.take(); System.out.println(time()+\u0026#34;消费者\u0026#34;+name+\u0026#34;已取餐\u0026#34;); TimeUnit.SECONDS.sleep(4); System.out.println(time()+\u0026#34;消费者\u0026#34;+name+\u0026#34;已吃完\u0026#34;); }catch (InterruptedException e){ e.printStackTrace(); break; } } }; for (int i = 0; i \u0026lt; 2; i++) { new Thread(supplier,\u0026#34;supplier\u0026#34;+i).start(); } for (int i = 0; i \u0026lt; 3; i++) { new Thread(consumer,\u0026#34;consumer\u0026#34;+i).start(); } } public static String time(){ SimpleDateFormat format = new SimpleDateFormat(\u0026#34;HH:mm:ss\u0026#34;); return \u0026#34;[\u0026#34;+format.format(new Date())+\u0026#34;]\u0026#34;; } 常见的阻塞队列：ArrayBlokingQueue(有界缓冲阻塞队列),SynchronousQueue(无缓冲阻塞队列),LinkedBlokingQueue(无界带缓冲阻塞队列)\npublic boolean offer(E e) { Objects.requireNonNull(e);//检查当前的队列是否为空 final ReentrantLock lock = this.lock;//对当前线程加锁 lock.lock(); try { if (count == items.length) return false; else { enqueue(e); return true; } } finally { lock.unlock(); } } public E take() throws InterruptedException { final ReentrantLock lock = this.lock; lock.lockInterruptibly(); try { while (count == 0) notEmpty.await();//当当前线程读取到队列为空时，由于take操作时阻塞的，需要挂起当前线程，等待直到队列里面有值 return dequeue(); } finally { lock.unlock(); } } SynchronousQueue(没有任何容量，插入和取出是一一对应的) # SynchronousQueue\u0026lt;String\u0026gt; queue=new SynchronousQueue\u0026lt;\u0026gt;(); new Thread(()-\u0026gt;{ try { System.out.println(queue.take()); } catch (InterruptedException e) { throw new RuntimeException(e); } }).start(); queue.put(\u0026#34;sss\u0026#34;); 这是一个特殊的队列，内部维护了一个抽象类Transfer（put和take操作糅合在一起了）， 里面有一个方法：transfer（E e,bolean timed,long nanos）直接通过生产者和消费者模型来实现数据的传递。 当新的元素put进去线程将会阻塞。直到元素被take。同时这个类维护了公平锁和非公平锁两种方法。\n当当前队列里面有元素但是没有线程来取元素时候，就会开启自旋，当自旋一定次数之后还没有来取就会挂起\nPriorityBlockingQueue优先队列 # 构造方法：PriorityQueue queue=new PriorityQueue(10,Integer::compare);\n传入容量和函数逻辑（优先逻辑）\nDelayQueue延时队列 # 特殊地方：存储的元素必须是继承自Delayed接口的类，同时元素类必须实现Delayed接口。\n使用时可以实现延时出队，按照同时的时候按照优先级（自己实现）进行出队，这样就可以实现缓存了。\n底层实现：\npublic class DelayQueue\u0026lt;E extends Delayed\u0026gt; extends AbstractQueue\u0026lt;E\u0026gt; implements BlockingQueue\u0026lt;E\u0026gt; { private final transient ReentrantLock lock = new ReentrantLock(); private final PriorityQueue\u0026lt;E\u0026gt; q = new PriorityQueue\u0026lt;E\u0026gt;(); //通过内部维护的优先队列来实现元素的存储，而不是本身进行存储 } 主要常见的阻塞队列总结如下： # ArrayBlokingQueue底层通过数组实现的阻塞队列，可以设置初始的容量，换句话容量是固定的 LinkedTransferQueue SynchronousQueue要求入队和出队必须同时进行，一一对应，原因是内部维护了一个抽象类tansfer，需要等到消费者和生产者同时到齐才可以完成交接工作，支持公平和非公平 PriorityBlokingQueue优先队列，元素的获取顺序按照优先级决定 DelayQueue能够实现延迟获取元素，同样支持优先级，要求加入的元素必须继承Delayed接口 数据字典 # 常见的常用的数据，具有分级的特点，现在将比如省份县市地点的信息维护成一张表就可以是实现 据字典，通常具有id，parent_id这些字段，维护父级和子级的关系。\n关于ElementUi的数据字典的显示方法就是检查hasChildren字段的值进行渲染\n线程池 # 引入原因：频繁创建和销毁线程对系统资源的浪费十分严重，为了合理分配和调用系统资源，产生了线程池的技术\n实现原理：将已创建的线程复用，利用池化技术，就像数据库连接池一样，我们也可以创建很多个线程，然后反复地使用这些线程，而不对它们进行销毁。\n由于线程池可以反复利用已有线程执行多线程操作，所以它一般是有容量限制的，当所有的线程都处于工作状态时，那么新的多线程请求会被阻塞，直到有一个线程空闲出来为止，实际上这里就会用到我们之前讲解的阻塞队列。\n","date":"3 October 2023","permalink":"/all/java/%E5%B9%B6%E5%8F%91/juc/","section":"Alls","summary":"Java 并发编程 # 轻量级锁： # 检查当前对象的mark word是否有被其他线程占用，假如没有就会在当前栈帧里面建立一个 锁记录，复制并存储当前对象的mark word 信息。\n不像重量级锁需要向系统申请互斥量，\nCAS（无锁算法） # 显然，当cas失败的时候，说明有线程进入了这个同步代码块，这个时候，虚拟机将会检查 当前对象的mark word是否指向当前对象的栈帧，是的话就说明当前已经获得锁，否则不是-》退化为重量级锁(不可逆) 解锁时，同样使用CAS算法操作，同时唤醒挂起的线程\n偏向锁 # 当某个锁频繁的被同一个线程获取，对轻量级锁进行优化，所以偏向锁专门为单个线程服务，此时，无须再进行CAS操作，当其他线程 又开始抢锁，偏向锁可能退化为轻量级锁。注意当调用对象的hashCode（）方法，由于mark word 数据结构无法 保存hash值，偏向锁直接退化为轻量级锁。\n锁的退化不可逆\n锁消除和锁优化 # 代码块中有可能不会总是出现请求锁和释放锁的问题，（比如循环中加锁），此时锁为了优化出现锁消除和锁优化\nJava内存模型（JMM） # 主内存： 存放对象实例的部分 工作内存：虚拟机栈的部分，放入cpu的高速缓存里面。 自增操作不是由一个指令实现的！！！包括获取，修改和保存","title":"Juc"},{"content":"\rHi ，你好！ # 我的名字是春江花朝秋月夜，我是这个博客的作者。我这样做是为了记录之前学习的笔记，这样很有成就感。 我们都知道在网络上开始做一些事情有多难，尤其是现在。但是，为了自己的头发没有白掉，加油吧，大家！\n这个博客网站在下面的支持下完成\n白天/夜晚 模式, 依赖于\rUI设计 非常感谢下面的几个网站支持我\rInter UI font,由\rRasmus Andersson制作 非常感谢这位提供的帮助\rPrismJS 以及我同专业的前辈：\rAncientElement 所以，希望你在这儿可以玩的开心！！！\n","date":"3 October 2023","permalink":"/about/","section":"春江花朝秋月夜","summary":"Hi ，你好！ # 我的名字是春江花朝秋月夜，我是这个博客的作者。我这样做是为了记录之前学习的笔记，这样很有成就感。 我们都知道在网络上开始做一些事情有多难，尤其是现在。但是，为了自己的头发没有白掉，加油吧，大家！\n这个博客网站在下面的支持下完成\n白天/夜晚 模式, 依赖于\rUI设计 非常感谢下面的几个网站支持我\rInter UI font,由\rRasmus Andersson制作 非常感谢这位提供的帮助\rPrismJS 以及我同专业的前辈：\rAncientElement 所以，希望你在这儿可以玩的开心！！！","title":"About"},{"content":"\rHi ，你好！ # 我的名字是春江花朝秋月夜，我是这个博客的作者。我这样做是为了记录之前学习的笔记，这样很有成就感。 我们都知道在网络上开始做一些事情有多难，尤其是现在。但是，为了自己的头发没有白掉，加油吧，大家！\n这个博客网站在下面的支持下完成\n白天/夜晚 模式, 依赖于\rUI设计 非常感谢下面的几个网站支持我\rInter UI font,由\rRasmus Andersson制作 非常感谢这位提供的帮助\rPrismJS 所以，希望你在这儿可以玩的开心！！！\n","date":"3 October 2023","permalink":"/all/about/","section":"Alls","summary":"Hi ，你好！ # 我的名字是春江花朝秋月夜，我是这个博客的作者。我这样做是为了记录之前学习的笔记，这样很有成就感。 我们都知道在网络上开始做一些事情有多难，尤其是现在。但是，为了自己的头发没有白掉，加油吧，大家！\n这个博客网站在下面的支持下完成\n白天/夜晚 模式, 依赖于\rUI设计 非常感谢下面的几个网站支持我\rInter UI font,由\rRasmus Andersson制作 非常感谢这位提供的帮助\rPrismJS 所以，希望你在这儿可以玩的开心！！！","title":"About"},{"content":" 我的名字是春江花朝秋月夜，我是这个博客的作者。我这样做是为了记录之前学习的笔记，这样很有成就感。 我们都知道在网络上开始做一些事情有多难，尤其是现在。但是，为了自己的头发没有白掉，加油吧，大家！\n— 春江花朝秋月夜 S01E01\n","date":"3 October 2003","permalink":"/all/post/hello/","section":"Alls","summary":"我的名字是春江花朝秋月夜，我是这个博客的作者。我这样做是为了记录之前学习的笔记，这样很有成就感。 我们都知道在网络上开始做一些事情有多难，尤其是现在。但是，为了自己的头发没有白掉，加油吧，大家！\n— 春江花朝秋月夜 S01E01","title":"Hello Friend"},{"content":" 我的名字是春江花朝秋月夜，我是这个博客的作者。我这样做是为了记录之前学习的笔记，这样很有成就感。 我们都知道在网络上开始做一些事情有多难，尤其是现在。但是，为了自己的头发没有白掉，加油吧，大家！\n— 春江花朝秋月夜 S01E01\n","date":"3 October 2003","permalink":"/post/hello/","section":"Posts","summary":"我的名字是春江花朝秋月夜，我是这个博客的作者。我这样做是为了记录之前学习的笔记，这样很有成就感。 我们都知道在网络上开始做一些事情有多难，尤其是现在。但是，为了自己的头发没有白掉，加油吧，大家！\n— 春江花朝秋月夜 S01E01","title":"Hello Friend"},{"content":"","date":"3 October 2003","permalink":"/post/","section":"Posts","summary":"","title":"Posts"},{"content":"","date":"1 January 0001","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":"1 January 0001","permalink":"/series/","section":"Series","summary":"","title":"Series"},{"content":"","date":"1 January 0001","permalink":"/topics/","section":"Topics","summary":"","title":"Topics"}]