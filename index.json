[{"content":"","date":"19 October 2023","permalink":"/tags/latex%E6%8E%92%E7%89%88/","section":"Tags","summary":"","title":"latex排版"},{"content":"\\PassOptionsToPackage{quiet}{fontspec} %在document{}前加上就可以解决啦！简单暴力! \\documentclass[withoutpreface,bwprint]{cumcmthesis} %去掉封面与编号页 \\usepackage{ctex} \\usepackage{multicol} \\usepackage{amsmath} \\usepackage{amssymb} \\usepackage{mathrsfs} \\usepackage{graphics} \\usepackage{subfigure} \\usepackage{float} \\usepackage{booktabs} \\usepackage{color} \\usepackage{xcolor} \\usepackage{listings} \\bibliographystyle{unsrt} %导入的参考文献风格 \\usepackage{hyperref} \\usepackage[utf8]{inputenc} \\usepackage[T1]{fontenc} %改变颜色 \\hypersetup{ colorlinks=true, linkcolor=blue, filecolor=blue, urlcolor=blue, citecolor=cyan, } \\title{\\LaTeX 教学} \\author{陈创禧} %正文区 \\begin{document} \\maketitle \\section*{序言} Word 的“所见即所得”是一种幻觉。大家都觉得很方便，但是要排版出一篇精美的了论文难度却很大。图片表格经常且不说乱飞，编辑公式的时候，头都大了。有想删除Office的冲动! \\LaTeX 的“所想即所得”是一种现实，它的结构命令便于记忆，格式也可以自动生成，编辑公式一条代码搞定，编号一个环境搞定,爽歪歪！ \\LaTeX 的优点实在是太多啦！如果有固定的模板，而且需要写长论文，许多公式，那么\\LaTeX 非常好，熟练以后完全不打扰你的写作思路。而且用Latex，长文章，你根本不用担心格式不统一、文件打开慢、做个操作机器会卡住、不同的软件版本样式被改得乱七八糟、公式一多慢得像蜗牛这些问题。我在写重要文章时，就时常担心Word崩溃掉导致内容丢失的问题，还担心哪个地方的行距就莫名其妙不一样了…… 一般而言\\LaTeX 的缺点是不能所见即所得，需要编译才能看到最终的输出结果。对于长公式而言，初学者往往会非常痛苦。尤其是文章内容多，需要编译的时间很长，公式又很复杂，初学者往往倾向于写一点就要看一下。针对这种问题，你可以新建一个tex文件专门编译正在打的公式。(当然也可像我一样熟练后再长都能一遍过⁄(⁄ ⁄•⁄ω⁄•⁄ ⁄)⁄，其实熟了后看到代码都能直接脑编译的，真的……) \\LaTeX 的学习成本高吗?说低的肯定是骗人的!我也是学习了一天才明白了各种语法,又经过了好几天的练习才慢慢熟练.但是对于我这个学不会Office的人来说\\LaTeX 的学习成本相对较低,Office的花样太多了,而且很难排版出一篇满意的了论文和笔记.看到用\\LaTeX 排版出来的论文和笔记,很难不爱啊!现在让我回去用Office,我只能说回不去了。 如何高效的使用\\LaTeX 的呢？我们可以使用一些\\href{https://zhuanlan.zhihu.com/p/516265230}{快捷键}来提高我们的效率。当然啦！还是需要勤加练习。还有要养成良好的使用习惯，一些命令不需要了不要删除，可以使用注释，方便下次使用。刘海洋老师有一句话说得很好，“写作时不排版，排版时不写作。”一心二用办不成好事，我们提前写好内容再进行排版才能大大地提高效率。 如果你受够了 Word 给你带来的「意外」，或许\\LaTeX 能给你带来「惊喜」~ 现在就开始\\LaTeX 的学习之旅吧！ \\begin{multicols}{3} 学习网站： \\begin{itemize} \\item \\href{https://flowus.cn/latex/share/66110e84-b24a-4cd5-b8a7-2ba2afb35a30}{\\LaTeX 代码百宝箱} \\item \\href{http://www.uinio.com/Math/LaTex/}{\\LaTeX 数学公式语法} \\end{itemize} 书籍： \\begin{itemize} \\item \\href{https://cozier-1315026820.cos.ap-guangzhou.myqcloud.com/epslatex-cn.pdf}{\\LaTeX 插图指南} \\item \\href{https://cozier-1315026820.cos.ap-guangzhou.myqcloud.com/%E5%88%98%E6%B5%B7%E6%B4%8B%E3%80%8ALaTeX%E5%85%A5%E9%97%A8%E3%80%8B.pdf}{刘海洋《LaTeX入门》} \\end{itemize} 大牛专刊： \\begin{itemize} \\item \\href{https://www.zhihu.com/people/muzzi/answers}{慕子} \\item \\href{https://www.zhihu.com/people/liu-haiyang}{刘海洋} \\end{itemize} \\end{multicols} \\newpage \\tableofcontents \\newpage \\section{所需软件} \\subsection{\\LaTeX} \\begin{enumerate} \\item 推荐网站: \\href{https://texpage.com/}{TeXPage} \\item 推荐软件: Texlive和TeX studio \\href{https://blog.csdn.net/Mikchy/article/details/94448707?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167843849716800182737093%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D\u0026amp;request_id=167843849716800182737093\u0026amp;biz_id=0\u0026amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-94448707-null-null.142^v73^insert_down4,201^v4^add_ask,239^v2^insert_chatgpt\u0026amp;utm_term=latex%E5%AE%89%E8%A3%85\u0026amp;spm=1018.2226.3001.4187}{安装教程} \\end{enumerate} \\subsection{公式} \\begin{enumerate} \\item 推荐网站: \\begin{itemize} \\item \\href{https://www.latexlive.com/}{在线LaTeX公式编辑器} \\quad 一个账号每天可以\\textbf{免费识别7次} \\item TexPage内自带识别LaTeX公式的程序可以无限次数使用 \\end{itemize} \\item 推荐软件:\\href{https://simpletex.cn/download}{simpletex} \\par 完全免费！识别质量高，速度也很快，还有很多个性化设置！\\textbf{香！实在是太香啦!} \\end{enumerate} \\subsection{图像} \\begin{enumerate} \\item 建模:MATLAB、Python、Origin、R…… \\item 流程图: \\begin{itemize} \\item 软件：PPT、AxGlyph、Visio…… \\item 网站:\\href{https://www.processon.com/}{ProcessOn} \\end{itemize} \\end{enumerate} \\subsection{文献} \\begin{itemize} \\item \\href{https://www.cnki.net/}{中国知网} \\quad \\textbf{可以去某宝买账号，或者使用图书馆的账号} \\item \\href{https://www.oalib.com/}{Open Access Library} \\item \\href{https://ieeexplore.ieee.org/Xplore/home.jsp}{IEEE Xplore} \\item \\href{https://sci-hub.ru/}{Sci-Hub} \\quad \\href{https://zhuanlan.zhihu.com/p/369748238}{IEEE XPLORE论文PDF免费下载方法} \\end{itemize} \\subsection{文献管理} \\begin{enumerate} \\item 浏览器插件：zotero、jabref \\item 推荐软件：zotero \\href{https://www.zotero.org/download/}{下载地址} \\end{enumerate} \\subsection{PDF编辑器} \\begin{itemize} \\item Adobe Acrobat Reader DC \\href{https://pan.baidu.com/s/1YXRn_3ZQIqwByHCHFTIfMA?pwd=v9u7}{破解版下载地址} \\item 小绿鲸鱼英文文献阅读器 \\href{https://www.xljsci.com/download/index.html}{下载地址} \\quad \\textbf{可以实时翻译文献} \\end{itemize} \\newpage \\section{框架} \\subsection{最基本的结构} \\begin{lstlisting} %导言区 \\documentclass{article} %\\documentclass[withoutpreface,bwprint]{cumcmthesis} %去掉封面与编号页 \\usepackage{ctex} %正文区 \\begin{document} \\end{document} \\end{lstlisting} \\subsection{源文件的基本结构} \\subsubsection{导言区} \\begin{enumerate} \\item 文档格式的设置：article, book, report, letter \\item 文本信息的设置：标题、作者、日期的设置 \\end{enumerate} \\begin{lstlisting} %导言区 \\documentclass{article} %article,book, report, letter \\title{My First Document} \\author{Cozier} \\date{\\today} \\end{lstlisting} \\subsection{正文区} \\begin{enumerate} \\item 如果有文本信息的设置要加上 \\lstinline{\\maketitle} \\item 分段含缩进:\\lstinline{\\par}或者空格 \\item 分段不含缩进:\\lstinline{\\\\} \\item 换页:\\lstinline{\\newpage} \\item 空格: \\lstinline{\\quad \\qquad \\enspace \\; \\: \\, \\thinspce \\! \\negthinspce} \\item 数学公式：\\$\\$中间输出的是数学公式，没在里面输出的是文本模式。 其中一个\\$包围的是行内公式，两个\\$\\$则是行间公式。 \\end{enumerate} \\begin{lstlisting} %导言区 \\documentclass{article} %article,book, report, letter \\title{My First Document} \\author{Cozier} \\date{\\today} %正文区(文稿区) \\begin{document} \\maketitle %为了使上面的标题、作者和日期正常显示 Hello World! % $$中间输出的是数学公式，没在里面输出的是文本模式 % 其中一个$包围的是行内公式，两个$$则是行间公式 Let $f(x)$ be difined by the formula. $f(x)=3x^2+4x+3$. $$f(x)=3x^2+4x+3$$ which is a polynomial of degree 2. \\end{document} \\end{lstlisting} \\section{中文输入及字体} \\subsection{中文输入处理方法} \\subsubsection{法一：调用ctex宏包} \\begin{lstlisting} \\usepackage{ctex} \\end{lstlisting} \\subsubsection{法二：使用ctex文档} \\begin{lstlisting} \\documentclass{ctexart} %ctexbook, ctexrep \\end{lstlisting} \\subsection{中文输入报错警告} 如：Package fontspec Warning: Font \u0026#34;FandolSong-Regulardoes not contain requested Script \u0026#34;CJk\u0026#34;. 这些警告不痛不痒，latex还是可以正常编译运行。 让LaTeX 抑制这类警告，假装问题不存在。代码如下： \\begin{lstlisting} %在document{}前加上就可以解决啦！简单暴力! \\PassOptionsToPackage{quiet}{fontspec} \\end{lstlisting} \\subsection{字体} 字体设置有两种方法,\\textbf{推荐使用字体声明}，编辑起来更有结构性，便于修改。 \\subsubsection{字体族设置(罗马字体、无衬线字体、打字机字体)} \\begin{lstlisting} %字体族设置（罗马字体、无衬线字体、打字机字体） %第一种是使用字体命令，括号里就是具体内容 \\textrm{Roman Family} \\textsf{Sans Serif Family} \\texttt{Typewriter Family} %第二种是使用字体声明，用于声明后面的字体为罗马字体，大括号用于分组，限定字体限制的范围 \\rmfamily Roman Family {\\sffamily Sans Serif Family} {\\ttfamily Typewriter Family} \\end{lstlisting} %字体族设置（罗马字体、无衬线字体、打字机字体） %第一种是使用字体命令，括号里就是具体内容 \\textrm{Roman Family} \\textsf{Sans Serif Family} \\texttt{Typewriter Family} %第二种是使用字体声明，用于声明后面的字体为罗马字体，大括号用于分组，限定字体限制的范围 \\rmfamily Roman Family {\\sffamily Sans Serif Family} {\\ttfamily Typewriter Family} \\subsubsection{字体系列设置(粗细)} \\begin{lstlisting} %字体系列设置（粗细） \\textmd{Medium Series} \\textbf{Boldface Series} {\\mdseries Medium Series} {\\bfseries Boldface Series} \\end{lstlisting} \\textmd{Medium Series} \\textbf{Boldface Series} {\\mdseries Medium Series} {\\bfseries Boldface Series} \\subsubsection{字体形状设置(直立、斜体、伪斜体、小型大写)} \\begin{lstlisting} %字体形状设置（直立、斜体、伪斜体、小型大写） \\textup{Upright Shape} \\textit{Italic Shape} \\textsl{Slanted Shape} \\textsc{Small Caps Shape} {\\upshape Upright Shape} {\\itshape Italic Shape} {\\slshape Slanted Shape} {\\scshape Small Caps Shape} \\end{lstlisting} %字体形状设置（直立、斜体、伪斜体、小型大写） \\textup{Upright Shape} \\textit{Italic Shape} \\textsl{Slanted Shape} \\textsc{Small Caps Shape} {\\upshape Upright Shape} {\\itshape Italic Shape} {\\slshape Slanted Shape} {\\scshape Small Caps Shape} \\subsubsection{中文字体的设置} \\begin{lstlisting} %中文字体 {\\songti 宋体} {\\heiti 黑体} {\\fangsong 仿宋} {\\kaishu 楷书} %中文字体的粗细和斜体,注意粗体使用黑体表示，斜体使用楷书表示 \\textbf{粗体} \\textit{斜体} {\\itshape 斜体} {\\bfseries 粗体} \\end{lstlisting} %中文字体 {\\songti 宋体} {\\heiti 黑体} {\\fangsong 仿宋} {\\kaishu 楷书} %中文字体的粗细和斜体,注意粗体使用黑体表示，斜体使用楷书表示 \\textbf{粗体} \\textit{斜体} {\\itshape 斜体} {\\bfseries 粗体} \\subsubsection{字体大小} \\begin{lstlisting} %字体大小,都是相对于normal size进行的变化，而normal size在最开始设置,\\documentclass[10pt]{article} {\\tiny Hello}\\\\ {\\scriptsize Hello}\\\\ {\\footnotesize Hello}\\\\ {\\small Hello}\\\\ {\\normalsize Hello}\\\\ {\\large Hello}\\\\ {\\Large Hello}\\\\ {\\LARGE Hello}\\\\ {\\huge Hello}\\\\ {\\Huge Hello}\\\\ %中文字号设置命令 \\zihao{4} 你好！%其中的number 对应Word里的字号大小，负号代表小号，如-4：小四，4：四号 \\end{lstlisting} %字体大小,都是相对于normal size进行的变化，而normal size在最开始设置,\\documentclass[10pt]{article} {\\tiny Hello}\\\\ {\\scriptsize Hello}\\\\ {\\footnotesize Hello}\\\\ {\\small Hello}\\\\ {\\normalsize Hello}\\\\ {\\large Hello}\\\\ {\\Large Hello}\\\\ {\\LARGE Hello}\\\\ {\\huge Hello}\\\\ {\\Huge Hello}\\\\ \\section{篇章结构} \\subsection{摘要} \\begin{lstlisting} %摘要会自动新建页面,并且会根据输入法显示标题[摘要] \\begin{abstract} 内容... %其中：\\quad为两个字符空格 \\keywords{内容1 \\quad 内容2} \\end{abstract} \\end{lstlisting} \\subsection{提纲建立} \\subsubsection{标题} \\begin{lstlisting} %一级标题： \\section{内容} %二级标题： \\subsection{内容} %三级标题： \\subsubsection{内容} \\end{lstlisting} \\subsubsection{添加目录} \\begin{lstlisting} \\tableofcontent %添加在\\section之前，国赛可以不用目录 \\end{lstlisting} \\subsection{对原来的设置进行更改} \\subsubsection{设置标题居中} \\begin{lstlisting} \\documentclass{ctexart} %会默认标题居中 \\end{lstlisting} \\subsubsection{对section和subsection进行设置} \\begin{lstlisting} \\ctexset{ section ={ format+ = \\zihao{-4} \\heiti \\raggedright, name = {,、}, number = \\chinese{section}, %说明这里的大标题是以中文形式，一、 beforeskip = 1.0ex plus 0.2ex minus .2ex, afterskip = 1.0ex plus 0.2ex minus .2ex, aftername = \\hspace{0pt} }, subsection = { format+ = \\zihao{5} \\heiti \\raggedright, name = {,、}, number = \\arabic{section}, beforeskip = 1.0ex plus 0.2ex minus .2ex, afterskip = 1.0ex plus 0.2ex minus .2ex, aftername = \\hspace{0pt} } } \\end{lstlisting} \\section{列表环境} \\subsection{有序列表} \\begin{lstlisting} \\begin{enumerate} % \\begin{enumerate}[label=(\\arabic*)] %带圆括号 % \\begin{enumerate}[label=\\Roman*] %大写阿拉伯 % \\begin{enumerate}[label=\\alph*.] %斜体字母 \\item 内容1 \\item 内容2 \\end {enumerate} \\end{lstlisting} \\begin{multicols}{4} \\begin{enumerate} \\item 内容1 \\item 内容2 \\end {enumerate} \\begin{enumerate}[label=(\\arabic*)] %带圆括号 \\item 内容1 \\item 内容2 \\end {enumerate} \\begin{enumerate}[label=\\Roman*] %大写阿拉伯 \\item 内容1 \\item 内容2 \\end {enumerate} \\begin{enumerate}[label=\\alph*.] %斜体字母 \\item 内容1 \\item 内容2 \\end {enumerate} \\end{multicols} \\subsection{无序列表} \\begin{lstlisting} \\begin{itemize} \\item 内容1 \\item 内容2 \\end {itemize} %无序列表环境--自定义符号: \\begin{itemize} \\item[-] 内容1 \\item[+] 内容2 \\end{itemize} \\end{lstlisting} \\begin{multicols}{2} \\begin{itemize} \\item 内容1 \\item 内容2 \\end {itemize} \\begin{itemize} \\item[-] 内容1 \\item[+] 内容2 \\end{itemize} \\end{multicols} \\subsection{解说环境} \\begin{lstlisting} \\begin{description} \\item[item a] 内容1 \\item[item b] 内容2 \\end{description} \\end{lstlisting} \\begin{multicols}{2} \\begin{description} \\item[item a] 内容1 \\item[item b] 内容2 \\end{description} \\end{multicols} \\section{数学公式} \\subsection{特殊符号} \\begin{lstlisting} \\# \\$ \\% \\\u0026amp; \\{ \\} \\_ \\^{} %^输入 \\--{} %- \\textless %\u0026lt; \\textgreater %\u0026gt; \\textbar %| \\textbackslash %\\ \\end{lstlisting} \\# \\$ \\% \\\u0026amp; \\{ \\} \\_ \\^{} %^输入 \\--{} %- \\textless %\u0026lt; \\textgreater %\u0026gt; \\textbar %| \\textbackslash %\\ \\subsection{添加宏包} \\begin{lstlisting} \\usepackage{amsmath} %输出黑板粗体字符,\\mathbb \\usepackage{amssymb} %输出花体字符,\\mathscr \\usepackage{mathrsfs} \\end{lstlisting} \\newpage \\subsection{行内公式} \\begin{enumerate} \\item single \\$ + 公式 \\item 小括号+公式 \\item math的环境 \\end{enumerate} \\begin{lstlisting} 美元符号:\\par 交换律是 $a+b=b+a$,如$1+2=2+1=3$ \\par小括号:\\par 交换律是 \\(a+b=b+a\\),如\\(1+2=2+1=3\\) \\par math环境: \\par 交换律是 \\begin{math} a+b=b+a \\end{math},如 \\begin{math} 1+2=2+1=3 \\end{math} \\end{lstlisting} 美元符号:\\par 交换律是 $a+b=b+a$,如$1+2=2+1=3$ 小括号:\\par 交换律是 \\(a+b=b+a\\),如\\(1+2=2+1=3\\) math环境: \\par 交换律是 \\begin{math} a+b=b+a \\end{math},如 \\begin{math} 1+2=2+1=3 \\end{math} \\subsection{希腊字母} 小写希腊字母（Lowercase Greek letters ）的输入命令为：\\lstinline{\\alpha,\\beta, \\gamma}等，相应地，大写形式的输入命令为：\\lstinline{\\Gamma, \\Delta}等。 \\quad \\href{https://cozier-1315026820.cos.ap-guangzhou.myqcloud.com/symbols.pdf}{完整symbols} \\begin{lstlisting} $\\alpha$\\quad $\\beta$\\quad $\\gamma$ %小写 \\quad $\\Gamma$\\quad $\\Delta$ %大写 \\end{lstlisting} $\\alpha$\\quad $\\beta$\\quad $\\gamma$ \\quad $\\Gamma$\\quad $\\Delta$ \\subsection{上下标} \\begin{enumerate} \\item 上标用\\^{};下标用\\_ \\item 当上下标超过一个字符时，用{}进行分组 \\end{enumerate} \\begin{lstlisting} %上标是通过^符号实现 $3x^2 - x + 2 = 0$ %有时复杂的上边需要用大括号进行分组 $3x^{20} - x + 2 = 0$ $3x^{3y+2} - x + 2 = 0$ %下标是通过_下划线来实现 %分组组要是当上下标超过一个字符就要用大括号 $a_0,a_1,a_x,a_{xy},a_{100}$ \\end{lstlisting} %上标是通过^符号实现 $3x^2 - x + 2 = 0$ %有时复杂的上边需要用大括号进行分组 $3x^{20} - x + 2 = 0$ $3x^{3y+2} - x + 2 = 0$ %下标是通过_下划线来实现 %分组组要是当上下标超过一个字符就要用大括号 $a_0,a_1,a_x,a_{xy},a_{100}$ \\subsection{分式与根式} \\begin{lstlisting} %建议都加上{} %分式 $\\frac{1}{2}$\\quad $\\frac 1 2$\\quad $\\frac 1 {x+y}$ $\\frac{\\frac{1}{x}+1}{y+1}$\\quad $\\frac{\\dfrac{1}{x}+1}{y+1}$ %根式 $\\sqrt{2}$\\quad $\\sqrt{x+y}$\\quad $\\sqrt[3]{2}$ \\end{lstlisting} %建议都加上{} $\\frac{1}{2}$\\quad $\\frac 1 2$\\quad $\\frac 1 {x+y}$ $\\frac{\\frac{1}{x}+1}{y+1}$\\quad $\\frac{\\dfrac{1}{x}+1}{y+1}$ %根式 $\\sqrt{2}$\\quad $\\sqrt{x+y}$\\quad $\\sqrt[3]{2}$ \\subsection{运算符号} \\subsubsection{普通运算符} 函数名通常用罗马字体正体排版，而不是像变量名一样用意大利体排版。 \\begin{lstlisting} %加减乘除 +\\quad -\\quad $\\times$\\quad $\\cdot$\\quad $\\div$ %比较运算符 \u0026gt;\\quad \u0026lt;\\quad $\\ge$\\quad $\\le$\\quad $\\ne$ \\quad $\\approx$\\quad $\\equiv$ %关系运算符 $\\cap$\\quad $\\cup$\\quad $\\in$\\quad $\\notin$ \\quad $\\subseteq$\\quad $\\subsetneqq$\\quad $\\varnothing$ $\\forall$\\quad $\\exists$\\quad $\\nexists$ $\\because$\\quad $\\therefore$ %数集 $\\mathbb{R}$\\quad $\\mathbb{Q}$\\quad $\\mathbb{N}$ \\quad $\\mathbb{N^*}$\\quad $\\mathbb{Z}$\\quad %傅里叶变换 $\\mathcal{F}$\\quad $\\mathscr{F}$ %省略号 $\\cdots$\\quad $\\vdots$\\quad $\\ddots$ %其他 $\\infty$\\quad $\\partial$\\quad $\\propto$ %三角函数符号 $\\sin{x}$\\quad $\\cos{x}$\\quad $\\tan{x}$ \\quad $\\arcsin{x}$\\quad $\\arccos{x}$\\quad $\\arctan{x}$ \\quad $\\sinh{x}$\\quad $\\cosh{x}$ %对数函数符号 $\\log{x}$\\quad $\\ln{x}$\\quad $\\log_2{x}$ %极限符号 $\\lim\\limits_{x \\to 0} \\frac{x}{\\sin{x}}$ \\quad $\\max{x}$\\quad $\\min{x}$ \\end{lstlisting} %加减乘除 +\\quad -\\quad $\\times$\\quad $\\cdot$\\quad $\\div$ %比较运算符 \u0026gt;\\quad \u0026lt;\\quad $\\ge$\\quad $\\le$\\quad $\\ne$ \\quad $\\approx$\\quad $\\equiv$ %关系运算符 $\\cap$\\quad $\\cup$\\quad $\\in$\\quad $\\notin$ \\quad $\\subseteq$\\quad $\\subsetneqq$\\quad $\\varnothing$ $\\forall$\\quad $\\exists$\\quad $\\nexists$ $\\because$\\quad $\\therefore$ %数集 $\\mathbb{R}$\\quad $\\mathbb{Q}$\\quad $\\mathbb{N}$ \\quad $\\mathbb{N^*}$\\quad $\\mathbb{Z}$\\quad %傅里叶变换 $\\mathcal{F}$\\quad $\\mathscr{F}$ %省略号 $\\cdots$\\quad $\\vdots$\\quad $\\ddots$ %其他 $\\infty$\\quad $\\partial$\\quad $\\propto$ %三角函数符号 $\\sin{x}$\\quad $\\cos{x}$\\quad $\\tan{x}$ \\quad $\\arcsin{x}$\\quad $\\arccos{x}$\\quad $\\arctan{x}$ \\quad $\\sinh{x}$\\quad $\\cosh{x}$ %对数函数符号 $\\log{x}$\\quad $\\ln{x}$\\quad $\\log_2{x}$ %极限符号 $\\lim\\limits_{x \\to 0} \\frac{x}{\\sin{x}}$ \\quad $\\max{x}$\\quad $\\min{x}$ \\subsubsection{大型运算符} \\begin{lstlisting} %求和、求积 $\\sum$\\quad $\\prod$\\quad $\\sum_i$\\quad $\\sum_{i=0}^N$ \\quad $\\frac{\\sum_{i=0}^N x_i}{\\prod_{i=0}^N x_i}$ \\quad $\\frac{\\sum\\limits_{i=0}^N x_i}{\\prod\\limits_{i=0}^N x_i}$ %积分 $\\int$\\quad $\\iint$\\quad $\\iiint$\\quad $\\oint$ \\quad $\\int_{-\\infty}^0 f(x)d{x}$ \\quad $\\int_{-\\infty}^0 f(x) \\, \\textrm{d{x}}$ \\quad $\\int\\limits_{-\\infty}^0 f(x) \\, \\textrm{d{x}}$ \\end{lstlisting} %求和、求积 $\\sum$\\quad $\\prod$\\quad $\\sum_i$\\quad $\\sum_{i=0}^N$ \\quad $\\frac{\\sum_{i=0}^N x_i}{\\prod_{i=0}^N x_i}$\\quad $\\frac{\\sum\\limits_{i=0}^N x_i}{\\prod\\limits_{i=0}^N x_i}$ %积分 $\\int$\\quad $\\iint$\\quad $\\iiint$\\quad $\\oint$ \\quad $\\int_{-\\infty}^0 f(x)d{x}$ \\quad $\\int_{-\\infty}^0 f(x) \\, \\textrm{d{x}}$ \\quad $\\int\\limits_{-\\infty}^0 f(x) \\, \\textrm{d{x}}$ \\subsection{标注符号} \\begin{lstlisting} %向量 $\\Vec{x}$\\quad $\\overrightarrow{AB}$ %平均值 $\\Bar{x}$\\quad $\\overline{AB}$ \\end{lstlisting} %向量 $\\Vec{x}$\\quad $\\overrightarrow{AB}$ %平均值 $\\Bar{x}$\\quad $\\overline{AB}$ \\subsection{箭头} \\begin{lstlisting} %短箭头 $\\leftarrow$\\quad $\\rightarrow$\\quad $\\Leftarrow$ \\quad $\\Rightarrow$\\quad $\\Leftrightarrow$ %长单箭头 $\\longleftarrow$\\quad $\\longrightarrow$\\quad $\\longleftarrow$\\quad $\\longrightarrow$\\quad $\\longleftrightarrow$ %长双箭头 $\\Longleftarrow$\\quad $\\Longrightarrow$\\quad $\\Longleftarrow$\\quad $\\Longrightarrow$\\quad $\\Longleftrightarrow$ \\end{lstlisting} %短箭头 $\\leftarrow$\\quad $\\rightarrow$\\quad $\\Leftarrow$ \\quad $\\Rightarrow$\\quad $\\Leftrightarrow$ %长单箭头 $\\longleftarrow$\\quad $\\longrightarrow$\\quad $\\longleftarrow$\\quad $\\longrightarrow$\\quad $\\longleftrightarrow$ %长双箭头 $\\Longleftarrow$\\quad $\\Longrightarrow$\\quad $\\Longleftarrow$\\quad $\\Longrightarrow$\\quad $\\Longleftrightarrow$ \\subsection{括号与定界符} \\begin{lstlisting} %括号 ()\\quad []\\quad \\{\\} %定界符 $(0,\\frac{1}{a}]$\\quad $\\left(0,\\frac{1}{a}\\right]$\\par $\\frac{1}{t}\\sqrt{1+t^{2}}|_1 ^{\\frac{1}{2}}$ \\quad $\\left.\\dfrac{1}{t}\\sqrt{1+t^{2}}\\right|_1 ^{\\frac{1}{2}}$ %虚空括号 \\end{lstlisting} %括号 ()\\quad []\\quad \\{\\} %定界符 $(0,\\frac{1}{a}]$\\quad $\\left(0,\\frac{1}{a}\\right]$\\par $\\frac{1}{t}\\sqrt{1+t^{2}}|_1 ^{\\frac{1}{2}}$ \\quad $\\left.\\dfrac{1}{t}\\sqrt{1+t^{2}}\\right|_1 ^{\\frac{1}{2}}$ %虚空括号 \\subsection{多行数学公式} \\subsubsection{gather环境} \\begin{lstlisting} %gather环境，不仅实现多行公式的排版，而且可以自动编号 \\begin{gather} a + b =b + a \\\\ a\\times b = b\\times a \\end{gather} %gather*环境，不带编号的多行公式排版 \\begin{gather*} a + b = b + a \\\\ a\\times b = b\\times a \\end{gather*} %也可以在某一行换行之前使用\\notag命令，取消这一行公示的编号 \\begin{gather} a + b = b + a \\\\ a\\times b = b\\times a \\notag \\\\ 2 \\times 3 = 3 \\times 2 = 6 \\end{gather} \\end{lstlisting} %gather环境，不仅实现多行公式的排版，而且可以自动编号 \\begin{gather} a + b =b + a \\\\ a\\times b = b\\times a \\end{gather} %gather*环境，不带编号的多行公式排版 \\begin{gather*} a + b = b + a \\\\ a\\times b = b\\times a \\end{gather*} %也可以在某一行换行之前使用\\notag命令，取消这一行公示的编号 \\begin{gather} a + b = b + a \\\\ a\\times b = b\\times a \\notag \\\\ 2 \\times 3 = 3 \\times 2 = 6 \\end{gather} \\subsubsection{align环境} \\begin{lstlisting} %实现公式之间的对齐，可以使用align和align*(用\u0026amp;指定对齐位置) %带编号 \\begin{align} x \u0026amp;= t + \\cos t +1 \\\\ y \u0026amp;= 2\\sin t \\end{align} %不代编号以及多个公式分别对齐 %如等号对齐，每个开头对齐 \\begin{align*} x \u0026amp;= t \u0026amp; x \u0026amp;= \\cos t \u0026amp; x \u0026amp;=t \\\\ y \u0026amp;=2t \u0026amp; y \u0026amp;= \\sin (t+1) \u0026amp; y \u0026amp;= \\sin t \\end{align*} \\end{lstlisting} %实现公式之间的对齐，可以使用align和align*(用\u0026amp;指定对齐位置) %带编号 \\begin{align} x \u0026amp;= t + \\cos t +1 \\\\ y \u0026amp;= 2\\sin t \\end{align} %不代编号以及多个公式分别对齐 %如等号对齐，每个开头对齐 \\begin{align*} x \u0026amp;= t \u0026amp; x \u0026amp;= \\cos t \u0026amp; x \u0026amp;=t \\\\ y \u0026amp;=2t \u0026amp; y \u0026amp;= \\sin (t+1) \u0026amp; y \u0026amp;= \\sin t \\end{align*} \\newpage \\subsubsection{split环境} \\begin{lstlisting} %split环境（对齐采用align环境的方式，编号在中间,主要适用于连等符号，也就是一个公式多行排版） %在equation环境下 \\begin{equation} \\begin{split} \\cos 2x \u0026amp;= \\cos^2 x - \\sin^2 x \\\\ \u0026amp;= 2\\cos^2 x - 1 \\end{split} \\end{equation} \\end{lstlisting} %split环境（对齐采用align环境的方式，编号在中间,主要适用于连等符号，也就是一个公式多行排版） %在equation环境下 \\begin{equation} \\begin{split} \\cos 2x \u0026amp;= \\cos^2 x - \\sin^2 x \\\\ \u0026amp;= 2\\cos^2 x - 1 \\end{split} \\end{equation} \\subsubsection{cases环境} \\begin{lstlisting} %cases 环境,用于分段函数的表示 %每行公式中使用\u0026amp;分隔符为连各个部分 %通常表示值和后面的条件 %在equation环境下 %\\in表示的是属于符号，\\textem{}表示在公式环境下输出文本 \\begin{equation} D(x) = \\begin{cases} 1, \u0026amp; \\textrm{如果 } x \\in \\mathbb{Q} \\\\ 0, \u0026amp; \\textrm{如果 } x \\in \\mathbb{R} \\setminus\\mathbb{Q}. \\end{cases} \\end{equation} \\end{lstlisting} %cases 环境,用于分段函数的表示 %每行公式中使用\u0026amp;分隔符为连各个部分 %通常表示值和后面的条件 %在equation环境下 %\\in表示的是属于符号，\\textem{}表示在公式环境下输出文本 \\begin{equation} D(x) = \\begin{cases} 1, \u0026amp; \\textrm{如果 } x \\in \\mathbb{Q} \\\\ 0, \u0026amp; \\textrm{如果 } x \\in \\mathbb{R} \\setminus\\mathbb{Q}. \\end{cases} \\end{equation} \\subsection{实战演练} \\[ \\sigma=\\sqrt{\\dfrac{\\sum(x_i-\\overline{x})^2}{n-1}}\\quad(n\\to\\infty) \\] \\[ \\lim\\limits_{n\\to\\infty}P\\left\\{\\left|\\dfrac{I\\left(\\alpha_i\\right)}{N}-H(s) \\right|\u0026lt;\\varepsilon\\right\\}=1 \\] \\[ x(n)=\\dfrac{1}{2\\pi} \\int_{-\\pi}^{\\pi} X \\left(\\mathrm{e}^{\\mathrm{j}\\omega} \\right)\\mathrm{e}^{\\mathrm{j}\\omega n}\\,\\mathrm{d}\\omega \\] \\begin{lstlisting} \\[ \\sigma=\\sqrt{\\dfrac{\\sum(x_i-\\overline{x})^2}{n-1}}\\quad(n\\to\\infty) \\] \\[ \\lim\\limits_{n\\to\\infty}P\\left\\{\\left|\\dfrac{I\\left(\\alpha_i\\right)}{N}-H(s) \\right|\u0026lt;\\varepsilon\\right\\}=1 \\] \\[ x(n)=\\dfrac{1}{2\\pi} \\int_{-\\pi}^{\\pi} X \\left(\\mathrm{e}^{\\mathrm{j}\\omega} \\right)\\mathrm{e}^{\\mathrm{j}\\omega n}\\,\\mathrm{d}\\omega \\] \\end{lstlisting} \\newpage \\section{矩阵} \\subsection{常见矩阵环境} \\begin{lstlisting} \\begin{multicols}{3} %无括号环境 \\(\\begin{matrix} a \u0026amp; b \u0026amp; \\cdots \u0026amp; c \\\\ \\vdots\u0026amp; \\vdots \u0026amp; \\ddots \u0026amp;\\vdots \\\\ e \u0026amp; f \u0026amp; \\cdots \u0026amp; g \\\\ \\end{matrix}\\) %圆括号环境 \\(\\begin{pmatrix} a \u0026amp; b \u0026amp; \\cdots \u0026amp; c \\\\ \\vdots\u0026amp; \\vdots \u0026amp; \\ddots \u0026amp;\\vdots \\\\ e \u0026amp; f \u0026amp; \\cdots \u0026amp; g \\\\ \\end{pmatrix}\\) %方括号环境 \\(\\begin{bmatrix} a \u0026amp; b \u0026amp; \\cdots \u0026amp; c \\\\ \\vdots\u0026amp; \\vdots \u0026amp; \\ddots \u0026amp;\\vdots \\\\ e \u0026amp; f \u0026amp; \\cdots \u0026amp; g \\\\ \\end{bmatrix}\\) \\end{multicols} \\begin{multicols}{3} %单竖线环境 \\(\\begin{vmatrix} a \u0026amp; b \u0026amp; \\cdots \u0026amp; c \\\\ \\vdots\u0026amp; \\vdots \u0026amp; \\ddots \u0026amp;\\vdots \\\\ e \u0026amp; f \u0026amp; \\cdots \u0026amp; g \\\\ \\end{vmatrix}\\) %大括号环境 \\(\\begin{Bmatrix} a \u0026amp; b \u0026amp; \\cdots \u0026amp; c \\\\ \\vdots\u0026amp; \\vdots \u0026amp; \\ddots \u0026amp;\\vdots \\\\ e \u0026amp; f \u0026amp; \\cdots \u0026amp; g \\\\ \\end{Bmatrix}\\) %双竖线环境 \\(\\begin{Vmatrix} a \u0026amp; b \u0026amp; \\cdots \u0026amp; c \\\\ \\vdots\u0026amp; \\vdots \u0026amp; \\ddots \u0026amp;\\vdots \\\\ e \u0026amp; f \u0026amp; \\cdots \u0026amp; g \\\\ \\end{Vmatrix}\\) \\end{multicols} \\end{lstlisting} \\begin{multicols}{3} %无括号环境 \\(\\begin{matrix} a \u0026amp; b \u0026amp; \\cdots \u0026amp; c \\\\ \\vdots\u0026amp; \\vdots \u0026amp; \\ddots \u0026amp;\\vdots \\\\ e \u0026amp; f \u0026amp; \\cdots \u0026amp; g \\\\ \\end{matrix}\\) %圆括号环境 \\(\\begin{pmatrix} a \u0026amp; b \u0026amp; \\cdots \u0026amp; c \\\\ \\vdots\u0026amp; \\vdots \u0026amp; \\ddots \u0026amp;\\vdots \\\\ e \u0026amp; f \u0026amp; \\cdots \u0026amp; g \\\\ \\end{pmatrix}\\) %方括号环境 \\(\\begin{bmatrix} a \u0026amp; b \u0026amp; \\cdots \u0026amp; c \\\\ \\vdots\u0026amp; \\vdots \u0026amp; \\ddots \u0026amp;\\vdots \\\\ e \u0026amp; f \u0026amp; \\cdots \u0026amp; g \\\\ \\end{bmatrix}\\) \\end{multicols} \\begin{multicols}{3} %单竖线环境 \\(\\begin{vmatrix} a \u0026amp; b \u0026amp; \\cdots \u0026amp; c \\\\ \\vdots\u0026amp; \\vdots \u0026amp; \\ddots \u0026amp;\\vdots \\\\ e \u0026amp; f \u0026amp; \\cdots \u0026amp; g \\\\ \\end{vmatrix}\\) %大括号环境 \\(\\begin{Bmatrix} a \u0026amp; b \u0026amp; \\cdots \u0026amp; c \\\\ \\vdots\u0026amp; \\vdots \u0026amp; \\ddots \u0026amp;\\vdots \\\\ e \u0026amp; f \u0026amp; \\cdots \u0026amp; g \\\\ \\end{Bmatrix}\\) %双竖线环境 \\(\\begin{Vmatrix} a \u0026amp; b \u0026amp; \\cdots \u0026amp; c \\\\ \\vdots\u0026amp; \\vdots \u0026amp; \\ddots \u0026amp;\\vdots \\\\ e \u0026amp; f \u0026amp; \\cdots \u0026amp; g \\\\ \\end{Vmatrix}\\) \\end{multicols} \\newpage \\subsection{规范的矩阵写法} 矩阵要用加粗的罗马体写，转置也需要用罗马写。 在数学公式里，加粗的命令和直立体的命令与文本是不同的。 \\begin{lstlisting} \\mathbf{} %加粗罗马体 \\mathrm{} %罗马体 \\end{lstlisting} \\begin{lstlisting} \\begin{multicols}{2} \\[ \\mathbf{A}=\\begin{bmatrix} a \u0026amp; b \u0026amp; \\cdots \u0026amp; c \\\\ \\vdots\u0026amp; \\vdots \u0026amp; \\ddots \u0026amp;\\vdots \\\\ e \u0026amp; f \u0026amp; \\cdots \u0026amp; g \\\\ \\end{bmatrix} \\] \\[ \\mathbf{B}^{\\mathrm{T}}=\\begin{bmatrix} a \u0026amp; b \u0026amp; \\cdots \u0026amp; c \\\\ \\vdots\u0026amp; \\vdots \u0026amp; \\ddots \u0026amp;\\vdots \\\\ e \u0026amp; f \u0026amp; \\cdots \u0026amp; g \\\\ \\end{bmatrix} \\] \\end{multicols} \\end{lstlisting} \\begin{multicols}{2} \\[ \\mathbf{A}=\\begin{bmatrix} a \u0026amp; b \u0026amp; \\cdots \u0026amp; c \\\\ \\vdots\u0026amp; \\vdots \u0026amp; \\ddots \u0026amp;\\vdots \\\\ e \u0026amp; f \u0026amp; \\cdots \u0026amp; g \\\\ \\end{bmatrix} \\] \\[ \\mathbf{B}^{\\mathrm{T}}=\\begin{bmatrix} a \u0026amp; b \u0026amp; \\cdots \u0026amp; c \\\\ \\vdots\u0026amp; \\vdots \u0026amp; \\ddots \u0026amp;\\vdots \\\\ e \u0026amp; f \u0026amp; \\cdots \u0026amp; g \\\\ \\end{bmatrix} \\] \\end{multicols} \\newpage \\subsection{三角矩阵} \\begin{lstlisting} %三角矩阵 %\\multicolumn{cols}{pos}{text}合并多列 %\\raisebox调整高度 \\[ \\begin{pmatrix} a_{11} \u0026amp; a_{12} \u0026amp; \\cdots \u0026amp; a_{1n} \\\\ \u0026amp; a_{22} \u0026amp; \\cdots \u0026amp; a_{2n} \\\\ \u0026amp; \u0026amp; \\ddots \u0026amp; \\vdots \\\\ \\multicolumn{2}{c}{\\raisebox{1.3ex}[0pt]{\\Huge 0}}\u0026amp; \u0026amp;a_{nn} \\end{pmatrix} \\] \\end{lstlisting} %三角矩阵 %\\multicolumn{cols}{pos}{text}合并多列 %\\raisebox调整高度 \\[ \\begin{pmatrix} a_{11} \u0026amp; a_{12} \u0026amp; \\cdots \u0026amp; a_{1n} \\\\ \u0026amp; a_{22} \u0026amp; \\cdots \u0026amp; a_{2n} \\\\ \u0026amp; \u0026amp; \\ddots \u0026amp; \\vdots \\\\ \\multicolumn{2}{c}{\\raisebox{1.3ex}[0pt]{\\Huge 0}}\u0026amp; \u0026amp;a_{nn} \\end{pmatrix} \\] \\subsection{分块矩阵} \\subsubsection{不含虚实线} \\begin{lstlisting} %分块矩阵（矩阵嵌套） %在数学公式中\\Large 0和\\textrm{\\Large 0}表示的不一样 \\[ \\begin{pmatrix} \\begin{matrix} 1\u0026amp;0 \\\\ 0\u0026amp;1 \\end{matrix} \u0026amp; \\mathbf{\\Large O} \\\\ \\mathbf{\\Large O} \u0026amp; \\begin{matrix} 1\u0026amp;0 \\\\ 0\u0026amp;1 \\end{matrix} \\end{pmatrix} \\] \\end{lstlisting} %分块矩阵（矩阵嵌套） %在数学公式中\\Large 0和\\textrm{\\Large 0}表示的不一样 \\[ \\begin{pmatrix} \\begin{matrix} 1\u0026amp;0 \\\\ 0\u0026amp;1 \\end{matrix} \u0026amp; \\mathbf{\\Large O} \\\\ \\mathbf{\\Large O} \u0026amp; \\begin{matrix} 1\u0026amp;0 \\\\ 0\u0026amp;1 \\end{matrix} \\end{pmatrix} \\] \\subsubsection{含横竖实线} \\begin{lstlisting} \\begin{multicols}{3} \\[ \\left[\\begin{array}{cc|cc} a \u0026amp; b \u0026amp; c \u0026amp; d\\\\ a \u0026amp; b \u0026amp; c \u0026amp; d\\\\ a \u0026amp; b \u0026amp; c \u0026amp; d\\\\ a \u0026amp; b \u0026amp; c \u0026amp; d\\\\ \\end{array}\\right] \\] \\[ \\left[\\begin{array}{cccc} a \u0026amp; b \u0026amp; c \u0026amp; d\\\\ a \u0026amp; b \u0026amp; c \u0026amp; d\\\\ \\hline a \u0026amp; b \u0026amp; c \u0026amp; d\\\\ a \u0026amp; b \u0026amp; c \u0026amp; d\\\\ \\end{array}\\right] \\] \\[ \\left[\\begin{array}{cc|cc} a \u0026amp; b \u0026amp; c \u0026amp; d\\\\ a \u0026amp; b \u0026amp; c \u0026amp; d\\\\ \\hline a \u0026amp; b \u0026amp; c \u0026amp; d\\\\ a \u0026amp; b \u0026amp; c \u0026amp; d\\\\ \\end{array}\\right] \\] \\end{multicols} \\end{lstlisting} \\begin{multicols}{3} \\[ \\left[\\begin{array}{cc|cc} a \u0026amp; b \u0026amp; c \u0026amp; d\\\\ a \u0026amp; b \u0026amp; c \u0026amp; d\\\\ a \u0026amp; b \u0026amp; c \u0026amp; d\\\\ a \u0026amp; b \u0026amp; c \u0026amp; d\\\\ \\end{array}\\right] \\] \\[ \\left[\\begin{array}{cccc} a \u0026amp; b \u0026amp; c \u0026amp; d\\\\ a \u0026amp; b \u0026amp; c \u0026amp; d\\\\ \\hline a \u0026amp; b \u0026amp; c \u0026amp; d\\\\ a \u0026amp; b \u0026amp; c \u0026amp; d\\\\ \\end{array}\\right] \\] \\[ \\left[\\begin{array}{cc|cc} a \u0026amp; b \u0026amp; c \u0026amp; d\\\\ a \u0026amp; b \u0026amp; c \u0026amp; d\\\\ \\hline a \u0026amp; b \u0026amp; c \u0026amp; d\\\\ a \u0026amp; b \u0026amp; c \u0026amp; d\\\\ \\end{array}\\right] \\] \\end{multicols} \\subsection{行内小矩阵} \\begin{lstlisting} %smallmatrix环境 复数 $z = (x,y)$ 也可以用矩阵 \\begin{math} \\left(%需要手动加上左括号 \\begin{smallmatrix} x \u0026amp; -y \\\\ y \u0026amp; x \\end{smallmatrix} \\right)%需要手动加上右括号 \\end{math}来表示。 \\end{lstlisting} %smallmatrix环境 复数 $z = (x,y)$ 也可以用矩阵 \\begin{math} \\left(%需要手动加上左括号 \\begin{smallmatrix} x \u0026amp; -y \\\\ y \u0026amp; x \\end{smallmatrix} \\right)%需要手动加上右括号 \\end{math}来表示。 \\subsection{array环境} \\begin{lstlisting} %array环境(类似于表格环境tabular) %引入array矩阵可以插入更为复杂的矩阵 \\[ \\begin{array}{r|r} \\frac 12 \u0026amp; 0 \\\\ \\hline 0 \u0026amp; -\\frac a{bc} \\\\ \\end{array} \\] \\end{lstlisting} %array环境(类似于表格环境tabular) %引入array矩阵可以插入更为复杂的矩阵 \\[ \\begin{array}{r|r} \\frac 12 \u0026amp; 0 \\\\ \\hline 0 \u0026amp; -\\frac a{bc} \\\\ \\end{array} \\] \\section{插图} \\subsection{浮动体} \\begin{enumerate} \\item h此处(here)浮动体的内容被放在代码所在的上下文位置。 \\item t顶端(top)：表示优先将图片放置在页面对应排的顶部。 \\item b底端(bottom)：表示优先将图片放置在页面对应排的底部。 \\item p浮动页(float page)：浮动页。此类浮动体会尝试单独成页。 \\end{enumerate} \\subsection{使用浮动体的建议} \\begin{itemize} \\item 首先要知道如何引用图片【养成在所属文件夹建立图片文件夹的习惯】 \\item 其次如何知道对图片大小和样式进行设置 \\item 对图片或者表格的排版、命名、标签和交叉使用 \\item 在大的figure、table的标签下面去写小的图片或者表格 \\end{itemize} \\subsection{限制浮动效果} 有时候图片会乱跑，我们可以强行限制浮动体。就像乱跑的小朋友要打一顿才会乖乖地待在原地。 \\begin{lstlisting} %导入宏包 \\usepackage{float} %使用方式 \\begin{figure}[H] 图片 \\end{figure} \\end{lstlisting} \\subsection{1×1类型（共享标题）} \\subsubsection{添加宏包} \\begin{lstlisting} %引用图片宏包 \\usepackage{graphicx} %用于排版图片位置 \\usepackage{float} \\end{lstlisting} \\subsubsection{模板} \\begin{lstlisting} \\begin{figure}[H]%开始引用图片环境，[H]为固定图片，防止图片乱跑 \\centering%使图片居中 %插入图片的命令，[scale]为图片大小，后面跟着图片的路径和名字。也可以使用width和height更改图片的大小 \\includegraphics[scale=0.4]{figure/1.png} \\caption{柱状图}%显示图名 \\label{柱状图}%给图片定义一个标签，用于引用 \\end{figure}%结束引用图片环境 这个就是导入的单张图片图片，如图\\ref{柱状图}： \\end{lstlisting} \\begin{figure}[H]%开始引用图片环境，[H]为固定图片，防止图片乱跑 \\centering%使图片居中 %插入图片的命令，[scale]为图片大小，后面跟着图片的路径和名字,可以使用width和height更改图片的大小 \\includegraphics[scale=0.5]{figure/1.png} \\caption{柱状图}%显示图名 \\label{柱状图}%给图片定义一个标签，用于引用 \\end{figure}%结束引用图片环境 这个就是导入的单张图片图片，如图\\ref{柱状图}： \\newpage \\subsection{2×2类型（独立标题）} \\begin{lstlisting} \\begin{figure}[H] \\centering \\subfigure[标题一] { \\begin{minipage}[b]{0.45\\textwidth} \\includegraphics[width=1\\textwidth]{figure/1.png} \\end{minipage} \\label{fig:1} } \\subfigure[标题二] { \\begin{minipage}[b]{0.45\\textwidth} \\includegraphics[width=1\\textwidth]{figure/1.png} \\end{minipage} \\label{fig:2} } \\\\ \\subfigure[标题三] { \\begin{minipage}[b]{0.45\\textwidth} \\includegraphics[width=1\\textwidth]{figure/1.png} \\end{minipage} \\label{fig:3} } \\subfigure[标题四] { \\begin{minipage}[b]{0.45\\textwidth} \\includegraphics[width=1\\textwidth]{figure/1.png} \\end{minipage} \\label{fig:4} } \\caption{四图栅格布局摆放，统一大标题，独立子标题} \\label{fig:5} \\end{figure} \\end{lstlisting} \\begin{figure}[H] \\centering \\subfigure[标题一] { \\begin{minipage}[b]{0.45\\textwidth} \\includegraphics[width=1\\textwidth]{figure/1.png} \\end{minipage} \\label{fig:1} } \\subfigure[标题二] { \\begin{minipage}[b]{0.45\\textwidth} \\includegraphics[width=1\\textwidth]{figure/1.png} \\end{minipage} \\label{fig:2} } \\\\ \\subfigure[标题三] { \\begin{minipage}[b]{0.45\\textwidth} \\includegraphics[width=1\\textwidth]{figure/1.png} \\end{minipage} \\label{fig:3} } \\subfigure[标题四] { \\begin{minipage}[b]{0.45\\textwidth} \\includegraphics[width=1\\textwidth]{figure/1.png} \\end{minipage} \\label{fig:4} } \\caption{四图栅格布局摆放，统一大标题，独立子标题} \\label{fig:5} \\end{figure} 这是子图\\ref{fig:1} 这是子图\\ref{fig:2} 这是子图\\ref{fig:3} 这是子图\\ref{fig:4} 这是大图\\ref{fig:5} \\newpage \\section{表格} \\subsection{普通表格} \\begin{lstlisting} %l：左对齐 c：居中对齐 r：右对齐(均指的是表格内文字) %|表示竖直的表格线，\\hline表示水平的表格线 %p{2.5cm}用于设置指定宽度的列，内容超过后自动换行 %hline水平线 % texdoc booktab(longtab tabu)查看更复杂的表格的制作 \\begin{center} \\begin{tabular}{|l|c|c|c|p{2.5cm}|} \\hline 姓名 \u0026amp; 语文 \u0026amp; 数学 \u0026amp; 外语 \u0026amp; 备注 \\\\ \\hline 张三 \u0026amp; 87 \u0026amp; 100 \u0026amp; 93 \u0026amp; 优秀\\\\ \\hline 李四 \u0026amp; 75 \u0026amp; 64 \u0026amp; 52 \u0026amp; 补考另行通知\\\\ \\hline 王二 \u0026amp; 80 \u0026amp; 82 \u0026amp; 78 \u0026amp; 良好 \\\\ \\hline \\end{tabular} \\end{center} \\end{lstlisting} %表格的制作以及排版 %l：左对齐 c：居中对齐 r：右对齐(均指的是表格内文字) %|表示竖直的表格线，\\hline表示水平的表格线 %p{2.5cm}用于设置指定宽度的列，内容超过后自动换行 %hline水平线 % texdoc booktab(longtab tabu)查看更复杂的表格的制作 \\begin{center} \\begin{tabular}{|l|c|c|c|p{2.5cm}|} \\hline 姓名 \u0026amp; 语文 \u0026amp; 数学 \u0026amp; 外语 \u0026amp; 备注 \\\\ \\hline 张三 \u0026amp; 87 \u0026amp; 100 \u0026amp; 93 \u0026amp; 优秀\\\\ \\hline 李四 \u0026amp; 75 \u0026amp; 64 \u0026amp; 52 \u0026amp; 补考另行通知\\\\ \\hline 王二 \u0026amp; 80 \u0026amp; 82 \u0026amp; 78 \u0026amp; 良好 \\\\ \\hline \\end{tabular} \\end{center} \\subsubsection{三线表} \\subsubsection{添加宏包} \\begin{lstlisting} \\usepackage{booktabs}%提供命令\\toprule、\\midrule、\\bottomrule \\end{lstlisting} \\subsubsection{案例} \\begin{lstlisting} \\begin{center} \\begin{tabular}{cc} \\toprule[1.5pt] \\makebox[0.3\\textwidth][c]{符号}\t\u0026amp; \\makebox[0.4\\textwidth][c]{意义} \\\\ \\midrule[1pt] $ W $\t\u0026amp; 某一小时内该路段运行总收益-总成本 \\\\ $ W_0 $\t\u0026amp; 区分高峰和低峰的一个临界值 \\\\ $ P $\t\u0026amp; 线路在一小时内所有站的总上车人数 \\\\ $ x $\t\u0026amp; 线路在一小时内的车辆数 \\\\ $ T_t $\t\u0026amp; 长期趋势项 \\\\ $ M_t $\t\u0026amp; 简单移动平均项 \\\\ \\bottomrule[1.5pt] \\end{tabular} \\end{center} \\end{lstlisting} \\begin{center} \\begin{tabular}{cc} \\toprule[1.5pt] \\makebox[0.3\\textwidth][c]{符号}\t\u0026amp; \\makebox[0.4\\textwidth][c]{意义} \\\\ \\midrule[1pt] $ W $\t\u0026amp; 某一小时内该路段运行总收益-总成本 \\\\ $ W_0 $\t\u0026amp; 区分高峰和低峰的一个临界值 \\\\ $ P $\t\u0026amp; 线路在一小时内所有站的总上车人数 \\\\ $ x $\t\u0026amp; 线路在一小时内的车辆数 \\\\ $ T_t $\t\u0026amp; 长期趋势项 \\\\ $ M_t $\t\u0026amp; 简单移动平均项 \\\\ \\bottomrule[1.5pt] \\end{tabular} \\end{center} \\subsection{进阶版} \\begin{lstlisting} \\begin{center} \\begin{tabular}{|c|c|c|c|} \\hline \u0026amp; \\multicolumn{3}{c|}{1} \\\\ \\hline 7 \u0026amp; 5 \u0026amp; \u0026amp; 3 \\\\ \\cline{1-2} \\cline{4-4} 1 \u0026amp; 6 \u0026amp; \\multirow{2}{*}{2} \u0026amp; 8 \\\\ \\cline{1-2} \\cline{4-4} 9 \u0026amp; 2 \u0026amp; \u0026amp; 4 \\\\ \\hline \\end{tabular} \\end{center} \\end{lstlisting} \\begin{center} \\begin{tabular}{|c|c|c|c|} \\hline \u0026amp; \\multicolumn{3}{c|}{1} \\\\ \\hline 7 \u0026amp; 5 \u0026amp; \u0026amp; 3 \\\\ \\cline{1-2} \\cline{4-4} 1 \u0026amp; 6 \u0026amp; \\multirow{2}{*}{2} \u0026amp; 8 \\\\ \\cline{1-2} \\cline{4-4} 9 \u0026amp; 2 \u0026amp; \u0026amp; 4 \\\\ \\hline \\end{tabular} \\end{center} \\begin{lstlisting} \\begin{center} \\begin{tabular}{|c|c|c|c|c|c|c|} \\hline %前两行 \\multicolumn{7}{|c|}{\\multirow{2}{*}{Central Topic} } \\\\ \\multicolumn{7}{|c|}{ } \\\\ \\hline %1 \\multicolumn{2}{|c|}{\\multirow{6}{*}{Main Topic} } \u0026amp; \\multirow{4}{*}{SubTopic} \u0026amp; \\multirow{3}{*}{SubTopic} \u0026amp; \\multirow{2}{*}{SubTopic} \u0026amp; SubTopic \u0026amp; SubTopic \\\\ \\cline{6-7} %2 \\multicolumn{2}{|c|}{ } \u0026amp; \u0026amp; \u0026amp; \u0026amp; SubTopic \u0026amp; SubTopic \\\\ \\cline{5-7} %3 \\multicolumn{2}{|c|}{ } \u0026amp; \u0026amp; \u0026amp; SubTopic \u0026amp; \\multicolumn{2}{c|}{SubTopic} \\\\ \\cline{4-7} %4 \\multicolumn{2}{|c|}{ } \u0026amp; \u0026amp; SubTopic \u0026amp; \\multicolumn{3}{c|}{SubTopic} \\\\ \\cline{3-7} %5 \\multicolumn{2}{|c|}{ } \u0026amp; \\multirow{2}{*}{SubTopic} \u0026amp; \\multirow{2}{*}{SubTopic} \u0026amp; SubTopic \u0026amp; SubTopic \u0026amp; SubTopic \\\\ \\cline{5-7} %6 \\multicolumn{2}{|c|}{ } \u0026amp; \u0026amp; \u0026amp; \\multicolumn{3}{c|}{SubTopic} \\\\ \\hline \\end{tabular} \\end{center} \\end{lstlisting} \\begin{center} \\begin{tabular}{|c|c|c|c|c|c|c|} \\hline %前两行 \\multicolumn{7}{|c|}{\\multirow{2}{*}{Central Topic} } \\\\ \\multicolumn{7}{|c|}{ } \\\\ \\hline %1 \\multicolumn{2}{|c|}{\\multirow{6}{*}{Main Topic} } \u0026amp; \\multirow{4}{*}{SubTopic} \u0026amp; \\multirow{3}{*}{SubTopic} \u0026amp; \\multirow{2}{*}{SubTopic} \u0026amp; SubTopic \u0026amp; SubTopic \\\\ \\cline{6-7} %2 \\multicolumn{2}{|c|}{ } \u0026amp; \u0026amp; \u0026amp; \u0026amp; SubTopic \u0026amp; SubTopic \\\\ \\cline{5-7} %3 \\multicolumn{2}{|c|}{ } \u0026amp; \u0026amp; \u0026amp; SubTopic \u0026amp; \\multicolumn{2}{c|}{SubTopic} \\\\ \\cline{4-7} %4 \\multicolumn{2}{|c|}{ } \u0026amp; \u0026amp; SubTopic \u0026amp; \\multicolumn{3}{c|}{SubTopic} \\\\ \\cline{3-7} %5 \\multicolumn{2}{|c|}{ } \u0026amp; \\multirow{2}{*}{SubTopic} \u0026amp; \\multirow{2}{*}{SubTopic} \u0026amp; SubTopic \u0026amp; SubTopic \u0026amp; SubTopic \\\\ \\cline{5-7} %6 \\multicolumn{2}{|c|}{ } \u0026amp; \u0026amp; \u0026amp; \\multicolumn{3}{c|}{SubTopic} \\\\ \\hline \\end{tabular} \\end{center} \\subsection{使用工具提高效率} \\subsubsection{使用Excel2Latex} 打开工作表→点击文件→选项→加载项 \\begin{figure}[H]%开始引用图片环境，[h]为固定图片，防止图片乱跑 \\centering%使图片居中 %插入图片的命令，[scale]为图片大小，后面跟着图片的路径和名字。也可以使用width和height更改图片的大小 \\includegraphics[width=14cm]{figure/2.png} \\end{figure}%结束引用图片环境 \\begin{figure}[H]%开始引用图片环境，[h]为固定图片，防止图片乱跑 \\centering%使图片居中 %插入图片的命令，[scale]为图片大小，后面跟着图片的路径和名字。也可以使用width和height更改图片的大小 \\includegraphics[width=14cm]{figure/3.png} \\end{figure}%结束引用图片环境 这样就加载进去了，以后也不用再次加载了。 不建议直接把宏直接拖进excle里面，因为office会检测到这是个有害的宏并删除，下次打开excle就要重新加载了。如下图所示： \\begin{figure}[H]%开始引用图片环境，[h]为固定图片，防止图片乱跑 \\centering%使图片居中 %插入图片的命令，[scale]为图片大小，后面跟着图片的路径和名字。也可以使用width和height更改图片的大小 \\includegraphics[width=16cm]{figure/4.png} \\end{figure}%结束引用图片环境 准备工作做好了之后就可以开始操作啦！ \\begin{figure}[H]%开始引用图片环境，[h]为固定图片，防止图片乱跑 \\centering%使图片居中 %插入图片的命令，[scale]为图片大小，后面跟着图片的路径和名字。也可以使用width和height更改图片的大小 \\includegraphics[width=16cm]{figure/5.png} \\end{figure}%结束引用图片环境 代码里会出现\\lstinline{\\bigstrut},需要添加宏包 \\begin{lstlisting} \\usepackage{bigstrut} \\end{lstlisting} \\begin{figure}[H]%开始引用图片环境，[h]为固定图片，防止图片乱跑 \\centering%使图片居中 %插入图片的命令，[scale]为图片大小，后面跟着图片的路径和名字。也可以使用width和height更改图片的大小 \\includegraphics[width=16cm]{figure/6.png} \\end{figure}%结束引用图片环境 \\subsubsection{使用Create LaTeX tables online} \\begin{figure}[H]%开始引用图片环境，[h]为固定图片，防止图片乱跑 \\centering%使图片居中 %插入图片的命令，[scale]为图片大小，后面跟着图片的路径和名字。也可以使用width和height更改图片的大小 \\includegraphics[width=16cm]{figure/7.png} \\end{figure}%结束引用图片环境 编辑表格并导出代码，再加上三线表的模板就好啦！ \\begin{figure}[H]%开始引用图片环境，[h]为固定图片，防止图片乱跑 \\centering%使图片居中 %插入图片的命令，[scale]为图片大小，后面跟着图片的路径和名字。也可以使用width和height更改图片的大小 \\includegraphics[width=15cm]{figure/8.png} \\end{figure}%结束引用图片环境 \\section{代码} \\subsection{添加宏包} \\begin{lstlisting} \\usepackage{listings} \\end{lstlisting} \\subsection{进行代码环境的设置} 添加在cumcmthesis文件里，如果没有这个文件就添加在导言区。目的是使代码块更加美观。 \\begin{lstlisting} \\lstset{numbers=left, %设置行号位置 numberstyle=\\scriptsize, %设置行号大小 keywordstyle=\\color{blue}, %设置关键字颜色 commentstyle=\\color[cmyk]{1,0,1,0}, %设置注释颜色 frame=single, %设置边框格式 escapeinside=``, %逃逸字符(1左面的键)，用于显示中文 breaklines, %自动折行 extendedchars=true, %解决代码跨页时，章节标题，页眉等汉字不显示的问题 xleftmargin=2em,xrightmargin=2em, aboveskip=1em, %设置边距 tabsize=4, %设置tab空格数 showspaces=false %不显示空格 \\end{lstlisting} \\subsection{案例} % \\appendix %添加至\\section{}前 \\begin{lstlisting}[language=MATLAB] function volume %要求用户输入半径 r = input(\u0026#39;输入半径:\u0026#39;) vol = (4/3)*pi*r^3; disp(\u0026#39;体积是：\u0026#39;) disp(vol) \\end{lstlisting} \\section{参考文献} \\subsection{普通方法} 去文献网站点击引用复制粘贴到LaTeX中 \\begin{figure}[H]%开始引用图片环境，[h]为固定图片，防止图片乱跑 \\centering%使图片居中 %插入图片的命令，[scale]为图片大小，后面跟着图片的路径和名字。也可以使用width和height更改图片的大小 \\includegraphics[width=14cm]{figure/9.png} \\end{figure}%结束引用图片环境 \\begin{lstlisting} 引用一篇文章\\textsuperscript{\\cite{bib:1}}%引用方式 \\begin{thebibliography}{9}%宽度9 \\bibitem{bib:1}%bib:1为标签，方便参考文献引用，引用： 苏彦萍,孙晓伟,高汉青,张国峰,吴芹,李园园.指数平滑法模型与ARIMA模型在北京市通州区肺结核流行趋势预测中的效果评价[J].医学动物防制,2023,39(01):8-12. \\end {thebibliography} \\end{lstlisting} 引用一篇文章\\textsuperscript{\\cite{bib:1}}%引用方式 \\begin{thebibliography}{9}%宽度9 \\bibitem{bib:1}%bib:1为标签，方便参考文献引用，引用： 苏彦萍,孙晓伟,高汉青,张国峰,吴芹,李园园.指数平滑法模型与ARIMA模型在北京市通州区肺结核流行趋势预测中的效果评价[J].医学动物防制,2023,39(01):8-12. \\end {thebibliography} \\subsection{自动导入方法} \\subsubsection{添加插件} 配合插件\\href{https://github.com/l0o0/jasminum/releases}{jasminum}运行，之后要更改一下元数据的中英文转化，\\href{https://www.bilibili.com/video/BV1F54y1k73n/?spm_id_from=333.1007.top_right_bar_window_history.content.click\u0026amp;vd_source=8ba9e5ab168044733acb427828b66aee}{Zotero 知网Translator 翻译器教程} 所有的基础设置都设置好就让我们开始吧！ \\subsubsection{用Zotero保存文献} 使用Zotero插件 \\begin{figure}[H]%开始引用图片环境，[h]为固定图片，防止图片乱跑 \\centering%使图片居中 %插入图片的命令，[scale]为图片大小，后面跟着图片的路径和名字。也可以使用width和height更改图片的大小 \\includegraphics[width=16cm]{figure/10.png} \\end{figure}%结束引用图片环境 用茉莉花插件进行优化 \\begin{figure}[H]%开始引用图片环境，[h]为固定图片，防止图片乱跑 \\centering%使图片居中 %插入图片的命令，[scale]为图片大小，后面跟着图片的路径和名字。也可以使用width和height更改图片的大小 \\includegraphics[width=16cm]{figure/11.png} \\end{figure}%结束引用图片环境 \\subsubsection{导出bib文件并添加至LaTeX} 右键点击我的文库→导出文献库 \\begin{figure}[H]%开始引用图片环境，[h]为固定图片，防止图片乱跑 \\centering%使图片居中 %插入图片的命令，[scale]为图片大小，后面跟着图片的路径和名字。也可以使用width和height更改图片的大小 \\includegraphics[width=16cm]{figure/12.png} \\end{figure}%结束引用图片环境 \\newpage 导入bib文件 \\begin{figure}[H]%开始引用图片环境，[h]为固定图片，防止图片乱跑 \\centering%使图片居中 %插入图片的命令，[scale]为图片大小，后面跟着图片的路径和名字。也可以使用width和height更改图片的大小 \\includegraphics[width=16cm]{figure/13.png} \\end{figure}%结束引用图片环境 打开texpage上传文件 \\begin{figure}[H]%开始引用图片环境，[h]为固定图片，防止图片乱跑 \\centering%使图片居中 %插入图片的命令，[scale]为图片大小，后面跟着图片的路径和名字。也可以使用width和height更改图片的大小 \\includegraphics[width=16cm]{figure/14.png} \\end{figure}%结束引用图片环境 @article{}所选的内容就是标签，可以修改自己想要的标签 还有其他的信息都可以进行修改 \\begin{figure}[H]%开始引用图片环境，[h]为固定图片，防止图片乱跑 \\centering%使图片居中 %插入图片的命令，[scale]为图片大小，后面跟着图片的路径和名字。也可以使用width和height更改图片的大小 \\includegraphics[width=16cm]{figure/15.png} \\end{figure}%结束引用图片环境 \\begin{lstlisting} \\bibliographystyle{unsrt} %导入的参考文献风格 %LaTeX 参考文献标准选项及其样式共有以下8种： % plain，按字母的顺序排列，比较次序为作者、年度和标题. % unsrt，样式同plain，只是按照引用的先后排序. % alpha，用作者名首字母+年份后两位作标号，以字母顺序排序. % abbrv，类似plain，将月份全拼改为缩写，更显紧凑. % ieeetr，国际电气电子工程师协会期刊样式. 这个比较合适 % acm，美国计算机学会期刊样式. % siam，美国工业和应用数学学会期刊样式. % apalike，美国心理学学会期刊样式. 引用一篇文章\\textsuperscript{\\cite{LSTM的能量预测算法}} 引用另一篇文章\\textsuperscript{\\cite{ARIMA组合模型}} \\bibliography{book} %bib文件名 \\end{document} \\end{lstlisting} 引用一篇文章\\textsuperscript{\\cite{LSTM的能量预测算法}} 引用另一篇文章\\textsuperscript{\\cite{ARIMA组合模型}} \\bibliography{book} %bib文件名 \\end{document} ","date":"19 October 2023","permalink":"/latex/latex%E8%AF%AD%E6%B3%95/","section":"Latices","summary":"\\PassOptionsToPackage{quiet}{fontspec} %在document{}前加上就可以解决啦！简单暴力! \\documentclass[withoutpreface,bwprint]{cumcmthesis} %去掉封面与编号页 \\usepackage{ctex} \\usepackage{multicol} \\usepackage{amsmath} \\usepackage{amssymb} \\usepackage{mathrsfs} \\usepackage{graphics} \\usepackage{subfigure} \\usepackage{float} \\usepackage{booktabs} \\usepackage{color} \\usepackage{xcolor} \\usepackage{listings} \\bibliographystyle{unsrt} %导入的参考文献风格 \\usepackage{hyperref} \\usepackage[utf8]{inputenc} \\usepackage[T1]{fontenc} %改变颜色 \\hypersetup{ colorlinks=true, linkcolor=blue, filecolor=blue, urlcolor=blue, citecolor=cyan, } \\title{\\LaTeX 教学} \\author{陈创禧} %正文区 \\begin{document} \\maketitle \\section*{序言} Word 的“所见即所得”是一种幻觉。大家都觉得很方便，但是要排版出一篇精美的了论文难度却很大。图片表格经常且不说乱飞，编辑公式的时候，头都大了。有想删除Office的冲动!","title":"Latex语法"},{"content":"","date":"19 October 2023","permalink":"/latex/","section":"Latices","summary":"","title":"Latices"},{"content":"","date":"19 October 2023","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":"19 October 2023","permalink":"/","section":"春江花朝秋月夜","summary":"","title":"春江花朝秋月夜"},{"content":"\r概述 # JVM是模拟物理机实现的将javac编译为.class文件，jvm支持平台无关性。 class文件通过类加载器-》解释器-》硬件沟通\nJvm基于HotSpot虚拟机架构同时也是基于栈实现的。与C语言不同，不同架构的操作系统编译输出的文件不同，jvm编译后产生的 文件完全相同。\n由于执行一段程序需要不断地编译和反编译，将热点执行的代买柜内为热点代码再转换为机器码提高执行效率。同时jdk1.2之后支持使用JNI来 调用C/C++代码提升代码执行效率\n指令 # 基本数据结构：堆栈+队列\n常见的编译命令：\njavap -g :vars xxx.java\n反编译： javap -v .class文件地址\n反编译后的代码栈顶元素作为操作数，当需要保存变量的时候，进入队列\n部分变量某些关键字无法保存将会保存到常量池里面。例如bipush只支持单字节数据\n环境部署 # Linux下下载相关依赖\nsudo yum install build-essential libxrender-dev xorg-dev libasound2-dev libcups2-dev gawk zip libxtst-dev libxi-dev libxt-dev gobjc gcc 环境：\nmake\njdk环境：open-jdk8\nLinux下编译结果：\n编译Hello World：\n手动编译jdk8部分 # JVM内存管理 # C/C++开发中，我们经常通过使用申请内存的方式来创建对象或是存放某些数据，但是这样也带来了一些额外的问题，我们要在何时释放这些内存，怎么才能使得内存的使用最高效，因此，内存管 理是一个非常严肃的问题。\n#include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; int main(){ //动态申请4个int大小的内存空间 int* memory = malloc(sizeof(int) * 4); //修改第一个int空间的值 memory[0] = 10; //修改第二个int空间的值 memory[1] = 2; //遍历内存区域中所有的值 for (int i = 0;i \u0026lt; 4;i++){ printf(\u0026#34;%d \u0026#34;, memory[i]); } //释放指针所指向的内存区域 free(memory); //最后将指针赋值为NULL memory = NULL; } 一旦出现内存问题，我们就无法像C/C++那样对所管理的内存进行合理地处理，因为所有的内存操作都是由JVM在进行，只有了解了JVM的内存管理机制，我们才能够在出现内存相关问题时找到解决方案。\nJNI # 调用本地方法，调用C语言，关键字native,通过静态代码块调用C/C++的实现部分\npublic static void main(String[] args) { System.out.println(sum(1,2)); } private static native int sum(int a, int b);//原生的方法不可以具有函数实现 内存区域划分\n内存区域划分为：方法区（线程共享），堆（线程共享），虚拟机栈，本地方法栈，程序计数器 方法区和堆栈随JVM生消，虚拟机栈，本地方法栈，程序计数器不共享彼此 创新作业：40页创新计划书，电子档2份，纸质档1份 商业模式和团队，按照第8章和第7章模式，12周周五交-\u0026gt;老师办公室\n程序计数器 ：作为内存地址，每个地址指向下一条即将指令执行，自动更新，在jvm字节码解释器工作时改变时改变值确定指令位置 public static void main(String[] args) { System.out.println(sum(1,2)); }\nprivate static native int sum(int a, int b);//原生的方法不可以具有函数实现\n虚拟机栈 （关键部分），内次当java虚拟机创建的时候即可同步一个栈帧（栈里面的元素），栈帧包含了当前方法的一些元素信息：（局部变量表，操作数栈，动态链接，方法出口）\n虚拟机栈 # 每个栈帧保存一个可以指向当前方法所在类 的常量池，目的是：当前方法8中如果需要调用其他方法的时候，能够从运行时常量池中找到对应的符号引用，然后将符号引用转换为直接引用， 然后就能直接调用对应方法，这就是动态链接\n在虚拟机栈里面执行的行为就是对方法不断压栈出栈的过程，只有当所有方法出栈之后才可以执行主函数栈\n堆 # 作为虚拟机中最大的一块内存空间，区域职责是作为存放对象和数组，垃圾回收器也作用于此\n方法区（重点） # 所有程序共享区域，存储类信息，静态变量，动态编译缓存部分，分为两大部分：类信息表+运行时常量池 编译生成的常量也可以加入常量池里面。\n面试题：String的常量池，常量池优化\nString a=\u0026ldquo;I am a student\u0026rdquo;; // String b=\u0026ldquo;I am a student\u0026rdquo;; // String a=new String(\u0026ldquo;I am a student\u0026rdquo;); // String b=new String(\u0026ldquo;I am a student\u0026rdquo;); String a=new String(\u0026ldquo;I am \u0026ldquo;)+new String(\u0026ldquo;a student\u0026rdquo;); String b=new String(\u0026ldquo;I am \u0026ldquo;)+new String(\u0026ldquo;a student\u0026rdquo;); System.out.println(a.intern()==b.intern()); System.out.println(a.equals(b));\nnew方式 # public static void main(String[] args) { String str1 = new String(\u0026#34;abc\u0026#34;); String str2 = new String(\u0026#34;abc\u0026#34;); System.out.println(str1 == str2); System.out.println(str1.equals(str2)); } %使用==判断时，比较地址得到的结果false %而使用equals时因为比较的是值，所以得到true 直接方式 # public static void main(String[] args) { String str1 = \u0026#34;abc\u0026#34;; String str2 = \u0026#34;abc\u0026#34;; System.out.println(str1 == str2); System.out.println(str1.equals(str2)); } %是因为我们直接使用双引号赋值 %会先在常量池中查找是否存在相同的字符串，若存在，则将引用直接指向该字符串； %若不存在，则在常量池中生成一个字符串，再将引用指向该字符串： intern方法(native方法。底层实现是C++) # public static void main(String[] args) { //不能直接写\u0026#34;abc\u0026#34;，双引号的形式，写了就直接在常量池里面吧abc创好了 String str1 = new String(\u0026#34;ab\u0026#34;)+new String(\u0026#34;c\u0026#34;); String str2 = new String(\u0026#34;ab\u0026#34;)+new String(\u0026#34;c\u0026#34;); System.out.println(str1.intern() == str2.intern()); System.out.println(str1.equals(str2)); } （线程独有）程序计数器：保存当前程序的执行位置。 （线程独有）虚拟机栈：通过栈帧，多线程里面的markword就维护在这里， 来维持方法调用顺序，帮助控制程序有序运行。 （线程独有）本地方法栈：同上，作用与本地方法。 堆：所有的对象和数组都在这里保存。 方法区：类信息、即时编译器的代码缓存、运行时常量池。 内存爆炸和爆栈 # int[]arr=new int[Integer.MAX_VALUE]; 下面来个重磅的哈哈，直接爆栈4个G\nstatic class Test{ } public static void main(String[] args) { List\u0026lt;Test\u0026gt; list = new ArrayList\u0026lt;\u0026gt;(); while (true){ list.add(new Test()); //无限创建Test对象并丢进List中 } } 好家伙，我这里直接new了一亿个Test对象 虚拟机栈是有限制的，无线递归压栈将会导致虚拟机栈爆炸\n申请堆外内存 # Field unsafe= Unsafe.class.getDeclaredFields()[0]; unsafe.setAccessible(true); Unsafe unsafe1= (Unsafe) unsafe.get(null); //申请内存空间 long memory = unsafe1.allocateMemory(4); unsafe1.putChar(22,\u0026#39;c\u0026#39;); System.out.println(unsafe1.getAddress(22)); System.out.println(memory); ","date":"12 October 2023","permalink":"/%E8%99%9A%E6%8B%9F%E6%9C%BA/jvm/","section":"虚拟机s","summary":"概述 # JVM是模拟物理机实现的将javac编译为.class文件，jvm支持平台无关性。 class文件通过类加载器-》解释器-》硬件沟通\nJvm基于HotSpot虚拟机架构同时也是基于栈实现的。与C语言不同，不同架构的操作系统编译输出的文件不同，jvm编译后产生的 文件完全相同。\n由于执行一段程序需要不断地编译和反编译，将热点执行的代买柜内为热点代码再转换为机器码提高执行效率。同时jdk1.2之后支持使用JNI来 调用C/C++代码提升代码执行效率\n指令 # 基本数据结构：堆栈+队列\n常见的编译命令：\njavap -g :vars xxx.java\n反编译： javap -v .class文件地址\n反编译后的代码栈顶元素作为操作数，当需要保存变量的时候，进入队列\n部分变量某些关键字无法保存将会保存到常量池里面。例如bipush只支持单字节数据\n环境部署 # Linux下下载相关依赖\nsudo yum install build-essential libxrender-dev xorg-dev libasound2-dev libcups2-dev gawk zip libxtst-dev libxi-dev libxt-dev gobjc gcc 环境：","title":"Jvm"},{"content":"","date":"12 October 2023","permalink":"/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/","section":"Tags","summary":"","title":"虚拟机"},{"content":"","date":"12 October 2023","permalink":"/%E8%99%9A%E6%8B%9F%E6%9C%BA/","section":"虚拟机s","summary":"","title":"虚拟机s"},{"content":"","date":"12 October 2023","permalink":"/vhdl/","section":"Vhdls","summary":"","title":"Vhdls"},{"content":"\r有限状态机 # 寄存器和组合时序逻辑电路构成硬件时序逻辑电路\n特点：只能在时钟沿发生跳变时才能完成状态转移，状态机可以在时钟跳变时完成复杂的任务。\n状态机的结构 # 状态寄存器由一组寄存器构成,n个寄存器可存储2^n个状态\n输出取决于状态和输入时，这样的状态机称为Mealy状态机，只和当前状态有关的称为Moore状态机\n描述有限状态机的方法： always语句和case语句\n","date":"12 October 2023","permalink":"/vhdl/%E7%8A%B6%E6%80%81%E6%9C%BA/","section":"Vhdls","summary":"有限状态机 # 寄存器和组合时序逻辑电路构成硬件时序逻辑电路\n特点：只能在时钟沿发生跳变时才能完成状态转移，状态机可以在时钟跳变时完成复杂的任务。\n状态机的结构 # 状态寄存器由一组寄存器构成,n个寄存器可存储2^n个状态\n输出取决于状态和输入时，这样的状态机称为Mealy状态机，只和当前状态有关的称为Moore状态机\n描述有限状态机的方法： always语句和case语句","title":"状态机"},{"content":"","date":"12 October 2023","permalink":"/tags/%E7%A1%AC%E4%BB%B6%E8%AF%AD%E8%A8%80/","section":"Tags","summary":"","title":"硬件语言"},{"content":"","date":"10 October 2023","permalink":"/tasks/","section":"Tasks","summary":"","title":"Tasks"},{"content":"\r希望会完成，南无阿弥陀佛🥲🥲🥲 # 1:主线学习内容，消息队列，操作系统，计算机网络（理论），分布式微服务，安全框架（Spring-Security)\n2:支线学习内容，了解csrf跨域问题，RBAC权限控制，防XSS攻击，JVM虚拟机，oauth2第三方登录（微信登录这块），ElasticSearch搜索引擎（ELK）。Zookeeper,Dubbo。容器技术Docker，K8s。\n3：深入了解（底层）：Redis底层数据结构与实现，Redis集群，哨兵模式，Redis协议，Mysql隔离级别，日志，锁，事务\n学习内容 计划日期 是否完成 延期 Redis黑马点评项目完结 这学期 ✔️ ❌ 消息队列 这学期 ❌ ❌ SpringSecurity安全框架 这学期 ✔️ ❌ Redis底层 这学期 ❌ ❌ ","date":"10 October 2023","permalink":"/tasks/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/","section":"Tasks","summary":"\r希望会完成，南无阿弥陀佛🥲🥲🥲 # 1:主线学习内容，消息队列，操作系统，计算机网络（理论），分布式微服务，安全框架（Spring-Security)\n2:支线学习内容，了解csrf跨域问题，RBAC权限控制，防XSS攻击，JVM虚拟机，oauth2第三方登录（微信登录这块），ElasticSearch搜索引擎（ELK）。Zookeeper,Dubbo。容器技术Docker，K8s。\n3：深入了解（底层）：Redis底层数据结构与实现，Redis集群，哨兵模式，Redis协议，Mysql隔离级别，日志，锁，事务\n学习内容 计划日期 是否完成 延期 Redis黑马点评项目完结 这学期 ✔️ ❌ 消息队列 这学期 ❌ ❌ SpringSecurity安全框架 这学期 ✔️ ❌ Redis底层 这学期 ❌ ❌ ","title":"学习计划"},{"content":"","date":"10 October 2023","permalink":"/tags/%E8%A7%84%E5%88%92/","section":"Tags","summary":"","title":"规划"},{"content":"","date":"9 October 2023","permalink":"/java/","section":"Javas","summary":"","title":"Javas"},{"content":"","date":"9 October 2023","permalink":"/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/","section":"Tags","summary":"","title":"并发编程"},{"content":"\r线程池 # new Thread缺点：频繁创建和销毁，浪费了线程资源，短时间创建大量线程和销毁 线程池是有限可重复使用的线程，用完需要归还\n//构造方法，含有七个参数 public ThreadPoolExecutor(int corePoolSize,//核心线程池大小 int maximumPoolSize,//最大线程池大小 long keepAliveTime,//线程最大空闲时间 TimeUnit unit,//最大空闲时间单位 BlockingQueue\u0026lt;Runnable\u0026gt; workQueue//线程等待队列，当超出最大容量时，任务进入等待队列) { this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, Executors.defaultThreadFactory(),//线程创建工厂，可自定义 defaultHandler//拒绝策略，实在不能加入新的任务时，拒绝任务); } 根据CPU类型分配线程池大小 # ThreadPoolExecutor # public static void main(String[] args) throws InterruptedException { ThreadPoolExecutor executor = new ThreadPoolExecutor(2, 4, //2个核心线程，最大线程数为4个 3, TimeUnit.SECONDS, //最大空闲时间为3秒钟 new ArrayBlockingQueue\u0026lt;\u0026gt;(2)); //这里使用容量为2的ArrayBlockingQueue队列 for (int i = 0; i \u0026lt; 6; i++) { //开始6个任务 int finalI = i; executor.execute(() -\u0026gt; { try { System.out.println(Thread.currentThread().getName()+\u0026#34; 开始执行！（\u0026#34;+ finalI); TimeUnit.SECONDS.sleep(1); System.out.println(Thread.currentThread().getName()+\u0026#34; 已结束！（\u0026#34;+finalI); } catch (InterruptedException e) { e.printStackTrace(); } }); } TimeUnit.SECONDS.sleep(1); //看看当前线程池中的线程数量 System.out.println(\u0026#34;线程池中线程数量：\u0026#34;+executor.getPoolSize()); TimeUnit.SECONDS.sleep(5); //等到超过空闲时间 System.out.println(\u0026#34;线程池中线程数量：\u0026#34;+executor.getPoolSize()); executor.shutdownNow(); //使用完线程池记得关闭，不然程序不会结束，它会取消所有等待中的任务以及试图中断正在执行的任务，关闭后，无法再提交任务，一律拒绝 //executor.shutdown(); 同样可以关闭，但是会执行完等待队列中的任务再关闭 } } ArrayBlockingQueue # 作为有界的阻塞队列，具有响应的容量，可以自行设置，对比SynchronousQueue没有容量，选这个会出现爆栈的问题，原因 是线程池ThreadPoolExecutor发现容量超出时会poll线程，但SynchronousQueue没有容量poll无意义。 在线程池里面的等待队列需要具有容量。\n线程池的拒绝策略 # 线程池超过最大的容量时，需要拒绝这个任务。\nAbortPolicy(default): 直接抛异常 CallerRunsPolicy: 直接让提交任务的线程运行这个任务，如果向主线程提交了任务就让主线程去执行这个任务，谁提交谁执行 DiscardOldestPolicy: 丢弃队列中最近的任务，替换为当前任务 DiscardPolicy: Do nothing 自定义拒绝策略和线程生产工厂 任务过程出现异常，线程池当中执行任务时发生异常，线程将会自动销毁\nExecutorService # 可以使用Executors工具类来快速创建线程池：\nExecutorService executor = Executors.newFixedThreadPool(2); //直接创建一个固定容量的线程池 ExecutorService本质内部实现其实是ThreadPoolExecutor，所以创建的线程都不是核心线程\n//内部实现 public static ExecutorService newFixedThreadPool(int nThreads) { return new ThreadPoolExecutor(nThreads, nThreads, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue\u0026lt;Runnable\u0026gt;()); } 直接将最大线程和核心线程数量设定为一样的，并且等待时间为0，因为压根不需要，并且采用的是一个无界的LinkedBlockingQueue作为等待队列。\n//创建单个线程 public static ExecutorService newSingleThreadExecutor() { return new FinalizableDelegatedExecutorService (new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue\u0026lt;Runnable\u0026gt;())); } 这里并不是直接创建的一个ThreadPoolExecutor对象，而是套了一层FinalizableDelegatedExecutorService，目的是内部套了一层，外部不可见，不可修改，保证安全性\n由于executorService内部直接最大容量为Integer.\tMAX_VALUE,非常大，不安全\nnewCachedThreadPool # 注意生成的线程池里面都不是核心线程，同时最大容量非常大，需要慎用\n执行带返回值的任务： # ExecutorService执行任务有两种方法：submit和execute\n接受返回值的只有submit\npublic static void main(String[] args) throws InterruptedException, ExecutionException { ExecutorService executorService=Executors.newSingleThreadExecutor(); Future\u0026lt;String\u0026gt; future= executorService.submit(()-\u0026gt;{ TimeUnit.SECONDS.sleep(3); return \u0026#34;你好世界\u0026#34;; }); System.out.println(future.cancel(true));//取消任务，这时候里面的字串将不会再返回出来 executorService.shutdown(); System.out.println(future.get()); } 定时任务ScheduledThreadPoolExecutor # ScheduledThreadPoolExecutor executor=new ScheduledThreadPoolExecutor(1); // executor.schedule(()-\u0026gt; System.out.println(\u0026#34;开始定时任务\u0026#34;),3,TimeUnit.SECONDS); // ScheduledFuture\u0026lt;String\u0026gt; scheduledFuture=executor.schedule(()-\u0026gt; \u0026#34;开始定时任务\u0026#34;,3,TimeUnit.SECONDS); // System.out.println(scheduledFuture.isDone()); //固定频率进行定时计划： executor.scheduleAtFixedRate(()-\u0026gt; System.out.println(\u0026#34;hello!\u0026#34;),3,1,TimeUnit.SECONDS); // executor.shutdown(); 线程延迟线程池：ScheduledWithFixedDelay protected void finalize() { //在GC时，会执行finalize方法，此方法中会关闭掉线程池，释放资源 super.shutdown(); } 线程池实现原理 # //这个就是我们指定的阻塞队列 private final BlockingQueue\u0026lt;Runnable\u0026gt; workQueue; //再次提醒，这里没加锁！！该有什么意识不用我说了吧，所以说ctl才会使用原子类。 public void execute(Runnable command) { if (command == null) throw new NullPointerException(); //如果任务为null，那执行个寂寞，所以说直接空指针 int c = ctl.get(); //获取ctl的值，一会要读取信息的 if (workerCountOf(c) \u0026lt; corePoolSize) { //判断工作线程数量是否小于核心线程数 if (addWorker(command, true)) //如果是，那不管三七二十一，直接加新的线程执行，然后返回即可 return; c = ctl.get(); //如果线程添加失败（有可能其他线程也在对线程池进行操作），那就更新一下c的值 } if (isRunning(c) \u0026amp;\u0026amp; workQueue.offer(command)) { //继续判断，如果当前线程池是运行状态，那就尝试向阻塞队列中添加一个新的等待任务 int recheck = ctl.get(); //再次获取ctl的值 if (! isRunning(recheck) \u0026amp;\u0026amp; remove(command)) //这里是再次确认当前线程池是否关闭，如果添加等待任务后线程池关闭了，那就把刚刚加进去任务的又拿出来 reject(command); //然后直接拒绝当前任务的提交（会根据我们的拒绝策略决定如何进行拒绝操作） else if (workerCountOf(recheck) == 0) //如果这个时候线程池依然在运行状态，那么就检查一下当前工作线程数是否为0，如果是那就直接添加新线程执行 addWorker(null, false); //添加一个新的非核心线程，但是注意没添加任务 //其他情况就啥也不用做了 } else if (!addWorker(command, false)) //这种情况要么就是线程池没有运行，要么就是队列满了，按照我们之前的规则，核心线程数已满且队列已满，那么会直接添加新的非核心线程，但是如果已经添加到最大数量，这里肯定是会失败的 reject(command); //确实装不下了，只能拒绝 } addWorker实现 # private boolean addWorker(Runnable firstTask, boolean core) { //这里给最外层循环打了个标签，方便一会的跳转操作 retry: for (;;) { //无限循环，老套路了，注意这里全程没加锁 int c = ctl.get(); //获取ctl值 int rs = runStateOf(c); //解析当前的运行状态 // Check if queue empty only if necessary. if (rs \u0026gt;= SHUTDOWN \u0026amp;\u0026amp; //判断线程池是否不是处于运行状态 ! (rs == SHUTDOWN \u0026amp;\u0026amp; //如果不是运行状态，判断线程是SHUTDOWN状态并、任务不为null、等待队列不为空，只要有其中一者不满足，直接返回false，添加失败 firstTask == null \u0026amp;\u0026amp; ! workQueue.isEmpty())) return false; for (;;) { //内层又一轮无限循环，这个循环是为了将线程计数增加，然后才可以真正地添加一个新的线程 int wc = workerCountOf(c); //解析当前的工作线程数量 if (wc \u0026gt;= CAPACITY || wc \u0026gt;= (core ? corePoolSize : maximumPoolSize)) //判断一下还装得下不，如果装得下，看看是核心线程还是非核心线程，如果是核心线程，不能大于核心线程数的限制，如果是非核心线程，不能大于最大线程数限制 return false; if (compareAndIncrementWorkerCount(c)) //CAS自增线程计数，如果增加成功，任务完成，直接跳出继续 break retry; //注意这里要直接跳出最外层循环，所以用到了标签（类似于goto语句） c = ctl.get(); // 如果CAS失败，更新一下c的值 if (runStateOf(c) != rs) //如果CAS失败的原因是因为线程池状态和一开始的不一样了，那么就重新从外层循环再来一次 continue retry; //注意这里要直接从最外层循环继续，所以用到了标签（类似于goto语句） // 如果是其他原因导致的CAS失败，那只可能是其他线程同时在自增，所以重新再来一次内层循环 } } //好了，线程计数自增也完了，接着就是添加新的工作线程了 boolean workerStarted = false; //工作线程是否已启动 boolean workerAdded = false; //工作线程是否已添加 Worker w = null; //暂时理解为工作线程，别急，我们之后会解读Worker类 try { w = new Worker(firstTask); //创建新的工作线程，传入我们提交的任务 final Thread t = w.thread; //拿到工作线程中封装的Thread对象 if (t != null) { //如果线程不为null，那就可以安排干活了 final ReentrantLock mainLock = this.mainLock; //又是ReentrantLock加锁环节，这里开始就是只有一个线程能进入了 mainLock.lock(); try { // Recheck while holding lock. // Back out on ThreadFactory failure or if // shut down before lock acquired. int rs = runStateOf(ctl.get()); //获取当前线程的运行状态 if (rs \u0026lt; SHUTDOWN || (rs == SHUTDOWN \u0026amp;\u0026amp; firstTask == null)) { //只有当前线程池是正在运行状态，或是SHUTDOWN状态且firstTask为空，那么就继续 if (t.isAlive()) // 检查一下线程是否正在运行状态 throw new IllegalThreadStateException(); //如果是那肯定是不能运行我们的任务的 workers.add(w); //直接将新创建的Work丢进 workers 集合中 int s = workers.size(); //看看当前workers的大小 if (s \u0026gt; largestPoolSize) //这里是记录线程池运行以来，历史上的最多线程数 largestPoolSize = s; workerAdded = true; //工作线程已添加 } } finally { mainLock.unlock(); //解锁 } if (workerAdded) { t.start(); //启动线程 workerStarted = true; //工作线程已启动 } } } finally { if (! workerStarted) //如果线程在上面的启动过程中失败了 addWorkerFailed(w); //将w移出workers并将计数器-1，最后如果线程池是终止状态，会尝试加速终止线程池 } return workerStarted; //返回是否成功 } 并发工具类 # 计数器锁（CountDownLatch） # 多任务同步神器。它允许一个或多个线程，等待其他线程完成工作,典型应用场景：多个线程分段相加最后统计所有线程的和\n要实现这个需求，那么有一个很麻烦的地方，我们不知道任务到底什么时候执行完毕，那么可否将最终统计延迟一定时间进行呢？但是最终统计无论延迟多久进行， 要么不能保证所有任务都完成，要么可能所有任务都完成了而这里还在等。\npublic static void main(String[] args) throws InterruptedException { CountDownLatch latch=new CountDownLatch(20); for (int i = 0; i \u0026lt; 20; i++) { int finalI=i; new Thread(()-\u0026gt;{ try { Thread.sleep((long) (2000 * new Random().nextDouble())); System.out.println(\u0026#34;任务\u0026#34;+finalI+\u0026#34;完成\u0026#34;); }catch (InterruptedException e){ e.printStackTrace(); } latch.countDown(); //每执行一次计数器都会-1 }).start(); } //开始等待所有的线程完成，当计数器为0时，恢复运行 latch.await(); //这个操作可以同时被多个线程执行，一起等待，这里只演示了一个 System.out.println(\u0026#34;所有子任务都完成！任务完成！！！\u0026#34;); } 例子： 用四个线程实现对1到10000完成累计加和\npublic static void main(String[] args) throws InterruptedException { long begin=System.currentTimeMillis(); CountDownLatch latch=new CountDownLatch(4); int res[]=new int[4]; for (int i = 0; i \u0026lt; 4; i++) { int finalI=i; new Thread(()-\u0026gt;{ int sum=0; int numbersPerThread = (int) Math.ceil((double) 100/ 4); int startNumber = finalI * numbersPerThread + 1; int endNumber = (finalI + 1) * numbersPerThread; for (int j =startNumber ; j \u0026lt;=endNumber; j++) { sum+=j; } System.out.println(sum); res[finalI]=sum; latch.countDown(); //每执行一次计数器都会-1 }).start(); } //开始等待所有的线程完成，当计数器为0时，恢复运行 latch.await(); //这个操作可以同时被多个线程执行，一起等待，这里只演示了一个 int result=0; for (Integer integer:res) { result+=integer; } long end=System.currentTimeMillis(); System.out.println(\u0026#34;所有子任务都完成！任务完成,结果是\u0026#34;+result+\u0026#34;花费时间：\u0026#34;+(end-begin)+\u0026#34;ms\u0026#34;); } 实现效果： 共享锁是线程共享的，同一时刻能有多个线程拥有共享锁。 如果一个线程刚获取了共享锁，那么在其之后等待的线程也很有可能能够获取到锁，所以得传播下去继续尝试唤醒后面的结点，不像独占锁，独占的压根不需要考虑这些。 如果一个线程刚释放了锁，不管是独占锁还是共享锁，都需要唤醒后续等待结点的线程。 实现原理：\n在工具构建的时候创建多个共享锁，调用countDown（）调用时就可以减去一把锁，当state减为0时即可获取共享锁，实现方式是通过 链表向后继节点一个个从等待状态唤醒\n循环屏障CyclicBarrier # 循环屏障会不断阻挡线程，直到被阻挡的线程足够多时，才能一起冲破屏障，并且在 冲破屏障时，我们也可以做一些其他的任务。这和人多力量大的道理是差不多的，当人足够多时方能冲破阻碍， 到达美好的明天。当然，屏障由于是可循环的，所以它在被冲破后，会重新开始计数，继续阻挡后续的线程：\nCyclicBarrier barrier = new CyclicBarrier(5); //创建一个初始值为5的循环屏障 屏障最大容量：parties 特点：等待线程冲破阻碍的时候才可以 一起完成任务，完成任务之后继续等待，直到下一次达到最大值 。\n当await状态下的线程被中断，屏障将会被破坏，这一轮不能使用，除非重新开始\n信号量 Semaphore # 限制信号容量，在一段任务中，要求 只能部分线程完成这段工作的时候完成\n线程之间进行数据交换 Exchanger # 实现两个线程之间进行数据交换的通信，只有当两个线程完成交换之后才可以完成任务，否则线程阻塞。\nFork/Join框架 # ForkJoinPool pool = new ForkJoinPool();\nfork指的是划分任务，任务约分越细 join指的是加入任务，任务开始执行 END # ","date":"9 October 2023","permalink":"/java/%E5%B9%B6%E5%8F%91/%E5%B9%B6%E5%8F%91%E8%BF%9B%E9%98%B6/","section":"Javas","summary":"线程池 # new Thread缺点：频繁创建和销毁，浪费了线程资源，短时间创建大量线程和销毁 线程池是有限可重复使用的线程，用完需要归还\n//构造方法，含有七个参数 public ThreadPoolExecutor(int corePoolSize,//核心线程池大小 int maximumPoolSize,//最大线程池大小 long keepAliveTime,//线程最大空闲时间 TimeUnit unit,//最大空闲时间单位 BlockingQueue\u0026lt;Runnable\u0026gt; workQueue//线程等待队列，当超出最大容量时，任务进入等待队列) { this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, Executors.defaultThreadFactory(),//线程创建工厂，可自定义 defaultHandler//拒绝策略，实在不能加入新的任务时，拒绝任务); } 根据CPU类型分配线程池大小 # ThreadPoolExecutor # public static void main(String[] args) throws InterruptedException { ThreadPoolExecutor executor = new ThreadPoolExecutor(2, 4, //2个核心线程，最大线程数为4个 3, TimeUnit.","title":"并发进阶"},{"content":"\rJava 并发编程 # 轻量级锁： # 检查当前对象的mark word是否有被其他线程占用，假如没有就会在当前栈帧里面建立一个 锁记录，复制并存储当前对象的mark word 信息。\n不像重量级锁需要向系统申请互斥量，\nCAS（无锁算法） # 显然，当cas失败的时候，说明有线程进入了这个同步代码块，这个时候，虚拟机将会检查 当前对象的mark word是否指向当前对象的栈帧，是的话就说明当前已经获得锁，否则不是-》退化为重量级锁(不可逆) 解锁时，同样使用CAS算法操作，同时唤醒挂起的线程\n偏向锁 # 当某个锁频繁的被同一个线程获取，对轻量级锁进行优化，所以偏向锁专门为单个线程服务，此时，无须再进行CAS操作，当其他线程 又开始抢锁，偏向锁可能退化为轻量级锁。注意当调用对象的hashCode（）方法，由于mark word 数据结构无法 保存hash值，偏向锁直接退化为轻量级锁。\n锁的退化不可逆\n锁消除和锁优化 # 代码块中有可能不会总是出现请求锁和释放锁的问题，（比如循环中加锁），此时锁为了优化出现锁消除和锁优化\nJava内存模型（JMM） # 主内存： 存放对象实例的部分 工作内存：虚拟机栈的部分，放入cpu的高速缓存里面。 自增操作不是由一个指令实现的！！！包括获取，修改和保存\nclass Test{ private static volatile int sum=0;//成员变量,这样的变量必须是当前的对象所拥有的 //加入了volatile关键字之后，线程之间可以感知彼此的值 @Test void LockTestAdd() throws InterruptedException { //没有加锁的时候，由于线程之间不能感知对方的值，最终结构可能不会是200 Thread th1 = new Thread(() -\u0026gt; { for (int i = 0; i \u0026lt; 100; i++) sum++; }); Thread th2 = new Thread(() -\u0026gt; { for (int i = 0; i \u0026lt; 100; i++) sum++; }); th1.start(); th2.start(); Thread.sleep(100); System.out.println(sum); } } 重排序 # 由于JVM虚拟机和编译器的优化，指令可能出现重排序，在这种情况下可能出现不符合预期的情况\nvolatile关键字（无法保证原子性，但能保证可见性） # load和save操作，将主内存中的变量拷贝到本地，只对本地变量进行操作。\nvolatile实现原理就是改变成员变量时，save的工作区的变量无效。重新更新主内存中的变量值， volatile关键字会禁止指令重排序。\nclass VolatileTest{ private static volatile int sum=0;//成员变量,这样的变量必须是当前的对象所拥有的 //加入了volatile关键字之后，线程之间可以感知彼此的值,但还是无法保证原子性操作，不能达到预期效果 @Test void LockTestAdd() throws InterruptedException { //没有加锁的时候，由于线程之间不能感知对方的值，最终结构可能不会是200 Thread th1 = new Thread(() -\u0026gt; { for (int i = 0; i \u0026lt; 1000; i++) sum++; }); Thread th2 = new Thread(() -\u0026gt; { for (int i = 0; i \u0026lt; 1000; i++) { sum++; } }); th1.start(); th2.start(); Thread.sleep(100); System.out.println(sum); } } JVM编译器下面的顺序执行：\nHappens Before 原则（之前的对之后的可见） # 程序次序规则，监视器锁原则，volatile关键字原则（写操作在读操作之前），\nstart(线程启动规则) # A线程用start调用B线程，那么A在B之前（A happens before B）\njoin线程加入规则 # A线程join线程B，那么B在A之前（B happens before A）\n程和线程的区别 # 程序软件 \u0026gt; 进程 \u0026gt; 线程\n锁的框：Lock # 为了代替传统的synchronized,notify,wait,notifyAll关键字，Lock接口-\u0026gt;ReentrantLock可重入锁\n可重入锁（排他锁） # 多次加锁，其他线程想要得到锁需要把多次的锁释放才可以获取这把锁\n当存在线程想要获取锁但是锁没有释放的时候，此时这些线程将会进入线程队列里面\n公平锁和非公平锁（AQS） # 公平锁始终保持先到先得到锁，非公平锁则是在等待队列中所有等待线程同时尝试获取锁，获取不到则再次进入等待队列\nReentrantLock lock=new ReentrantLock(false);//公平锁不一定总是保持公平。队列同步器 Runnable runnable=()-\u0026gt;{ System.out.println(Thread.currentThread().getName() + \u0026#34;开始尝试获取锁资源\u0026#34;); lock.lock(); System.out.println(Thread.currentThread().getName() + \u0026#34;成功😺😺😺😺😺😺😺😺😺获取锁资源\u0026#34;); lock.unlock(); }; for (int i = 0; i \u0026lt; 10; i++) { new Thread(runnable,\u0026#34;T\u0026#34;+i).start(); } 读写锁： # 除了可重入锁之外，还有一种类型的锁叫做读写锁，当然它并不是专门用作读写操作的锁， 它和可重入锁不同的地方在于，可重入锁是一种排他锁，当一个线程得到锁之后，另一个线程必须等待其释放锁，否则一律不允许获取到锁。而读写锁在同一时间，是可以让多个线程获取到锁的，它其实就是针对于读写场景而出现的。\n读写锁维护了一个读锁和一个写锁，这两个锁的机制是不同的。\n读锁：在没有任何线程占用写锁的情况下，同一时间可以有多个线程加读锁。\n写锁：在没有任何线程占用读锁的情况下，同一时间只能有一个线程加写锁。\n显然读锁是可以重复获取的但是写锁不能，当一个线程同时拥有写锁和读锁的时候，先申请读锁 然后释放写锁，此时其他的线程又可以获取读锁，只剩下读锁，此时称之为“锁降级”。 在仅仅持有读锁的时候去申请写锁，称为“锁升级”，这时候ReentryReadWriteLock类不支持。\n队列同步器AQS（AbstractQueuedSynchronizer） # 继承关系：Lock-\u0026gt; Sync -\u0026gt; AbstractQueuedSynchronizer\n多线程并发环境下的ABA问题 # //ABA问题的版本号解决方法 AtomicReference\u0026lt;String\u0026gt; atomicReference=new AtomicReference\u0026lt;\u0026gt;(\u0026#34;A\u0026#34;); System.out.println(atomicReference.compareAndSet(\u0026#34;a\u0026#34;, \u0026#34;c\u0026#34;)); String hello = \u0026#34;hello\u0026#34;; String world = \u0026#34;world\u0026#34;; Runnable r=()-\u0026gt;{ System.out.println(atomicReference.compareAndSet(\u0026#34;A\u0026#34;, \u0026#34;B\u0026#34;)); }; for (int i = 0; i \u0026lt; 100; i++) { new Thread(r).start(); } 可以看到多个线程尝试去修改的时候出现了一个true\n解决办法：添加版本号，每次修改的时候对版本号（stamp）进行修正\n并发容器 # 比如在对链表添加元素的时候，还没有完成对链表扩容之前，其他线程插队，非法插入元素，就会造成数组越界的报错。\nConcurrentHashMap:在jdk1.7之前的实现方法，比如在原子类里面实现LongAdder具有压力分散的思想，提高了性能，选择将数据一段一段的存储，这样就减少了等待，当线程访问锁的时候只占用锁的一小部分 jdk8之后，实现方法是通过cas算法配合锁机制实现的。由于HashMap利用了哈希表，容量越大，加锁的粒度就会越细。 //原子类的测试操作 //ABA问题的版本号解决方法 CopyOnWriteArrayList\u0026lt;Object\u0026gt; objects = new CopyOnWriteArrayList\u0026lt;\u0026gt;(); //读取不加锁，写数据需要加锁，所以性能还行 //专用于多线程环境下的容器 LinkedList\u0026lt;Object\u0026gt; list = new LinkedList\u0026lt;\u0026gt;();//没有发生并发异常 ArrayList\u0026lt;Object\u0026gt; list1 = new ArrayList\u0026lt;\u0026gt;(); ConcurrentHashMap\u0026lt;Integer, String\u0026gt; map = new ConcurrentHashMap\u0026lt;\u0026gt;(); HashMap\u0026lt;Integer, String\u0026gt; hashMap = new HashMap\u0026lt;\u0026gt;(); Runnable r=()-\u0026gt;{ for (int j = 0; j \u0026lt; 100; j++) { int finalI=j; objects.add(\u0026#34;aaa\u0026#34;); map.put(finalI,\u0026#34;aaa\u0026#34;); hashMap.put(finalI,\u0026#34;aaa\u0026#34;); } }; for (int i = 0; i \u0026lt; 100; i++) { new Thread(r).start(); } TimeUnit.SECONDS.sleep(1); 阻塞队列（BlokingQueue） # 生产者消费之模型：\n//测试阻塞队列实现生产者消费者模型 BlockingQueue\u0026lt;Object\u0026gt; queue=new ArrayBlockingQueue\u0026lt;\u0026gt;(1);//窗口只能放一个菜，阻塞队列的容量 Runnable supplier=()-\u0026gt;{ while (true){ try { String name = Thread.currentThread().getName(); System.err.println(time()+\u0026#34;生产者\u0026#34;+name+\u0026#34;正在准备餐品\u0026#34;); TimeUnit.SECONDS.sleep(3); System.err.println(time()+\u0026#34;生产者\u0026#34;+name+\u0026#34;已出餐\u0026#34;); queue.put(new Object()); }catch (InterruptedException e){ e.printStackTrace(); break; } } }; Runnable consumer=()-\u0026gt;{ while (true){ try { String name = Thread.currentThread().getName(); System.out.println(time()+\u0026#34;消费者\u0026#34;+name+\u0026#34;正在等待餐品\u0026#34;); queue.take(); System.out.println(time()+\u0026#34;消费者\u0026#34;+name+\u0026#34;已取餐\u0026#34;); TimeUnit.SECONDS.sleep(4); System.out.println(time()+\u0026#34;消费者\u0026#34;+name+\u0026#34;已吃完\u0026#34;); }catch (InterruptedException e){ e.printStackTrace(); break; } } }; for (int i = 0; i \u0026lt; 2; i++) { new Thread(supplier,\u0026#34;supplier\u0026#34;+i).start(); } for (int i = 0; i \u0026lt; 3; i++) { new Thread(consumer,\u0026#34;consumer\u0026#34;+i).start(); } } public static String time(){ SimpleDateFormat format = new SimpleDateFormat(\u0026#34;HH:mm:ss\u0026#34;); return \u0026#34;[\u0026#34;+format.format(new Date())+\u0026#34;]\u0026#34;; } 常见的阻塞队列：ArrayBlokingQueue(有界缓冲阻塞队列),SynchronousQueue(无缓冲阻塞队列),LinkedBlokingQueue(无界带缓冲阻塞队列)\npublic boolean offer(E e) { Objects.requireNonNull(e);//检查当前的队列是否为空 final ReentrantLock lock = this.lock;//对当前线程加锁 lock.lock(); try { if (count == items.length) return false; else { enqueue(e); return true; } } finally { lock.unlock(); } } public E take() throws InterruptedException { final ReentrantLock lock = this.lock; lock.lockInterruptibly(); try { while (count == 0) notEmpty.await();//当当前线程读取到队列为空时，由于take操作时阻塞的，需要挂起当前线程，等待直到队列里面有值 return dequeue(); } finally { lock.unlock(); } } SynchronousQueue(没有任何容量，插入和取出是一一对应的) # SynchronousQueue\u0026lt;String\u0026gt; queue=new SynchronousQueue\u0026lt;\u0026gt;(); new Thread(()-\u0026gt;{ try { System.out.println(queue.take()); } catch (InterruptedException e) { throw new RuntimeException(e); } }).start(); queue.put(\u0026#34;sss\u0026#34;); 这是一个特殊的队列，内部维护了一个抽象类Transfer（put和take操作糅合在一起了）， 里面有一个方法：transfer（E e,bolean timed,long nanos）直接通过生产者和消费者模型来实现数据的传递。 当新的元素put进去线程将会阻塞。直到元素被take。同时这个类维护了公平锁和非公平锁两种方法。\n当当前队列里面有元素但是没有线程来取元素时候，就会开启自旋，当自旋一定次数之后还没有来取就会挂起\nPriorityBlockingQueue优先队列 # 构造方法：PriorityQueue queue=new PriorityQueue(10,Integer::compare);\n传入容量和函数逻辑（优先逻辑）\nDelayQueue延时队列 # 特殊地方：存储的元素必须是继承自Delayed接口的类，同时元素类必须实现Delayed接口。\n使用时可以实现延时出队，按照同时的时候按照优先级（自己实现）进行出队，这样就可以实现缓存了。\n底层实现：\npublic class DelayQueue\u0026lt;E extends Delayed\u0026gt; extends AbstractQueue\u0026lt;E\u0026gt; implements BlockingQueue\u0026lt;E\u0026gt; { private final transient ReentrantLock lock = new ReentrantLock(); private final PriorityQueue\u0026lt;E\u0026gt; q = new PriorityQueue\u0026lt;E\u0026gt;(); //通过内部维护的优先队列来实现元素的存储，而不是本身进行存储 } 主要常见的阻塞队列总结如下： # ArrayBlokingQueue底层通过数组实现的阻塞队列，可以设置初始的容量，换句话容量是固定的 LinkedTransferQueue SynchronousQueue要求入队和出队必须同时进行，一一对应，原因是内部维护了一个抽象类tansfer，需要等到消费者和生产者同时到齐才可以完成交接工作，支持公平和非公平 PriorityBlokingQueue优先队列，元素的获取顺序按照优先级决定 DelayQueue能够实现延迟获取元素，同样支持优先级，要求加入的元素必须继承Delayed接口 数据字典 # 常见的常用的数据，具有分级的特点，现在将比如省份县市地点的信息维护成一张表就可以是实现 据字典，通常具有id，parent_id这些字段，维护父级和子级的关系。\n关于ElementUi的数据字典的显示方法就是检查hasChildren字段的值进行渲染\n线程池 # 引入原因：频繁创建和销毁线程对系统资源的浪费十分严重，为了合理分配和调用系统资源，产生了线程池的技术\n实现原理：将已创建的线程复用，利用池化技术，就像数据库连接池一样，我们也可以创建很多个线程，然后反复地使用这些线程，而不对它们进行销毁。\n由于线程池可以反复利用已有线程执行多线程操作，所以它一般是有容量限制的，当所有的线程都处于工作状态时，那么新的多线程请求会被阻塞，直到有一个线程空闲出来为止，实际上这里就会用到我们之前讲解的阻塞队列。\n","date":"9 October 2023","permalink":"/java/%E5%B9%B6%E5%8F%91/juc/","section":"Javas","summary":"Java 并发编程 # 轻量级锁： # 检查当前对象的mark word是否有被其他线程占用，假如没有就会在当前栈帧里面建立一个 锁记录，复制并存储当前对象的mark word 信息。\n不像重量级锁需要向系统申请互斥量，\nCAS（无锁算法） # 显然，当cas失败的时候，说明有线程进入了这个同步代码块，这个时候，虚拟机将会检查 当前对象的mark word是否指向当前对象的栈帧，是的话就说明当前已经获得锁，否则不是-》退化为重量级锁(不可逆) 解锁时，同样使用CAS算法操作，同时唤醒挂起的线程\n偏向锁 # 当某个锁频繁的被同一个线程获取，对轻量级锁进行优化，所以偏向锁专门为单个线程服务，此时，无须再进行CAS操作，当其他线程 又开始抢锁，偏向锁可能退化为轻量级锁。注意当调用对象的hashCode（）方法，由于mark word 数据结构无法 保存hash值，偏向锁直接退化为轻量级锁。\n锁的退化不可逆\n锁消除和锁优化 # 代码块中有可能不会总是出现请求锁和释放锁的问题，（比如循环中加锁），此时锁为了优化出现锁消除和锁优化\nJava内存模型（JMM） # 主内存： 存放对象实例的部分 工作内存：虚拟机栈的部分，放入cpu的高速缓存里面。 自增操作不是由一个指令实现的！！！包括获取，修改和保存","title":"Java-Concurrent"},{"content":"","date":"7 October 2023","permalink":"/friend/","section":"Friends","summary":"","title":"Friends"},{"content":"\r你好我的朋友！！ # 需要添加友链请联系我的邮箱。\n","date":"7 October 2023","permalink":"/friend/hello/","section":"Friends","summary":"你好我的朋友！！ # 需要添加友链请联系我的邮箱。","title":"Hello"},{"content":"","date":"3 October 2023","permalink":"/complex/","section":"Complexes","summary":"","title":"Complexes"},{"content":"\r如何通过Hugo这个框架来搭建一款属于自己的博客呢？ # 观前提醒：这篇笔记借鉴了下面两个作者：\n一是：\r小棉尾巴\n事件契机 # 我其实原本就知道github的pages自动部署博客功能，当时大二不熟练，今天目睹专业大佬的博客，自然也就重新搞起来了。\n如下就是大佬的博客（这个主题本来尝试用，后续发现比较花哨就不采用了）\n本人搭建的博客：\n第一步下载HuGo框架： # 以Windows为例：只需打开CMD执行下面这个命令\nwinget install Hugo.Hugo.Extended 等待下载完成重启Shell命令窗口即可，Hugo将会自动配置环境变量。\n检查是否安装成功：\nhugo version 第二部创建Hugo博客项目 # 只需要在文件夹下面新建终端使用如下命令，hugo将会自动创建你的项目名称文件夹 ，同时弹出一个主题链接\nhugo new site +你的项目名称 现在你需要进入你的项目也就是命令： cd 你的项目名称\n同时将项目注册为git根\ngit init 例如： 点击\rhttps://themes.gohugo.io/.这个链接\n如下就是一些主题了：\n随意选取一个之后点击Download就会进入主题的github仓库，然后需要\n比如这个：\n执行install the theme 里面的命令\ngit submodule add git@github.com:MeiK2333/github-style.git themes/github-style 下载的主题插件将会进入themes目录里面:\n接着拷贝exampleSite目录下面的content,static,config.toml到自己的项目里面覆盖自己项目的目录。同时记得删除hugo.toml配置文件\n第三步，几个重要的命令 # 第一个是：hugo server:类似于npm run serve/dev 将会部署项目，这时候自己访问\rhttp://127.0.0.1:1313/就可以查看自己的网站 第二个是：hugo new 文件路径+文件名称.md则是创建笔记，hugo将会自主创建文档 第三个是：hugo ,hugo将会编译markdown文件为html文件存储到public文件夹下面同时部署到网站上 最后一步 # 将public注册为git根绑定github上你的仓库同时提交文件即可。\n感谢\n","date":"3 October 2023","permalink":"/complex/%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87hugo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/","section":"Complexes","summary":"如何通过Hugo这个框架来搭建一款属于自己的博客呢？ # 观前提醒：这篇笔记借鉴了下面两个作者：\n一是：\r小棉尾巴\n事件契机 # 我其实原本就知道github的pages自动部署博客功能，当时大二不熟练，今天目睹专业大佬的博客，自然也就重新搞起来了。\n如下就是大佬的博客（这个主题本来尝试用，后续发现比较花哨就不采用了）\n本人搭建的博客：\n第一步下载HuGo框架： # 以Windows为例：只需打开CMD执行下面这个命令\nwinget install Hugo.Hugo.Extended 等待下载完成重启Shell命令窗口即可，Hugo将会自动配置环境变量。\n检查是否安装成功：\nhugo version 第二部创建Hugo博客项目 # 只需要在文件夹下面新建终端使用如下命令，hugo将会自动创建你的项目名称文件夹 ，同时弹出一个主题链接\nhugo new site +你的项目名称 现在你需要进入你的项目也就是命令： cd 你的项目名称","title":"如何通过hugo搭建自己的博客"},{"content":"","date":"3 October 2023","permalink":"/tags/java-se/","section":"Tags","summary":"","title":"Java SE"},{"content":"1 综述 在Java中对象与对象的关系总体分为四类，分别是：依赖、关联、聚合和组合。\n（1）依赖(Dependency)关系是类与类之间的联接。依赖关系表示一个类依赖于另一个类的定义，一般而言，依赖关系在Java语言中体现为局域变量、方法的形参，或者对静态方法的调用。 （2）关联(Association）关系是类与类之间的联接，它使一个类知道另一个类的属性和方法。关联可以是双向的，也可以是单向的。在Java语言中，关联关系一般使用成员变量来实现 （3）聚合(Aggregation) 关系是关联关系的一种，是强的关联关系。聚合是整体和个体之间的关系 （4）组合(Composition) 关系是关联关系的一种，是比聚合关系强的关系。它要求普通的聚合关系中代表整体的对象负责代表部分对象的生命周期，组合关系是不能共享的\n依赖： # 个类A使用到了另一个类B，而这种使用关系是具有偶然性的、临时性的、非常弱的，但是B类的变化会影响到A\n关联： # 关联是一种“拥有”的关系。表现在代码上，就是一个类包含另一个类的实例，通常表现为被关联类以类属性的形式出现在关联类的类定义中，也可以表现为关联类引用了一个类型为被关联类的全局变量。关联可以使单向的，也可以使双向的。依赖和关联的区别在于依赖是使用，关联是拥有.\n聚合 # 聚合是关联关系的一种，它是一种强关联关系（has-a）;聚合关系是整体和个体/部分之间的关系;关联关系的两个类处于同一个层次上,而聚合关系的两个类处于不同的层次上,一个是整体,一个是个体/部分;在聚合关系中,代表个体/部分的对象有可能会被多个代表整体的对象所共享;表现在代码层面上就是在构造器初始化时将两个类关联起来\n组合 # 组合也是关联关系的一种（is-a）,但它是比聚合关系更强的关系.组合关系要求聚合关系中代表整体的对象要负责代表个体/部分的对象的整个生命周期;组合关系不能共享;在组合关系中,如果代表整体的对象被销毁或破坏,那么代表个体/部分的对象也一定会被销毁或破坏,而聚在合关系中,代表个体/部分的对象则有可能被多个代表整体的对象所共享,而不一定会随着某个代表整体的对象被销毁或破坏而被销毁或破坏;\n","date":"3 October 2023","permalink":"/java/javase/%E5%AF%B9%E8%B1%A1%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/","section":"Javas","summary":"1 综述 在Java中对象与对象的关系总体分为四类，分别是：依赖、关联、聚合和组合。\n（1）依赖(Dependency)关系是类与类之间的联接。依赖关系表示一个类依赖于另一个类的定义，一般而言，依赖关系在Java语言中体现为局域变量、方法的形参，或者对静态方法的调用。 （2）关联(Association）关系是类与类之间的联接，它使一个类知道另一个类的属性和方法。关联可以是双向的，也可以是单向的。在Java语言中，关联关系一般使用成员变量来实现 （3）聚合(Aggregation) 关系是关联关系的一种，是强的关联关系。聚合是整体和个体之间的关系 （4）组合(Composition) 关系是关联关系的一种，是比聚合关系强的关系。它要求普通的聚合关系中代表整体的对象负责代表部分对象的生命周期，组合关系是不能共享的\n依赖： # 个类A使用到了另一个类B，而这种使用关系是具有偶然性的、临时性的、非常弱的，但是B类的变化会影响到A\n关联： # 关联是一种“拥有”的关系。表现在代码上，就是一个类包含另一个类的实例，通常表现为被关联类以类属性的形式出现在关联类的类定义中，也可以表现为关联类引用了一个类型为被关联类的全局变量。关联可以使单向的，也可以使双向的。依赖和关联的区别在于依赖是使用，关联是拥有.\n聚合 # 聚合是关联关系的一种，它是一种强关联关系（has-a）;聚合关系是整体和个体/部分之间的关系;关联关系的两个类处于同一个层次上,而聚合关系的两个类处于不同的层次上,一个是整体,一个是个体/部分;在聚合关系中,代表个体/部分的对象有可能会被多个代表整体的对象所共享;表现在代码层面上就是在构造器初始化时将两个类关联起来\n组合 # 组合也是关联关系的一种（is-a）,但它是比聚合关系更强的关系.组合关系要求聚合关系中代表整体的对象要负责代表个体/部分的对象的整个生命周期;组合关系不能共享;在组合关系中,如果代表整体的对象被销毁或破坏,那么代表个体/部分的对象也一定会被销毁或破坏,而聚在合关系中,代表个体/部分的对象则有可能被多个代表整体的对象所共享,而不一定会随着某个代表整体的对象被销毁或破坏而被销毁或破坏;","title":"对象间的关系"},{"content":"Java中常用的关键字有以下分类： 访问控制 private protected public\n类,方法和变量修饰符 abstract class extends final implements interface native new static strictfp synchronized transient volatile\n程序控制 break continue return do while if else for instanceof switch case default\n异常处理 try cathc throw throws\n包相关 import package\n基本类型 boolean byte char double float int long short null true false\n变量引用 super this void 保留字 goto const\n详细解释：\n访问控制 private 私有的 private 关键字是访问控制修饰符，可以应用于类、方法或字段（在类中声明的变量）。 只能在声明 private（内部）类、方法或字段的类中引用这些类、方法或字段。在类的外部或者对于子类而言，它们是不可见的。 所有类成员的默认访问范围都是 package 访问，也就是说，除非存在特定的访问控制修饰符，否则，可以从同一个包中的任何类访问类成员。\nprotected 受保护的 protected 关键字是可以应用于类、方法或字段（在类中声明的变量）的访问控制修饰符。可以在声明 protected 类、方法或字段的类、同一个包中的其他任何类以及任何子类（无论子类是在哪个包中声明的）中引用这些类、方法或字段。所有类成员的默认访问范围都是 package 访问，也就是说，除非存在特定的访问控制修饰符，否则，可以从同一个包中的任何类访问类成员。\npublic 公共的 public 关键字是可以应用于类、方法或字段（在类中声明的变量）的访问控制修饰符。 可能只会在其他任何类或包中引用 public 类、方法或字段。所有类成员的默认访问范围都是 package 访问，也就是说，除非存在特定的访问控制修饰符，否则，可以从同一个包中的任何类访问类成员。\n4）总结 自身\t同包子类\t不同包子类\t同包类\t其他类 public\t可访问\t可继承\t可继承\t可访问\t可访问 protected\t可访问\t可继承\t可继承\t可访问\t不可访问 private\t可访问\t不可继承\t不可继承\t不可访问\t不可访问 defaule(不写)\t可访问\t可继承\t不可继承\t可访问\t不可访问\n类、方法和变量修饰符 abstract 声明抽象 abstract关键字可以修改类或方法。abstract类可以扩展（增加子类），但不能直接实例化。abstract方法不在声明它的类中实现，但必须在某个子类中重写。采用 abstract方法的类本来就是抽象类，并且必须声明为abstract。\nclass类 class 关键字用来声明新的 Java 类，该类是相关变量和/或方法的集合。类是面向对象的程序设计方法的基本构造单位。类通常代表某种实际实体，如几何形状或人。类是对象的模板。每个对象都是类的一个实例。要使用类，通常使用 new 操作符将类的对象实例化，然后调用类的方法来访问类的功能。\nextends 继承、扩展 extends 关键字用在 class 或 interface 声中，用于指示所声明的类或接口是其名称后跟有 extends 关键字的类或接口的子类。子类继承父类的所有 public 和 protected 变量和方法。 子类可以重写父类的任何非 final 方法。一个类只能扩展一个其他类。\nfinal 最终、不可改变 final 关键字可以应用于类，以指示不能扩展该类（不能有子类）。final 关键字可以应用于方法，以指示在子类中不能重写此方法。一个类不能同时是 abstract 又是 final。abstract 意味着必须扩展类，final 意味着不能扩展类。一个方法不能同时是 abstract 又是 final。abstract 意味着必须重写方法，final 意味着不能重写方法。\nimplements实现 implements 关键字在 class 声明中使用，以指示所声明的类提供了在 implements 关键字后面的名称所指定的接口中所声明的所有方法的实现。类必须提供在接口中所声明的所有方法的实现。一个类可以实现多个接口。\ninterface 接口 interface 关键字用来声明新的 Java 接口，接口是方法的集合。\n接口是 Java 语言的一项强大功能。任何类都可声明它实现一个或多个接口，这意味着它实现了在这些接口中所定义的所有方法。\n实现了接口的任何类都必须提供在该接口中的所有方法的实现。一个类可以实现多个接口。\nnative 本地 native 关键字可以应用于方法，以指示该方法是用 Java 以外的语言实现的。\nnew 新,创建 new 关键字用于创建类的新实例。\nnew 关键字后面的参数必须是类名，并且类名的后面必须是一组构造方法参数（必须带括号）。\n参数集合必须与类的构造方法的签名匹配。\n= 左侧的变量的类型必须与要实例化的类或接口具有赋值兼容关系。\nstatic 静态 static 关键字可以应用于内部类（在另一个类中定义的类）、方法或字段（类的成员变量）。 通常，static 关键字意味着应用它的实体在声明该实体的类的任何特定实例外部可用。\nstatic（内部）类可以被其他类实例化和引用（即使它是顶级类）。\nstatic 字段（类的成员变量）在类的所有实例中只存在一次。\n可以从类的外部调用 static 方法，而不用首先实例化该类。这样的引用始终包括类名作为方法调用的限定符。\n模式：public final static varName = ; 通常用于声明可以在类的外部使用的类常量。在引用这样的类常量时需要用类名加以限定。\nstrictfp 严格,精准 strictfp的意思是FP-strict，也就是说精确浮点的意思。在Java虚拟机进行浮点运算时，如果没有指定strictfp关键字时，Java的编译器以及运行环境在对浮点运算的表达式是采取一种近似于我行我素的行为来完成这些操作，以致于得到的结果往往无法令人满意。而一旦使用了strictfp来声明一个类、接口或者方法时，那么所声明的范围内Java的编译器以及运行环境会完全依照浮点规范IEEE-754来执行。因此如果想让浮点运算更加精确，而且不会因为不同的硬件平台所执行的结果不一致的话，那就请用关键字strictfp。 可以将一个类、接口以及方法声明为strictfp，但是不允许对接口中的方法以及构造函数声明strictfp关键字\nsynchronized线程、同步 synchronized 关键字可以应用于方法或语句块，并为一次只应由一个线程执行的关键代码段提供保护。 synchronized 关键字可防止代码的关键代码段一次被多个线程执行。\n如果应用于静态方法，那么，当该方法一次由一个线程执行时，整个类将被锁定。\n如果应用于实例方法，那么，当该方法一次由一个线程访问时，该实例将被锁定。\n如果应用于对象或数组，当关联的代码块一次由一个线程执行时，对象或数组将被锁定。\ninstanceof 实例 instanceof 关键字用来确定对象所属的类。\ntransient 短暂 transient 关键字可以应用于类的成员变量，以便指出该成员变量不应在包含它的类实例已序列化时被序列化。\n当一个对象被串行化的时候，transient型变量的值不包括在串行化的表示中，然而非transient型的变量是被包括进去的。\nJava的serialization提供了一种持久化对象实例的机制。当持久化对象时，可能有一个特殊的对象数据成员，我们不想用serialization机制来保存它。为了在一个特定对象的一个域上关闭serialization，可以在这个域前加上关键字transient。 transient是Java语言的关键字，用来表示一个域不是该对象串行化的一部分。当一个对象被串行化的时候，transient型变量的值不包括在串行化的表示中，然而非transient型的变量是被包括进去的。\nvolatile 易失 volatile 关键字用于表示可以被多个线程异步修改的成员变量。 注意：volatile 关键字在许多 Java 虚拟机中都没有实现。 volatile 的目标用途是为了确保所有线程所看到的指定变量的值都是相同的。\nJava 语言中的 volatile 变量可以被看作是一种 “程度较轻的 synchronized”；与 synchronized 块相比，volatile 变量所需的编码较少，并且运行时开销也较少，但是它所能实现的功能也仅是 synchronized 的一部分。\n程序控制语句 break 跳出，中断 break 关键字用于提前退出 for、while 或 do 循环，或者在 switch 语句中用来结束 case 块。 break 总是退出最深层的 while、for、do 或 switch 语句。\ncontinue 继续 continue 关键字用来跳转到 for、while 或 do 循环的下一个迭代。 continue 总是跳到最深层 while、for 或 do 语句的下一个迭代。\nreturn 返回 return 关键字会导致方法返回到调用它的方法，从而传递与返回方法的返回类型匹配的值。 如果方法具有非 void 的返回类型，return 语句必须具有相同或兼容类型的参数。\ndo 运行 do 关键字用于指定一个在每次迭代结束时检查其条件的循环。 do 循环体至少执行一次。\n条件表达式后面必须有分号。\nwhile 循环 while 关键字用于指定一个只要条件为真就会重复的循环。\nif 如果 if 关键字指示有条件地执行代码块。条件的计算结果必须是布尔值。\nif 语句可以有可选的 else 子句，该子句包含条件为 false 时将执行的代码。\n包含 boolean 操作数的表达式只能包含 boolean 操作数。\nelse 否则 else 关键字总是在 if-else 语句中与 if 关键字结合使用。else 子句是可选的，如果 if 条件为 false，则执行该子句。\nfor 循环 for 关键字用于指定一个在每次迭代结束前检查其条件的循环。\nfor 语句的形式为 for(initialize; condition; increment)\n控件流进入 for 语句时，将执行一次 initialize 语句。\n每次执行循环体之前将计算 condition 的结果。如果 condition 为 true，则执行循环体。\n每次执行循环体之后，在计算下一个迭代的 condition 之前，将执行 increment 语句。\nswitch 观察 switch 语句用于基于某个表达式选择执行多个代码块中的某一个。 switch 条件的计算结果必须等于 byte、char、short 或 int。\n如果没有 break 语句，执行流将进入所有后面的 case 和/或 default 块。\ncase 返回观察里的结果 case 用来标记 switch 语句中的每个分支。 case 块没有隐式结束点。break 语句通常在每个 case 块末尾使用，用于退出 switch 语句。\n如果没有 break 语句，执行流将进入所有后面的 case 和/或 default 块。\ndefault 默认 default 关键字用来标记 switch 语句中的默认分支。 default 块没有隐式结束点。break 语句通常在每个 case 或 default 块的末尾使用，以便在完成块时退出 switch 语句。\n如果没有 default 语句，其参数与任何 case 块都不匹配的 switch 语句将不执行任何操作。\n错误处理 try 捕获异常 try 关键字用于包含可能引发异常的语句块。 每个 try 块都必须至少有一个 catch 或 finally 子句。\n如果某个特定异常类未被任何 catch 子句处理，该异常将沿着调用栈递归地传播到下一个封闭 try 块。如果任何封闭 try 块都未捕获到异常，Java 解释器将退出，并显示错误消息和堆栈跟踪信息。\ncatch 处理异常 catch 关键字用来在 try-catch 或 try-catch-finally 语句中定义异常处理块。 开始和结束标记 { 和 } 是 catch 子句语法的一部分，即使该子句只包含一个语句，也不能省略这两个标记。\n每个 try 块都必须至少有一个 catch 或 finally 子句。\n如果某个特定异常类未被任何 catch 子句处理，该异常将沿着调用栈递归地传播到下一个封闭 try 块。如果任何封闭 try 块都未捕获到异常，Java 解释器将退出，并显示错误消息和堆栈跟踪信息。\nthrow 抛出一个异常对象 throw 关键字用于引发异常。 throw 语句将 java.lang.Throwable 作为参数。Throwable 在调用栈中向上传播，直到被适当的 catch 块捕获。\nthrows 声明一个异常可能被抛出 throws 关键字可以应用于方法，以便指出方法引发了特定类型的异常。 throws 关键字将逗号分隔的 java.lang.Throwables 列表作为参数。\n引发非 RuntimeException 异常的任何方法还必须在方法声明中使用 throws 修饰符来声明它引发的异常。\n要在 try-catch 块中包含带 throws 子句的方法的调用，必须提供该方法的调用者。\nfinally异常处理补充 不管有无异常发生，finally块中的代码总会执行 包相关 import 引入 import 关键字使一个包中的一个或所有类在当前 Java 源文件中可见。可以不使用完全限定的类名来引用导入的类。 当多个包包含同名的类时，许多 Java 程序员只使用特定的 import 语句（没有“*”）来避免不确定性。\npackage 包 package 关键字指定在 Java 源文件中声明的类所驻留的 Java 包。 package 语句（如果出现）必须是 Java 源文件中的第一个非注释性文本。\n例:java.lang.Object。\n如果 Java 源文件不包含 package 语句，在该文件中定义的类将位于“默认包”中。请注意，不能从非默认包中的类引用默认包中的类。\n基本类型 boolean 布尔型 boolean 是 Java 原始类型。boolean 变量的值可以是 true 或 false。 boolean 变量只能以 true 或 false 作为值。boolean 不能与数字类型相互转换。\n包含 boolean 操作数的表达式只能包含 boolean 操作数。\nBoolean 类是 boolean 原始类型的包装对象类。\nbyte 字节型 byte 是 Java 原始类型。byte 可存储在 [-128, 127] 范围以内的整数值。 Byte 类是 byte 原始类型的包装对象类。它定义代表此类型的值的范围的 MIN_VALUE 和 MAX_VALUE 常量。\nJava 中的所有整数值都是 32 位的 int 值，除非值后面有 l 或 L（如 235L），这表示该值应解释为 long。\nchar 字符型 char 是 Java 原始类型。char 变量可以存储一个 Unicode 字符。 可以使用下列 char 常量：\\b - 空格, \\f - 换页, \\n - 换行, \\r - 回车, \\t - 水平制表符, ’ - 单引号, \u0026quot; - 双引号, \\ - 反斜杠, \\xxx - 采用 xxx 编码的 Latin-1 字符。\\x 和 \\xx 均为合法形式，但可能引起混淆。 \\uxxxx - 采用十六进制编码 xxxx 的 Unicode 字符。\nCharacter 类包含一些可用来处理 char 变量的 static 方法，这些方法包括 isDigit()、isLetter()、isWhitespace() 和 toUpperCase()。\nchar 值没有符号。\ndouble 双精度 double 是 Java 原始类型。double 变量可以存储双精度浮点值。 由于浮点数据类型是实际数值的近似值，因此，一般不要对浮点数值进行是否相等的比较。\nJava 浮点数值可代表无穷大和 NaN（非数值）。Double 包装对象类用来定义常量 MIN_VALUE、MAX_VALUE、NEGATIVE_INFINITY、POSITIVE_INFINITY 和 NaN。\nfloat 浮点 float 是 Java 原始类型。float 变量可以存储单精度浮点值。 使用此关键字时应遵循下列规则：\nJava 中的浮点文字始终默认为双精度。要指定单精度文字值，应在数值后加上 f 或 F，如 0.01f。\n由于浮点数据类型是实际数值的近似值，因此，一般不要对浮点数值进行是否相等的比较。\nJava 浮点数值可代表无穷大和 NaN（非数值）。Float 包装对象类用来定义常量 MIN_VALUE、MAX_VALUE、NEGATIVE_INFINITY、POSITIVE_INFINITY 和 NaN。\nint 整型 int 是 Java 原始类型。int 变量可以存储 32 位的整数值。 Integer 类是 int 原始类型的包装对象类。它定义代表此类型的值的范围的 MIN_VALUE 和 MAX_VALUE 常量。\nJava 中的所有整数值都是 32 位的 int 值，除非值后面有 l 或 L（如 235L），这表示该值应解释为 long。\nlong 长整型 long 是 Java 原始类型。long 变量可以存储 64 位的带符号整数。 Long 类是 long 原始类型的包装对象类。它定义代表此类型的值的范围的 MIN_VALUE 和 MAX_VALUE 常量。\nJava 中的所有整数值都是 32 位的 int 值，除非值后面有 l 或 L（如 235L），这表示该值应解释为 long。\nshort 短整型 short 是 Java 原始类型。short 变量可以存储 16 位带符号的整数。 Short 类是 short 原始类型的包装对象类。它定义代表此类型的值的范围的 MIN_VALUE 和 MAX_VALUE 常量。\nJava 中的所有整数值都是 32 位的 int 值，除非值后面有 l 或 L（如 235L），这表示该值应解释为 long。\nnull 空 null 是 Java 的保留字，表示无值。 将 null 赋给非原始变量相当于释放该变量先前所引用的对象。\n不能将 null 赋给原始类型（byte、short、int、long、char、float、double、boolean）变量。\ntrue 真 true 关键字表示 boolean 变量的两个合法值中的一个。\nfalse 假 false 关键字代表 boolean 变量的两个合法值之一。\n基本数据类型总结 关于Java数据类型，我也专门写过一篇总结性博客：Java数据类型\n变量引用 super 父类,超类 super 关键字用于引用使用该关键字的类的超类。 作为独立语句出现的 super 表示调用超类的构造方法。\nsuper.\u0026lt; methodName \u0026gt;() 表示调用超类的方法。只有在如下情况中才需要采用这种用法：要调用在该类中被重写的方法，以便指定应当调用在超类中的该方法。\nthis 本类 this 关键字用于引用当前实例。 当引用可能不明确时，可以使用 this 关键字来引用当前的实例。\nvoid 无返回值 void 关键字表示 null 类型。 void 可以用作方法的返回类型，以指示该方法不返回值。\n保留字 正确识别java语言的关键字（keyword）和保留字（reserved word）是十分重要的。Java的关键字对java的编译器有特殊的意义，他们用来表示一种数据类型，或者表示程序的结构等。保留字是为java预留的关键字，他们虽然现在没有作为关键字，但在以后的升级版本中有可能作为关键字。 识别java语言的关键字，不要和其他语言如c/c++的关键字混淆。 const和goto是java的保留字。 所有的关键字都是小写\ngoto 跳转 goto 保留关键字，但无任何作用。结构化程序设计完全不需要 goto 语句即可完成各种流程，而 goto 语句的使用往往会使程序的可读性降低，所以 Java 不允许 goto 跳转。\nconst 静态 const 保留字，是一个类型修饰符，使用const声明的对象不能更新。与final某些类似。\nnative 本地 Java不是完美的，Java的不足除了体现在运行速度上要比传统的C++慢许多之外，Java无法直接访问到操作系统底层（如系统硬件等)，为此Java使用native方法来扩展Java程序的功能。\n可以将native方法比作Java程序同Ｃ程序的接口，其实现步骤：\n１、在Java中声明native()方法，然后编译；\n２、用javah产生一个.h文件；\n３、写一个.cpp文件实现native导出方法，其中需要包含第二步产生的.h文件（注意其中又包含了JDK带的jni.h文件）；\n４、将第三步的.cpp文件编译成动态链接库文件；\n５、在Java中用System.loadLibrary()方法加载第四步产生的动态链接库文件，这个native()方法就可以在Java中被访问了。\n","date":"3 October 2023","permalink":"/java/javase/%E5%85%B3%E9%94%AE%E5%AD%97/","section":"Javas","summary":"Java中常用的关键字有以下分类： 访问控制 private protected public\n类,方法和变量修饰符 abstract class extends final implements interface native new static strictfp synchronized transient volatile\n程序控制 break continue return do while if else for instanceof switch case default","title":"关键字"},{"content":"\r如何从 Java 中的 LinkedList 类外部声明 Node 类型？ # 标签 java linked-list 如何声明 Node 类型的变量？ Node是LinkedList的内部类，在我正在编写的程序的main方法中，我想创建一个Node变量。但在下面代码片段的最后一行中，我收到错误消息“Nose 在 LinkedList 中具有私有(private)访问权限”。为什么我不能使用 Node 类型？\nimport java.util.LinkedList; public class MinSplit { public static long leastAmount; public static void main(String args[]) { LinkedList list = new LinkedList(); LinkedList.Node node = new LinkedList.Node(); 最佳答案 因为它被声明为私有(private)。它是 LinkedList 类的内部实现细节，您没有理由创建实例。显然，这是 Java 团队经过深思熟虑的设计决定，旨在保持 API 的整洁并避免由于人们破坏列表数据结构而导致的问题。 如果您想要实例化 Node 类以便可以对 LinkedList 执行某种操作，请再考虑一下。没有任何公共(public) API 以允许您将 Node 添加到 LinkedList 或使用它的方式公开 Node 类型任何其他方式。您可能需要从头开始实现您自己的链表类。 如果您希望将 Node 类用于其他目的，您应该声明一个新类或在第 3 方库中查找合适的类。\n从LinkedList的源码中可看出，Node是LinkedList（双向链表）的私有化内部类，外部无法访问，更不可能被实例化 # 具体参考\n","date":"3 October 2023","permalink":"/java/javase/%E5%AE%9E%E4%BE%8B%E5%8C%96node/","section":"Javas","summary":"如何从 Java 中的 LinkedList 类外部声明 Node 类型？ # 标签 java linked-list 如何声明 Node 类型的变量？ Node是LinkedList的内部类，在我正在编写的程序的main方法中，我想创建一个Node变量。但在下面代码片段的最后一行中，我收到错误消息“Nose 在 LinkedList 中具有私有(private)访问权限”。为什么我不能使用 Node 类型？\nimport java.util.LinkedList; public class MinSplit { public static long leastAmount; public static void main(String args[]) { LinkedList list = new LinkedList(); LinkedList.","title":"实例化Node"},{"content":"\r数组： # 1 public class Demo1_Array { 2 public static void main(String[] args) { 3 String [] array=new String[5];//需要初始化长度 4 array[0]=\u0026#34;hello\u0026#34;; 5 array[1]=\u0026#34;world\u0026#34;; 6 array[4]=\u0026#34;Mufasa\u0026#34;; 7 // array[5]=\u0026#34;right or not\u0026#34;;//ArrayIndexOutOfBoundsException 8 for(String str:array){ 9 System.out.print(str+\u0026#34;、\u0026#34;);//hello、world、null、null、Mufasa、 10 } 11 } 12 } 1 public class Demo1_Array2 { 2 public static void main(String[] args) { 3 String [] array={\u0026#34;hello\u0026#34;,\u0026#34;world\u0026#34;,null,null,\u0026#34;Mufasa\u0026#34;};//实例化\u0026amp;赋值 4 array = (String[])resizeArray(array,10); 5 for(String str:array){ 6 System.out.print(str+\u0026#34;、\u0026#34;);//hello、world、null、null、Mufasa、 7 } 8 } 9 10 private static Object resizeArray(Object oldArray, int newSize) {//数组扩容！！！真麻烦，还利用反射机制来实现 11 int oldSize = java.lang.reflect.Array.getLength(oldArray);//获取旧数组长度,向上转型！！！ 12 // int oldSize =oldArray.length;//无法在此使用，因为array内容的是不定类型 13 Class elementType = oldArray.getClass().getComponentType();//获取对象类别 14 Object newArray = java.lang.reflect.Array.newInstance(elementType,newSize);//利用Java的反射机制实例化新数组 15 int preserveLength = Math.min(oldSize, newSize);//判断是否需要copy数据 16 if (preserveLength \u0026gt; 0) 17 System.arraycopy(oldArray, 0, newArray, 0, preserveLength); 18 return newArray;//oldArray切断索引成为垃圾由Runtime.getRuntime().gc();回收处理 19 } 20 } 具体参考资料 # ","date":"3 October 2023","permalink":"/java/javase/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87/","section":"Javas","summary":"数组： # 1 public class Demo1_Array { 2 public static void main(String[] args) { 3 String [] array=new String[5];//需要初始化长度 4 array[0]=\u0026#34;hello\u0026#34;; 5 array[1]=\u0026#34;world\u0026#34;; 6 array[4]=\u0026#34;Mufasa\u0026#34;; 7 // array[5]=\u0026#34;right or not\u0026#34;;//ArrayIndexOutOfBoundsException 8 for(String str:array){ 9 System.","title":"数据结构篇"},{"content":"","date":"3 October 2023","permalink":"/tags/%E7%AE%97%E6%B3%95/","section":"Tags","summary":"","title":"算法"},{"content":"特点：线程隔离，相互是隔离的，不影响的,每个线程都自己玩自己的，只操作自己的单独的变量副本\n内部维护的是ThreadLocalMap，所以有key和value\n当key指向的值为null时，value不被清理，由于key是弱引用，此时就会造成内存泄露，所以必须要通过ThreadLocal里面的remove方法手动删除值，避免内存泄露。\nThreadLocalMap里面面由一个个由数组组成的key-value，组成了Entry 由ThreadLocal来设置值，删除值\n弱引用非常容易GC，很容易造成内存泄露，所以需要将key为null的entry清楚\n引用关系：Thread-\u0026gt; ThreadLocal-\u0026gt;Entry（弱）-\u0026gt;key（弱）-\u0026gt;value(强)（不清除时容易发生内存泄露）\n//内部类，实=实现 static ThreadLocalMap createInheritedMap(ThreadLocalMap parentMap) { return new ThreadLocalMap(parentMap); } static class ThreadLocalMap { static class Entry extends WeakReference\u0026lt;ThreadLocal\u0026lt;?\u0026gt;\u0026gt; { /** The value associated with this ThreadLocal. */ Object value; Entry(ThreadLocal\u0026lt;?\u0026gt; k, Object v) { super(k); value = v; } } private static final int INITIAL_CAPACITY = 16; private Entry[] table; private int size = 0; private int threshold; // Default to 0 private void setThreshold(int len) { threshold = len * 2 / 3; } private static int nextIndex(int i, int len) { return ((i + 1 \u0026lt; len) ? i + 1 : 0); } private static int prevIndex(int i, int len) { return ((i - 1 \u0026gt;= 0) ? i - 1 : len - 1); } ThreadLocalMap(ThreadLocal\u0026lt;?\u0026gt; firstKey, Object firstValue) { table = new Entry[INITIAL_CAPACITY]; int i = firstKey.threadLocalHashCode \u0026amp; (INITIAL_CAPACITY - 1); table[i] = new Entry(firstKey, firstValue); size = 1; setThreshold(INITIAL_CAPACITY); } private ThreadLocalMap(ThreadLocalMap parentMap) { Entry[] parentTable = parentMap.table; int len = parentTable.length; setThreshold(len); table = new Entry[len]; for (Entry e : parentTable) { if (e != null) { @SuppressWarnings(\u0026#34;unchecked\u0026#34;) ThreadLocal\u0026lt;Object\u0026gt; key = (ThreadLocal\u0026lt;Object\u0026gt;) e.get(); if (key != null) { Object value = key.childValue(e.value); Entry c = new Entry(key, value); int h = key.threadLocalHashCode \u0026amp; (len - 1); while (table[h] != null) h = nextIndex(h, len); table[h] = c; size++; } } } } } ","date":"3 October 2023","permalink":"/java/javase/threadlocal/","section":"Javas","summary":"特点：线程隔离，相互是隔离的，不影响的,每个线程都自己玩自己的，只操作自己的单独的变量副本\n内部维护的是ThreadLocalMap，所以有key和value\n当key指向的值为null时，value不被清理，由于key是弱引用，此时就会造成内存泄露，所以必须要通过ThreadLocal里面的remove方法手动删除值，避免内存泄露。\nThreadLocalMap里面面由一个个由数组组成的key-value，组成了Entry 由ThreadLocal来设置值，删除值\n弱引用非常容易GC，很容易造成内存泄露，所以需要将key为null的entry清楚\n引用关系：Thread-\u0026gt; ThreadLocal-\u0026gt;Entry（弱）-\u0026gt;key（弱）-\u0026gt;value(强)（不清除时容易发生内存泄露）\n//内部类，实=实现 static ThreadLocalMap createInheritedMap(ThreadLocalMap parentMap) { return new ThreadLocalMap(parentMap); } static class ThreadLocalMap { static class Entry extends WeakReference\u0026lt;ThreadLocal\u0026lt;?\u0026gt;\u0026gt; { /** The value associated with this ThreadLocal.","title":"ThreadLocal"},{"content":"\rRedis学习： # 通用命令 # 不要在主节点用：keys param 命令来查询，这查询速率很慢，单线程将会被阻塞 del param（可以是多个参数） :删除指定的key exists param(判断key是否存在) expire key time :设置有效期时间 ttl key :查看key的有效期\nString类型 # 最简单的Redis数据类型，value：string,int,float；最大空间不超过512M set key value get key\nMset 批量 添加key-value\nMget批量获取\n数值类型：incr ：让变量自增加一\nincrby num：按照步长增加\nsetnx:不存在 key才可以添加这个key\n如何区分不同的key？ # 利用层级结构来表明table，以后的大部分业务都是用层级结构来展现和布局的！\nHash类型 # 哈希类型，也叫做散列，Hash的value是一个无须字典，类似于HashMap的结构。\n具有field这一个字段，这是不一样的。\nList类型 # 类似于 LinkedList(也就是双向链表)\n有序 元素可重复 插入删除快 查询速度一般 Lpush key element：向左侧插入元素 返回列表长度，相应的向右边：Rpush key element\nLpop key:移除左侧第一个元素，没有则返回nil\nBlop/Brpop key times:阻塞队列的插入 ,加上阻塞时间\n如何用List来模拟栈？\n入口和出口一起。Lpush和Lpop\n模拟队列？\n入口和出口不在一起。Lpush和Rpop\n模拟阻塞队列？\n入口出口不在一边，取的时候用阻塞Brpop/Blpop\nSet类型 # 类似于HashSet，可以看作是value为null的hashMap。\nSadd key member:添加一个或多个元素。\nSrem key member:删除元素\nSmembers：获取所有元素\nSinter key1 key2:求取交集\nSdiff：求差集\nSunion:求并集\nScard:求元素个数\nSismenber key member:是否是成员\nSortedSet # zrank key member:排名从0开始计算\nzcount key min max:统计区间数量\n# Redis实际开发时序列化的问题 # Session共享问题，基于Redis实现的Session数据数据共享 # 多台Tomcat服务器，每一台都有不同的Session空间，将会存在共享问题,互相拷贝具有时间延迟和空间浪费的问题。\n解决方案：Redis数据共享\ncode作为key显然是不行的，将会覆盖，所有选用Phone作为key，使用Hash结构来存储， 内存占用也会比较少相对于String类型，使用随机token作为key来存储用户信息。 现在token作为登录凭证，返回token给客户端\n缓存：浏览器缓存-\u0026gt;应用层缓存（Redis，Nginx,Tomcat\u0026hellip;各种缓存）-\u0026gt;数据库缓存，根据索引来进行缓存，减少磁盘IO\n优点：降低后端负载，提高读写速率，降低响应时间 成本：数据一致性成本，当数据库发生改变时，缓存未跟新，就会出现不一致， 代码维护成本也会提高，为了高可用，运维成本也会提高\n缓存更新策略： # 内存淘汰，超时剔除(低一致性)，主动更新（高一致性）\n主动更新：\n1调用者更新数据库时同时更新缓存；（可控性最高）\n2 缓存和数据库整合为一个服务；\n3 调用只操作，独立异步线程持久化到数据库,从而实现缓存和数据库一致\n删除缓存（无效操作太多）而不是更新缓存，单体项目需要将缓存和数据库放在一个事务，考虑线程安全 Cache Aside Pattern（解决线程安全问题） 缓存穿透： # 请求客户端数据中，缓存里面和数据库里面数据都不存在，请求都打到数据库上面了\n解决办法：布隆过滤器（内存占用少），缓存空对象或者null（额外内存消耗，可能造成短期不一致） 主动添加 对ID的复杂度\n缓存雪崩 # 很多key同时失效\n缓存击穿 # 热点key突然失效，无效热点数据给数据库带来巨大压力\n1：使用互斥锁来写入缓存，但是互相等待时间比较长，性能较差\n2：逻辑过期TTL=-1\n选择一致性还是可用性\n全局唯一 ID生成器 UUID：没有满足特性 ，RedisId：数字类型，snowflake：算法，维护机器ID\n多线程下高并发超卖问题是怎么发生的 # 当线程扣减时候，多线程查询库存，扣减库存之前，直接一个数据用两次，使得出现并发安全问题。\n锁的介绍： # 悲观锁： # 悲观锁\n例如synchronized 和lock，认为线程安全问题一定会发生，在操作数据之前一定要获得锁之后才执行\n乐观锁\n认为线程安全问题不一定会发生，多数情况不发生，不加锁， 在线程做数据更新时进行数据判断，看之前的判断数据是否发生修改，性能相较于乐观锁好\n那怎么判断之前的数据是否发生了修改呢？\n1：版本号法（最广泛） 给数据加上版本号，同时在修改时不仅要查询版本号同时还要修改版本号\n2：CAS方法，假如数据本身具有变化，那么数据本深就可以作为版本号\n3：分段锁，解决成功率较低的问题，实际秒杀还要对秒杀进行优化，不对数据库造成压力\n集群模式下的并发安全问题：\n当出现集群和负载均衡时，可能出现交叉执行，锁失效了，这就是分布式来解决这个问题\n锁监视器不是同一个\n出现了两套JVM，锁监视器具有不同的，这将会导致出现并发安全问题\n==》解决办法：分布式锁\n一人一单 # 分布式锁 # 实现原理：不同的JVM采用同一个JVM\n分布式锁特点：多进程可见同时时互斥的锁，高可用性，高并发（高性能），安全性，是否会产生死锁\n是否满足可重入性？（不是重点）\n分布式锁的实现\n实现方式：Mysql Redis Zookeeper\nmysql:利用mysql本身的互斥锁机制，redis:利用setnx这样的互斥命令，利用key的过期时间来解决安全问题。\nzookeeper 利用唯一节点和有序性来实现互斥锁。高可用性还是比较好的，安全性较好\n基于Redis实现分布式锁： # 127.0.0.1:6379\u0026gt; help set SET key value [EX seconds|PX milliseconds|EXAT timestamp|PXAT milliseconds-timestamp|KEEPTTL] [NX|XX] [GET] summary: Set the string value of a key since: 1.0.0 group: string 127.0.0.1:6379\u0026gt; set lock thread EX 10 NX OK 127.0.0.1:6379\u0026gt; set lock thread EX 10 NX (nil) 127.0.0.1:6379\u0026gt; ttl lock (integer) -2 实现将会是非阻塞式的分布式锁\n极端情况线程出现并发安全问题。\n解决办法：释放锁的时候需要进行检查，看自己的锁标识是否和之前获取的一样。\n只要redis锁发生了超时释放就有可能发生并发问题。\n例如FullGc时，发生阻塞就会出现并发问题，所以释放锁和判断锁标识必须是原子性的，必须同时\n用Lua脚本来解决原子性问题 # 利用看门狗解决锁超时释放的问题\nRedisson问题(呵呵，这是一个把分布式锁实现好的开源框架) # redisson 分布式锁原理： # 可重入：利用hash结构来记录线程id和重入次数，类似于ReentryLock\n可重试：利用信号量实现等待和获取锁失败的重试机制\n超时续约：利用看门狗，在获取锁之后，每隔一段时间，就自动续约，锁满血复活。\n分布式锁的主从一致性问题。 # 利用redisson的multi lock来实现\n利用Redis来优化秒杀 # 使用Set类型，解决唯一性问题。lua脚本来解决锁释放和事务提交的原子性问题\n将下单信息添加到阻塞队列里面\nWindows相关命令： # 查找并记录需要杀死的进程号码： netstat -ano\n查找端口：netstat -ano|findstr [Port]\n查找名称：tasklist |findstr [PID]\n杀死进程： taskkill -f -pid [PID]\n# 消息队列【Message Queue】:【RabbitMq Kafka RedisQ】 # 基于Redis实现的异步阻塞队列存在jvm内存溢出问题，基于此实现了消息队列。\n消息队列：存储和管理消息，称为消息代理（message broker）\n生产者:发送消息到消息队列\n消费者：从消息队列中获取消息并处理\n基于Redis-List结构来模拟消息队列 # BLpush+BRpop/BRpush+BLpop\n独立于JVM，不依赖于机器，具备数据持久化，满足消息的有序性。 无法避免消息丢失，只支持单消费者。\n基于PubSub的消息队列 # 发布-订阅模式\n支持多生产和多消费：publish subscribe，psubscribe匹配使用正则表达式\n不支持消息持久化，无法避免消息丢失（当客户端宕机时，不接受消息，消息将会丢失），消息堆积有上限。\n基于Stream的消息队列。基于Redis-5.0实现 # XADD key [队列是否创建] [消息队列最大上限] [ID] [filed] [value] XREAD [count] [block sec] streams [key] [id] xgroup creat key groupName ID 消息可回溯，可阻塞读取，可被多个消费者读取，有漏读的风险 单词：pending:待定\n消费者组： # 消息分流 消息标识（确保消息都会被消费） 消息确认（消息处于pending状态，存入list中，需要得到确认 ）\nxgroup create/destory/delconsumer key groupName ID [\u0026ldquo;mkstream\u0026rdquo;]\n基于stream来实现的消费者组， 读取消息都是从pending-list中读取消息，实现方法是通过id进行筛选\n消息读取之后必须进行确认，参数为消息id，确认之后消息id将会被消息队列移除\n消费者组的名称一般企业环境下都是写在yml文件里面\n三种消息队列List PubSub Stream 解决方案的区别 # 发布达人探店 # 对两张表去进行表的设计：\n利用Zsort来作为点赞和排行榜数据结构 相关命令：zadd member score ,zscore member，zrange key from to\n关注推送，Feed流，提供沉浸式体验 # 常见的两种实现模式：\ntimeline：核心需要带上时间戳，不做内容筛选，信息全面，实现相对简单，但是信息噪音比较多\n实现方式：拉模式，推模式，推拉结合\n拉模式（读扩散）：缺点是延迟高\n推模式\n推拉结合： 收件箱使用redis来实现，查询redis查询收件箱数据时需要实现分页查询，list，soretedset，数据的角标会发生变换，按照传统的分页方案将会出现错误\n智能排序：针对用户使用习惯做一些算法，尽量接近用户使用习惯，但当用户习惯与算法不对称时，将会出现反作用\n","date":"3 October 2023","permalink":"/java/%E7%BC%93%E5%AD%98/redis/","section":"Javas","summary":"Redis学习： # 通用命令 # 不要在主节点用：keys param 命令来查询，这查询速率很慢，单线程将会被阻塞 del param（可以是多个参数） :删除指定的key exists param(判断key是否存在) expire key time :设置有效期时间 ttl key :查看key的有效期\nString类型 # 最简单的Redis数据类型，value：string,int,float；最大空间不超过512M set key value get key\nMset 批量 添加key-value","title":"Redis"},{"content":"","date":"3 October 2023","permalink":"/tags/%E7%BC%93%E5%AD%98/","section":"Tags","summary":"","title":"缓存"},{"content":"\rHi ，你好！ # 我的名字是春江花朝秋月夜，我是这个博客的作者。我这样做是为了记录之前学习的笔记，这样很有成就感。 我们都知道在网络上开始做一些事情有多难，尤其是现在。但是，为了自己的头发没有白掉，加油吧，大家！\n这个博客网站在下面的支持下完成\n白天/夜晚 模式, 依赖于\rUI设计 非常感谢下面的几个网站支持我\rInter UI font,由\rRasmus Andersson制作 非常感谢这位提供的帮助\rPrismJS 以及我同专业的前辈：\rAncientElement 所以，希望你在这儿可以玩的开心！！！\n","date":"3 October 2023","permalink":"/about/","section":"春江花朝秋月夜","summary":"Hi ，你好！ # 我的名字是春江花朝秋月夜，我是这个博客的作者。我这样做是为了记录之前学习的笔记，这样很有成就感。 我们都知道在网络上开始做一些事情有多难，尤其是现在。但是，为了自己的头发没有白掉，加油吧，大家！\n这个博客网站在下面的支持下完成\n白天/夜晚 模式, 依赖于\rUI设计 非常感谢下面的几个网站支持我\rInter UI font,由\rRasmus Andersson制作 非常感谢这位提供的帮助\rPrismJS 以及我同专业的前辈：\rAncientElement 所以，希望你在这儿可以玩的开心！！！","title":"About"},{"content":" 我的名字是春江花朝秋月夜，我是这个博客的作者。我这样做是为了记录之前学习的笔记，这样很有成就感。 我们都知道在网络上开始做一些事情有多难，尤其是现在。但是，为了自己的头发没有白掉，加油吧，大家！\n— 春江花朝秋月夜 S01E01\n","date":"3 October 2003","permalink":"/post/hello/","section":"Posts","summary":"我的名字是春江花朝秋月夜，我是这个博客的作者。我这样做是为了记录之前学习的笔记，这样很有成就感。 我们都知道在网络上开始做一些事情有多难，尤其是现在。但是，为了自己的头发没有白掉，加油吧，大家！\n— 春江花朝秋月夜 S01E01","title":"Hello Friend"},{"content":"","date":"3 October 2003","permalink":"/post/","section":"Posts","summary":"","title":"Posts"},{"content":"","date":"1 January 0001","permalink":"/authors/","section":"Authors","summary":"","title":"Authors"},{"content":"","date":"1 January 0001","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":"1 January 0001","permalink":"/series/","section":"Series","summary":"","title":"Series"},{"content":"","date":"1 January 0001","permalink":"/topics/","section":"Topics","summary":"","title":"Topics"}]